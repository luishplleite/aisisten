const express = require("express");
const path = require("path");
const helmet = require("helmet");
const cors = require("cors");
const fs = require("fs");
const crypto = require("crypto");

// Polyfill para compatibilidade com Node.js 16
const fetch = require('node-fetch');
const { Headers, Request, Response } = fetch;

if (!globalThis.fetch) {
    globalThis.fetch = fetch;
    globalThis.Headers = Headers;
    globalThis.Request = Request;
    globalThis.Response = Response;
}

const { createClient } = require('@supabase/supabase-js');
const jwt = require('jsonwebtoken');
const { Pool } = require('pg');

// Configura√ß√£o do pool PostgreSQL para banco de desenvolvimento
const devPool = new Pool({
    host: process.env.PGHOST,
    port: process.env.PGPORT,
    user: process.env.PGUSER,
    password: process.env.PGPASSWORD || process.env.DATABASE_PASSWORD,
    database: process.env.PGDATABASE,
    ssl: false
});

const app = express();
// Configura√ß√£o de porta - usar 3001 para produ√ß√£o Docker, 5000 para Replit
const NODE_ENV = process.env.NODE_ENV || 'development';
const PORT = process.env.PORT || (NODE_ENV === 'production' ? 3001 : 5000);
const HOST = process.env.HOST || "0.0.0.0";

// Security middleware - Updated to fix COEP errors
app.use(helmet({
    contentSecurityPolicy: false,
    crossOriginEmbedderPolicy: false,
    crossOriginResourcePolicy: { policy: "cross-origin" }
}));

// CORS configurado para produ√ß√£o
const corsOptions = {
    origin: function (origin, callback) {
        // Obter origens permitidas das vari√°veis de ambiente
        let allowedOrigins = [];

        // Se CORS_ORIGINS estiver configurado, usar ele
        if (process.env.CORS_ORIGINS) {
            allowedOrigins = process.env.CORS_ORIGINS.split(',').map(url => url.trim());
        } else {
            // Fallback para dom√≠nios configurados
            if (process.env.DOMAIN) {
                allowedOrigins.push(`https://${process.env.DOMAIN}`);
                allowedOrigins.push(`https://www.${process.env.DOMAIN}`);
            }
            if (process.env.API_DOMAIN && process.env.API_DOMAIN !== process.env.DOMAIN) {
                allowedOrigins.push(`https://${process.env.API_DOMAIN}`);
            }

            // Fallback para valores hardcoded se nenhuma env var estiver configurada
            if (allowedOrigins.length === 0) {
                allowedOrigins = [
                    'https://timepulseai.com.br',
                    'https://www.timepulseai.com.br'
                ];
            }
        }

        // Para desenvolvimento (Replit ou NODE_ENV n√£o √© production), permitir qualquer origem
        if (!origin || process.env.NODE_ENV !== 'production') {
            return callback(null, true);
        }

        // Verificar se a origem est√° na lista permitida
        if (allowedOrigins.indexOf(origin) !== -1) {
            callback(null, true);
        } else {
            console.log(`‚ùå CORS bloqueado para origem: ${origin}`);
            console.log(`   Origens permitidas: ${allowedOrigins.join(', ')}`);
            callback(new Error('N√£o permitido pelo CORS'));
        }
    },
    credentials: true,
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
    allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'X-CSRF-Token']
};

app.use(cors(corsOptions));

// Body parsing middleware
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Cache control middleware para evitar cache de HTML e assets cr√≠ticos
app.use((req, res, next) => {
    // Para arquivos HTML, CSS e JS cr√≠ticos, evitar cache
    if (req.url.endsWith('.html') || req.url.includes('configuracoes') || req.url.includes('secure-config')) {
        res.set({
            'Cache-Control': 'no-store, no-cache, must-revalidate, proxy-revalidate',
            'Pragma': 'no-cache',
            'Expires': '0',
            'Surrogate-Control': 'no-store'
        });
        console.log(`üö´ No-cache headers aplicados para: ${req.url}`);
    }
    next();
});

// =================================================================
// SECURITY MIDDLEWARE FOR EVOLUTION API
// =================================================================

// Rate limiting store (simple in-memory implementation)
const rateLimitStore = new Map();

// Clean old rate limit entries every 5 minutes
setInterval(() => {
    const now = Date.now();
    for (const [key, data] of rateLimitStore.entries()) {
        if (now - data.resetTime > 5 * 60 * 1000) {
            rateLimitStore.delete(key);
        }
    }
}, 5 * 60 * 1000);

// Authentication middleware for Evolution API endpoints
const authenticateEvolutionAPI = (req, res, next) => {
    try {
        console.log('üîê Verificando autentica√ß√£o para Evolution API...');

        // Fun√ß√£o para extrair valor de cookie
        const getCookieValue = (cookies, name) => {
            if (!cookies) return null;
            const value = cookies.split('; ').find(row => row.startsWith(name + '='));
            return value ? decodeURIComponent(value.split('=')[1]) : null;
        };

        const cookies = req.headers.cookie || '';
        console.log('üîç Debug cookies recebidos:', cookies ? 'Sim (' + cookies.length + ' chars)' : 'Nenhum');

        // Primeiro tentar extrair do cookie JSON padr√£o
        let sessionData = null;
        const jsonCookie = getCookieValue(cookies, 'timepulse_instance_token');
        
        console.log('üîç JSON Cookie encontrado:', jsonCookie ? 'Sim' : 'N√£o');

        if (jsonCookie) {
            try {
                sessionData = JSON.parse(jsonCookie);
                console.log('‚úÖ Cookie JSON parseado com sucesso:', {
                    hasInstanceId: !!sessionData.instanceId,
                    hasToken: !!sessionData.token,
                    hasRestaurantId: !!sessionData.restaurantId,
                    hasUserEmail: !!sessionData.userEmail,
                    instanceName: sessionData.instanceName
                });
            } catch (parseError) {
                console.log('‚ö†Ô∏è Erro ao parse do cookie JSON:', parseError.message);
                console.log('‚ö†Ô∏è Conte√∫do do cookie:', jsonCookie ? jsonCookie.substring(0, 100) + '...' : 'vazio');
            }
        }

        // Fallback para cookies individuais
        if (!sessionData) {
            sessionData = {
                token: getCookieValue(cookies, 'timepulse_instance_token'),
                instanceId: getCookieValue(cookies, 'timepulse_instance_id'),
                instanceName: getCookieValue(cookies, 'timepulse_instance_name'),
                restaurantId: getCookieValue(cookies, 'timepulse_restaurant_id'),
                userEmail: getCookieValue(cookies, 'timepulse_user_email'),
                type: getCookieValue(cookies, 'timepulse_instance_type') || 'restaurant'
            };
            
            console.log('üîç Usando cookies individuais:', {
                hasInstanceId: !!sessionData.instanceId,
                hasToken: !!sessionData.token,
                hasRestaurantId: !!sessionData.restaurantId,
                hasUserEmail: !!sessionData.userEmail,
                instanceName: sessionData.instanceName
            });
        }

        // Detectar ambiente de desenvolvimento
        const isDevelopment = req.headers.host && (
            req.headers.host.includes('replit') || 
            req.headers.host.includes('localhost') ||
            req.headers.host.includes('127.0.0.1') ||
            req.headers.host.includes('replit.dev') ||
            req.headers.host.includes('repl.co')
        );

        // Verifica√ß√£o mais rigorosa da autentica√ß√£o (com bypass para desenvolvimento)
        const isAuthenticated = !!(sessionData && sessionData.restaurantId && sessionData.userEmail && sessionData.token);

        if (!isAuthenticated) {
            if (isDevelopment) {
                console.log('üõ†Ô∏è BYPASS AUTH: Ambiente de desenvolvimento detectado, permitindo acesso');
                
                // Criar dados tempor√°rios para desenvolvimento
                sessionData = {
                    instanceId: 'dev-temp-instance',
                    instanceName: 'Restaurante Demo',
                    token: 'dev-temp-token',
                    type: 'restaurant',
                    userEmail: 'demo@timepulse.dev',
                    restaurantId: 'dev-restaurant-1'
                };
                
                req.session = sessionData;
                req.session.authenticated = true;
                
                console.log('‚úÖ Sess√£o tempor√°ria criada para desenvolvimento');
                return next();
            }
            
            console.log('‚ùå Acesso negado: Dados de autentica√ß√£o incompletos');
            console.log('‚ùå Verifica√ß√£o:', {
                hasRestaurantId: !!sessionData?.restaurantId,
                hasUserEmail: !!sessionData?.userEmail,
                hasToken: !!sessionData?.token,
                isDevelopment: isDevelopment
            });
            return res.status(401).json({
                error: "Acesso n√£o autorizado",
                details: "Dados de autentica√ß√£o incompletos ou expirados",
                authenticated: false,
                status: "error"
            });
        }

        // Adicionar dados da sess√£o ao request
        req.session = sessionData;
        req.session.authenticated = true;

        console.log(`‚úÖ Usu√°rio autenticado: ${sessionData.userEmail || sessionData.restaurantId || 'ID n√£o dispon√≠vel'}`);
        next();

    } catch (error) {
        console.error('‚ùå Erro na autentica√ß√£o Evolution API:', error);
        res.status(500).json({
            error: "Erro interno de autentica√ß√£o",
            details: error.message,
            status: "error"
        });
    }
};

// Rate limiting middleware
const rateLimitEvolutionAPI = (maxRequests = 30, windowMs = 60000) => {
    return (req, res, next) => {
        try {
            const identifier = req.session?.userEmail || req.session?.restaurantId || req.ip;
            const now = Date.now();
            const key = `evolution_${identifier}`;

            const current = rateLimitStore.get(key) || { count: 0, resetTime: now + windowMs };

            // Reset counter if window expired
            if (now > current.resetTime) {
                current.count = 0;
                current.resetTime = now + windowMs;
            }

            current.count++;
            rateLimitStore.set(key, current);

            // Set headers
            res.set({
                'X-RateLimit-Limit': maxRequests,
                'X-RateLimit-Remaining': Math.max(0, maxRequests - current.count),
                'X-RateLimit-Reset': new Date(current.resetTime).toISOString()
            });

            if (current.count > maxRequests) {
                console.log(`‚ö†Ô∏è Rate limit excedido para ${identifier}: ${current.count}/${maxRequests}`);
                return res.status(429).json({
                    error: "Muitas requisi√ß√µes",
                    details: `Limite de ${maxRequests} requisi√ß√µes por minuto excedido`,
                    resetTime: new Date(current.resetTime).toISOString(),
                    status: "error"
                });
            }

            console.log(`üìä Rate limit OK para ${identifier}: ${current.count}/${maxRequests}`);
            next();

        } catch (error) {
            console.error('‚ùå Erro no rate limiting:', error);
            next(); // Continue on error to avoid blocking legitimate requests
        }
    };
};

// Input validation functions
// IMPORTANTE: Nome da inst√¢ncia deve ser EXATO como est√° na tabela restaurants
// NUNCA modificar, remover ou sanitizar caracteres (incluindo espa√ßos)
const validateInstanceName = (instanceName) => {
    if (!instanceName) {
        return { isValid: false, error: "Nome da inst√¢ncia √© obrigat√≥rio" };
    }

    // Trim apenas espa√ßos no in√≠cio/fim (whitespace nas bordas)
    const trimmed = instanceName.trim();

    // Debug log
    console.log(`üîç Validando nome EXATO da inst√¢ncia: "${trimmed}" (length: ${trimmed.length})`);

    // Validar apenas o tamanho (3 a 50 caracteres)
    // ACEITAR QUALQUER CARACTERE: espa√ßos, acentos, s√≠mbolos, etc.
    if (trimmed.length < 3 || trimmed.length > 50) {
        return { 
            isValid: false, 
            error: `Nome da inst√¢ncia deve ter entre 3 e 50 caracteres (atual: ${trimmed.length})` 
        };
    }

    console.log(`‚úÖ Nome da inst√¢ncia EXATO v√°lido: "${trimmed}"`);
    // Retornar o nome EXATO sem modifica√ß√µes
    return { isValid: true, sanitized: trimmed };
};

const validateWebhookUrl = (webhookUrl) => {
    if (!webhookUrl) {
        return { isValid: true }; // Webhook URL is optional
    }

    try {
        const url = new URL(webhookUrl);

        // Allowlist of allowed webhook domains
        const allowedDomains = [
            'timepulseai.com.br',
            'www.timepulseai.com.br',
            'n8n.timepulseai.com.br',  // N8N webhook domain
            'localhost',
            '127.0.0.1',
            // Add your production domains here
        ];

        // For development, allow local URLs
        if (process.env.NODE_ENV !== 'production') {
            if (url.hostname === 'localhost' || 
                url.hostname === '127.0.0.1' || 
                url.hostname.endsWith('.replit.dev') ||
                url.hostname.endsWith('.repl.co')) {
                return { isValid: true, sanitized: webhookUrl };
            }
        }

        // Check if domain is in allowlist
        if (!allowedDomains.includes(url.hostname)) {
            return { 
                isValid: false, 
                error: `Dom√≠nio webhook n√£o permitido: ${url.hostname}` 
            };
        }

        // Only allow HTTPS in production
        if (process.env.NODE_ENV === 'production' && url.protocol !== 'https:') {
            return { 
                isValid: false, 
                error: "Webhook deve usar HTTPS em produ√ß√£o" 
            };
        }

        return { isValid: true, sanitized: webhookUrl };

    } catch (error) {
        return { 
            isValid: false, 
            error: "URL de webhook inv√°lida" 
        };
    }
};

// CSRF protection middleware for POST requests
const csrfProtection = (req, res, next) => {
    try {
        // Skip CSRF for GET requests
        if (req.method === 'GET') {
            return next();
        }

        const csrfToken = req.headers['x-csrf-token'] || req.body.csrfToken;

        if (!csrfToken) {
            console.log('‚ùå CSRF: Token n√£o encontrado');
            return res.status(403).json({
                error: "Token CSRF obrigat√≥rio",
                details: "Inclua o token CSRF no header X-CSRF-Token ou no body",
                status: "error"
            });
        }

        // Valida√ß√£o CSRF melhorada
        if (!csrfToken.startsWith('csrf_')) {
            console.log('‚ùå CSRF: Token com formato inv√°lido - deve come√ßar com csrf_');
            return res.status(403).json({
                error: "Token CSRF inv√°lido",
                details: "Formato do token n√£o reconhecido",
                status: "error"
            });
        }

        // Validar que o token cont√©m um identificador v√°lido
        const tokenParts = csrfToken.split('_');
        if (tokenParts.length < 3) {
            console.log('‚ùå CSRF: Token com estrutura inv√°lida');
            return res.status(403).json({
                error: "Token CSRF inv√°lido",
                details: "Estrutura do token incorreta",
                status: "error"
            });
        }

        console.log('‚úÖ CSRF: Token validado com sucesso');

        console.log('‚úÖ CSRF: Token validado');
        next();

    } catch (error) {
        console.error('‚ùå Erro na valida√ß√£o CSRF:', error);
        res.status(500).json({
            error: "Erro interno na valida√ß√£o CSRF",
            details: error.message,
            status: "error"
        });
    }
};


// =================================================================
// END SECURITY MIDDLEWARE
// =================================================================

// Health check endpoint
app.get("/health", (req, res) => {
    res.json({
        status: "OK",
        timestamp: new Date().toISOString()
    });
});

// Endpoint para obter token CSRF
app.get("/api/csrf-token", (req, res) => {
    res.set('Cache-Control', 'no-cache, no-store, must-revalidate');
    res.set('Pragma', 'no-cache');
    res.set('Expires', '0');

    // Gerar token CSRF simples baseado na sess√£o
    const crypto = require('crypto');
    const sessionToken = req.headers.cookie?.split('timepulse_instance_token=')[1]?.split(';')[0];

    if (!sessionToken) {
        return res.status(401).json({
            error: "Sess√£o n√£o encontrada",
            details: "√â necess√°rio estar logado para obter token CSRF"
        });
    }

    // Extrair dados da sess√£o para gerar token compat√≠vel
    let sessionData = null;
    try {
        sessionData = JSON.parse(decodeURIComponent(sessionToken));
    } catch (parseError) {
        console.log('‚ö†Ô∏è Erro ao parse do cookie para CSRF:', parseError.message);
        return res.status(401).json({
            error: "Sess√£o inv√°lida",
            details: "N√£o foi poss√≠vel processar dados da sess√£o"
        });
    }

    // Gerar token baseado na sess√£o compat√≠vel com middleware
    const userIdentifier = sessionData.userEmail || sessionData.restaurantId || 'anonymous';
    const timestamp = Date.now();
    const hash = crypto.createHash('sha256')
        .update(sessionToken + timestamp + 'timepulse-csrf-secret')
        .digest('hex')
        .substring(0, 16);

    // Formato esperado pelo middleware: csrf_{userIdentifier}_{hash}
    const csrfToken = `csrf_${userIdentifier}_${hash}`;

    res.json({
        csrfToken: csrfToken,
        timestamp: timestamp,
        status: "ok"
    });
});

// API Routes - removido, consolidado abaixo

// Suportar ambos os formatos de endpoint (com e sem barra final)
app.get(["/api/config", "/api/config/"], (req, res) => {
    // Definir headers no-cache fortes
    res.set('Cache-Control', 'no-cache, no-store, must-revalidate');
    res.set('Pragma', 'no-cache');
    res.set('Expires', '0');

    try {
        const configData = fs.readFileSync("./api/config/index", "utf8");
        const config = JSON.parse(configData);

        // Adicionar timestamp para for√ßar atualiza√ß√µes
        config.timestamp = new Date().toISOString();
        config.forced_update = true;

        res.json(config);
    } catch (error) {
        console.error("Erro ao carregar configura√ß√£o:", error);
        res.status(500).json({ error: "Configuration not found", details: error.message });
    }
});

app.get(["/api/config/supabase", "/api/config/supabase/"], (req, res) => {
    // Definir headers no-cache fortes
    res.set('Cache-Control', 'no-cache, no-store, must-revalidate');
    res.set('Pragma', 'no-cache');
    res.set('Expires', '0');

    try {
        // ‚ö†Ô∏è CRITICAL SECURITY: Only expose safe, public-facing configuration
        // NEVER expose service_role keys or any admin credentials
        
        let supabaseUrl = process.env.SUPABASE_URL;
        let supabaseAnonKey = process.env.SUPABASE_ANON_KEY;

        // Auto-detect and fix swapped environment variables
        if (supabaseUrl && supabaseUrl.startsWith('eyJ') && supabaseAnonKey && supabaseAnonKey.startsWith('https://')) {
            console.log('üîÑ Auto-detecting swapped SUPABASE_URL and SUPABASE_ANON_KEY - fixing automatically');
            const temp = supabaseUrl;
            supabaseUrl = supabaseAnonKey;
            supabaseAnonKey = temp;
        }

        // Validate URL format for security - allow both supabase.co and supabase.in URLs
        if (supabaseUrl && (!supabaseUrl.startsWith('https://') || (!supabaseUrl.includes('.supabase.co') && !supabaseUrl.includes('.supabase.in')))) {
            console.error("‚ùå SECURITY ERROR: SUPABASE_URL appears to be invalid or contains sensitive data");
            console.error(`   Received URL format: ${supabaseUrl.substring(0, 50)}...`);
            return res.status(500).json({ 
                error: "Configuration security error", 
                details: "Invalid URL format detected - must be https:// and from supabase.co or supabase.in domain",
                configured: false,
                status: "error"
            });
        }

        // Validate anon key format for security (should not be a URL or service_role key)
        if (supabaseAnonKey && supabaseAnonKey.startsWith('http')) {
            console.error("‚ùå SECURITY ERROR: SUPABASE_ANON_KEY appears to contain URL data");
            return res.status(500).json({ 
                error: "Configuration security error", 
                details: "Invalid anon key format detected",
                configured: false,
                status: "error"
            });
        }

        // CRITICAL SECURITY: Verify anon key is not actually a service_role key
        if (supabaseAnonKey) {
            try {
                const [, payload] = supabaseAnonKey.split('.');
                if (payload) {
                    // Convert base64url to base64 for proper decoding
                    let base64Payload = payload.replace(/-/g, '+').replace(/_/g, '/');
                    // Add padding if needed
                    while (base64Payload.length % 4) {
                        base64Payload += '=';
                    }
                    
                    const decoded = JSON.parse(Buffer.from(base64Payload, 'base64').toString());
                    if (decoded.role === 'service_role') {
                        console.error("üö® CRITICAL SECURITY ERROR: SUPABASE_ANON_KEY contains service_role key!");
                        console.error("üö® This would expose unrestricted database access to clients!");
                        console.error("üö® Please configure SUPABASE_ANON_KEY with the anonymous key only!");
                        return res.status(500).json({ 
                            error: "Critical security configuration error", 
                            details: "SUPABASE_ANON_KEY must be set to anonymous key, not service_role key",
                            configured: false,
                            status: "error",
                            security_issue: true
                        });
                    }
                }
            } catch (decodeError) {
                // Fail closed on decode error - treat as potential security risk
                console.error("üö® SECURITY WARNING: Could not decode SUPABASE_ANON_KEY - blocking exposure as precaution:", decodeError.message);
                return res.status(500).json({ 
                    error: "Configuration security error", 
                    details: "Could not validate anon key format - blocking for security",
                    configured: false,
                    status: "error",
                    security_issue: true
                });
            }
        }

        if (!supabaseUrl) {
            console.error("‚ùå ERRO: SUPABASE_URL n√£o configurado ou inv√°lido");
            return res.status(500).json({ 
                error: "Configuration incomplete", 
                details: "SUPABASE_URL not properly configured",
                configured: false,
                status: "error"
            });
        }

        // For now, allow operation without anon key but warn
        if (!supabaseAnonKey) {
            console.warn("‚ö†Ô∏è WARNING: SUPABASE_ANON_KEY not configured - some features may not work");
            return res.status(500).json({ 
                error: "Configuration incomplete", 
                details: "SUPABASE_ANON_KEY not configured",
                configured: false,
                status: "error"
            });
        }

        // Log only the URL (safe to log)
        console.log(`üîß Servindo Supabase config: ${supabaseUrl}`);
        console.log(`üîê Anonymous key configured: ${supabaseAnonKey ? 'YES' : 'NO'}`);

        const config = {
            "status": "ok",
            "configured": true,
            "environment": process.env.NODE_ENV || "production",
            "supabaseUrl": supabaseUrl,
            "supabaseAnonKey": supabaseAnonKey,
            "url": supabaseUrl,
            "anon_key": supabaseAnonKey,
            "project": {
                "ref": "sguirxaunajirfvlzbac",
                "region": "us-east-1"
            },
            "features": {
                "auth": true,
                "database": true,
                "storage": true,
                "realtime": true,
                "rls": true
            },
            "tables": {
                "users": true,
                "profiles": true,
                "sessions": true,
                "restaurants": true,
                "orders": true,
                "deliveries": true,
                "payments": true
            },
            "timestamp": new Date().toISOString(),
            "forced_update": true
        };

        res.json(config);
    } catch (error) {
        console.error("Erro ao carregar configura√ß√£o Supabase:", error);
        res.status(500).json({ error: "Supabase configuration not found", details: error.message });
    }
});

app.get("/api/config/evolution", (req, res) => {
    res.set('Cache-Control', 'no-cache, no-store, must-revalidate');
    res.set('Pragma', 'no-cache');
    res.set('Expires', '0');

    try {
        const serverUrl = process.env.EVOLUTION_API_BASE_URL || process.env.EVOLUTION_API_URL || process.env.EVOLUTION_SERVER_URL;
        const apiKey = process.env.EVOLUTION_API_KEY;

        if (!serverUrl || !apiKey) {
            console.error("‚ùå ERRO: Vari√°veis de ambiente EVOLUTION_API_BASE_URL e EVOLUTION_API_KEY n√£o configuradas");
            return res.status(500).json({ 
                error: "Configuration incomplete", 
                details: "Environment variables not configured",
                configured: false,
                status: "error"
            });
        }

        console.log(`üîß Servindo Evolution config: ${serverUrl}`);

        const config = {
            "status": "ok",
            "configured": true,
            "environment": process.env.NODE_ENV || "production",
            "baseUrl": serverUrl,
            "serverUrl": serverUrl,
            "apiKey": apiKey ? '****' + apiKey.slice(-4) : null,
            // API key mantida segura no servidor - n√£o exposta ao frontend
            "features": {
                "whatsapp": true,
                "webhook": true,
                "instance_management": true,
                "qr_code": true,
                "message_history": true,
                "group_management": true
            },
            "endpoints": {
                "instances": "/instance",
                "messages": "/message",
                "webhooks": "/webhook"
            },
            "timestamp": new Date().toISOString()
        };

        res.json(config);
    } catch (error) {
        console.error("Erro ao carregar configura√ß√£o Evolution:", error);
        res.status(500).json({ error: "Evolution configuration not found", details: error.message });
    }
});

// Endpoint simplificado para criar inst√¢ncia Evolution (sem CSRF para testes)
app.post("/api/evolution/create-instance", async (req, res) => {
    try {
        const serverUrl = process.env.EVOLUTION_API_BASE_URL || process.env.EVOLUTION_API_URL || process.env.EVOLUTION_SERVER_URL;
        const apiKey = process.env.EVOLUTION_API_KEY;

        if (!serverUrl || !apiKey) {
            return res.status(500).json({
                error: "Evolution API n√£o configurada",
                details: "Vari√°veis de ambiente EVOLUTION_API_BASE_URL e EVOLUTION_API_KEY s√£o obrigat√≥rias"
            });
        }

        const instanceConfig = req.body;

        console.log(`üöÄ Criando inst√¢ncia Evolution: ${instanceConfig.instance || instanceConfig.instanceName}`);

        const makeRequest = () => {
            return new Promise((resolve, reject) => {
                const https = require('https');
                const http = require('http');

                const evolutionUrl = new URL(`${serverUrl}/instance/create`);
                const isHttps = evolutionUrl.protocol === 'https:';
                const requestModule = isHttps ? https : http;

                const postData = JSON.stringify(instanceConfig);

                const options = {
                    hostname: evolutionUrl.hostname,
                    port: evolutionUrl.port || (isHttps ? 443 : 80),
                    path: evolutionUrl.pathname,
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Content-Length': Buffer.byteLength(postData),
                        'apikey': apiKey
                    }
                };

                const req = requestModule.request(options, (evolutionResponse) => {
                    let data = '';

                    evolutionResponse.on('data', (chunk) => {
                        data += chunk;
                    });

                    evolutionResponse.on('end', () => {
                        try {
                            const jsonData = JSON.parse(data);
                            resolve({
                                status: evolutionResponse.statusCode,
                                data: jsonData
                            });
                        } catch (parseError) {
                            resolve({
                                status: evolutionResponse.statusCode,
                                data: { error: 'Invalid JSON response', raw: data }
                            });
                        }
                    });
                });

                req.on('error', (error) => {
                    reject(error);
                });

                req.write(postData);
                req.end();
            });
        };

        const result = await makeRequest();

        if (result.status >= 200 && result.status < 300) {
            console.log(`‚úÖ Inst√¢ncia Evolution criada com sucesso: ${instanceConfig.instance || instanceConfig.instanceName}`);
            res.json(result.data);
        } else {
            console.log(`‚ùå Erro ao criar inst√¢ncia Evolution: ${result.status}`);
            console.log(`‚ùå Resposta da Evolution API:`, JSON.stringify(result.data));
            console.log(`‚ùå URL: ${serverUrl}/instance/create`);
            console.log(`‚ùå API Key presente: ${apiKey ? 'SIM' : 'N√ÉO'}`);
            res.status(result.status).json({
                error: result.data.error || 'Erro ao criar inst√¢ncia',
                details: result.data,
                status: result.status,
                message: result.data.message || 'Evolution API retornou erro'
            });
        }

    } catch (error) {
        console.error('‚ùå Erro ao criar inst√¢ncia Evolution:', error);
        res.status(500).json({ 
            error: "Erro interno no servidor",
            details: error.message,
            status: "error"
        });
    }
});

// Endpoint para verificar se inst√¢ncia existe no Evolution
app.get("/api/evolution/check-instance/:instanceName", async (req, res) => {
    try {
        const { instanceName } = req.params;
        const serverUrl = process.env.EVOLUTION_API_BASE_URL || process.env.EVOLUTION_API_URL || process.env.EVOLUTION_SERVER_URL;
        const apiKey = process.env.EVOLUTION_API_KEY;

        if (!serverUrl || !apiKey) {
            return res.status(500).json({
                error: "Evolution API n√£o configurada",
                details: "Vari√°veis de ambiente EVOLUTION_API_BASE_URL e EVOLUTION_API_KEY s√£o obrigat√≥rias",
                exists: false
            });
        }

        if (!instanceName) {
            return res.status(400).json({
                error: "Nome da inst√¢ncia √© obrigat√≥rio",
                exists: false
            });
        }

        console.log(`üîç Verificando se inst√¢ncia "${instanceName}" existe no Evolution...`);
        console.log(`üìç URL Evolution: ${serverUrl}`);
        console.log(`üîë API Key presente: ${apiKey ? 'SIM (****' + apiKey.slice(-4) + ')' : 'N√ÉO'}`);

        const makeRequest = () => {
            return new Promise((resolve, reject) => {
                const https = require('https');
                const http = require('http');

                const evolutionUrl = new URL(`${serverUrl}/instance/fetchInstances?instanceName=${instanceName}`);
                const isHttps = evolutionUrl.protocol === 'https:';
                const requestModule = isHttps ? https : http;

                const options = {
                    hostname: evolutionUrl.hostname,
                    port: evolutionUrl.port || (isHttps ? 443 : 80),
                    path: evolutionUrl.pathname + evolutionUrl.search,
                    method: 'GET',
                    headers: {
                        'apikey': apiKey
                    }
                };
                
                console.log(`üì° Fazendo requisi√ß√£o para: ${evolutionUrl.href}`);
                console.log(`üìã Headers:`, { ...options.headers, apikey: options.headers.apikey ? '****' + options.headers.apikey.slice(-4) : 'none' });

                const req = requestModule.request(options, (evolutionResponse) => {
                    let data = '';

                    evolutionResponse.on('data', (chunk) => {
                        data += chunk;
                    });

                    evolutionResponse.on('end', () => {
                        console.log(`üì• Resposta Evolution API - Status: ${evolutionResponse.statusCode}`);
                        console.log(`üì• Dados recebidos (primeiros 500 chars):`, data.substring(0, 500));
                        
                        try {
                            const jsonData = JSON.parse(data);
                            console.log(`‚úÖ JSON parseado com sucesso. Tipo:`, Array.isArray(jsonData) ? 'Array' : typeof jsonData);
                            if (Array.isArray(jsonData)) {
                                console.log(`üìä N√∫mero de inst√¢ncias retornadas: ${jsonData.length}`);
                            }
                            resolve({
                                status: evolutionResponse.statusCode,
                                data: jsonData
                            });
                        } catch (parseError) {
                            console.log(`‚ùå Erro ao parsear JSON:`, parseError.message);
                            resolve({
                                status: evolutionResponse.statusCode,
                                data: []
                            });
                        }
                    });
                });

                req.on('error', (error) => {
                    reject(error);
                });

                req.end();
            });
        };

        const result = await makeRequest();

        if (result.status >= 200 && result.status < 300) {
            const instances = Array.isArray(result.data) ? result.data : [];
            
            // A Evolution API retorna inst√¢ncias com campo "name" ao inv√©s de "instanceName"
            const instanceExists = instances.some(inst => 
                inst?.name === instanceName || 
                inst?.instance?.instanceName === instanceName || 
                inst?.instanceName === instanceName
            );

            if (instanceExists) {
                const instanceData = instances.find(inst => 
                    inst?.name === instanceName || 
                    inst?.instance?.instanceName === instanceName || 
                    inst?.instanceName === instanceName
                );
                console.log(`‚úÖ Inst√¢ncia "${instanceName}" encontrada no Evolution`);
                console.log(`üìä Dados da inst√¢ncia:`, JSON.stringify(instanceData).substring(0, 200) + '...');
                res.json({
                    exists: true,
                    data: instanceData,
                    message: "Inst√¢ncia encontrada"
                });
            } else {
                console.log(`‚ö†Ô∏è Inst√¢ncia "${instanceName}" n√£o encontrada no Evolution`);
                console.log(`üìã Inst√¢ncias dispon√≠veis:`, instances.map(i => i.name || i.instanceName).join(', '));
                res.json({
                    exists: false,
                    data: null,
                    message: "Inst√¢ncia n√£o encontrada"
                });
            }
        } else {
            console.log(`‚ùå Erro ao buscar inst√¢ncias Evolution: ${result.status}`);
            res.status(result.status).json({
                exists: false,
                error: "Erro ao buscar inst√¢ncias",
                details: result.data
            });
        }

    } catch (error) {
        console.error('‚ùå Erro ao verificar inst√¢ncia Evolution:', error);
        res.status(500).json({ 
            exists: false,
            error: "Erro interno no servidor",
            details: error.message
        });
    }
});

// Endpoint para verificar status de conex√£o da inst√¢ncia
app.get("/api/evolution/connection-state/:instanceName", async (req, res) => {
    try {
        const { instanceName } = req.params;
        const serverUrl = process.env.EVOLUTION_API_BASE_URL || process.env.EVOLUTION_API_URL || process.env.EVOLUTION_SERVER_URL;
        const apiKey = process.env.EVOLUTION_API_KEY;

        if (!serverUrl || !apiKey) {
            return res.status(500).json({
                error: "Evolution API n√£o configurada",
                details: "Vari√°veis de ambiente EVOLUTION_API_BASE_URL e EVOLUTION_API_KEY s√£o obrigat√≥rias"
            });
        }

        if (!instanceName) {
            return res.status(400).json({
                error: "Nome da inst√¢ncia √© obrigat√≥rio"
            });
        }

        console.log(`üîç Verificando estado de conex√£o da inst√¢ncia "${instanceName}"...`);

        const makeRequest = () => {
            return new Promise((resolve, reject) => {
                const https = require('https');
                const http = require('http');

                const evolutionUrl = new URL(`${serverUrl}/instance/connectionState/${instanceName}`);
                const isHttps = evolutionUrl.protocol === 'https:';
                const requestModule = isHttps ? https : http;

                const options = {
                    hostname: evolutionUrl.hostname,
                    port: evolutionUrl.port || (isHttps ? 443 : 80),
                    path: evolutionUrl.pathname,
                    method: 'GET',
                    headers: {
                        'apikey': apiKey
                    }
                };

                console.log(`üì° Requisi√ß√£o para: ${evolutionUrl.href}`);

                const req = requestModule.request(options, (evolutionResponse) => {
                    let data = '';

                    evolutionResponse.on('data', (chunk) => {
                        data += chunk;
                    });

                    evolutionResponse.on('end', () => {
                        console.log(`üì• Status de conex√£o - HTTP: ${evolutionResponse.statusCode}`);
                        
                        try {
                            const jsonData = JSON.parse(data);
                            console.log(`‚úÖ Estado da conex√£o:`, jsonData);
                            resolve({
                                status: evolutionResponse.statusCode,
                                data: jsonData
                            });
                        } catch (parseError) {
                            console.log(`‚ùå Erro ao parsear JSON:`, parseError.message);
                            resolve({
                                status: evolutionResponse.statusCode,
                                data: { state: 'error', error: data }
                            });
                        }
                    });
                });

                req.on('error', (error) => {
                    reject(error);
                });

                req.end();
            });
        };

        const result = await makeRequest();

        if (result.status >= 200 && result.status < 300) {
            // Resposta bem-sucedida
            const state = result.data?.instance?.state || result.data?.state || 'unknown';
            console.log(`‚úÖ Estado da inst√¢ncia "${instanceName}": ${state}`);
            
            res.json({
                success: true,
                instanceName: instanceName,
                state: state, // "open", "close", "connecting"
                connected: state === 'open',
                data: result.data
            });
        } else {
            console.log(`‚ùå Erro ao verificar estado: ${result.status}`);
            res.status(result.status).json({
                success: false,
                error: "Erro ao verificar estado da conex√£o",
                details: result.data
            });
        }

    } catch (error) {
        console.error('‚ùå Erro ao verificar estado de conex√£o:', error);
        res.status(500).json({ 
            success: false,
            error: "Erro interno no servidor",
            details: error.message
        });
    }
});

// Endpoint para atualizar configura√ß√µes (settings) da inst√¢ncia WhatsApp
app.post("/api/evolution/update-settings/:instanceName", async (req, res) => {
    try {
        const { instanceName } = req.params;
        const settings = req.body; // Objeto com configura√ß√µes a atualizar
        
        const serverUrl = process.env.EVOLUTION_API_BASE_URL || process.env.EVOLUTION_API_URL || process.env.EVOLUTION_SERVER_URL;
        const apiKey = process.env.EVOLUTION_API_KEY;

        if (!serverUrl || !apiKey) {
            return res.status(500).json({
                error: "Evolution API n√£o configurada",
                details: "Vari√°veis de ambiente EVOLUTION_API_BASE_URL e EVOLUTION_API_KEY s√£o obrigat√≥rias"
            });
        }

        if (!instanceName) {
            return res.status(400).json({
                error: "Nome da inst√¢ncia √© obrigat√≥rio"
            });
        }

        console.log(`‚öôÔ∏è Atualizando configura√ß√µes da inst√¢ncia "${instanceName}":`, settings);

        const makeRequest = () => {
            return new Promise((resolve, reject) => {
                const https = require('https');
                const http = require('http');

                // Endpoint correto: /settings/set/{instance} (instanceName vai na URL)
                const evolutionUrl = new URL(`${serverUrl}/settings/set/${instanceName}`);
                const isHttps = evolutionUrl.protocol === 'https:';
                const requestModule = isHttps ? https : http;

                // Body JSON apenas com as configura√ß√µes
                const requestBody = JSON.stringify(settings);

                const options = {
                    hostname: evolutionUrl.hostname,
                    port: evolutionUrl.port || (isHttps ? 443 : 80),
                    path: evolutionUrl.pathname,
                    method: 'POST',
                    headers: {
                        'apikey': apiKey,
                        'Content-Type': 'application/json',
                        'Content-Length': Buffer.byteLength(requestBody)
                    }
                };

                console.log(`üì° Enviando configura√ß√µes para: ${evolutionUrl.href}`);

                const req = requestModule.request(options, (evolutionResponse) => {
                    let data = '';

                    evolutionResponse.on('data', (chunk) => {
                        data += chunk;
                    });

                    evolutionResponse.on('end', () => {
                        console.log(`üì• Resposta da atualiza√ß√£o - HTTP: ${evolutionResponse.statusCode}`);
                        console.log(`üì• Resposta completa (raw):`, data);
                        
                        try {
                            const jsonData = JSON.parse(data);
                            console.log(`‚úÖ Configura√ß√µes atualizadas:`, JSON.stringify(jsonData, null, 2));
                            resolve({
                                status: evolutionResponse.statusCode,
                                data: jsonData
                            });
                        } catch (parseError) {
                            console.log(`‚ùå Erro ao parsear JSON:`, parseError.message);
                            resolve({
                                status: evolutionResponse.statusCode,
                                data: { error: data }
                            });
                        }
                    });
                });

                req.on('error', (error) => {
                    reject(error);
                });

                req.write(requestBody);
                req.end();
            });
        };

        const result = await makeRequest();

        if (result.status >= 200 && result.status < 300) {
            console.log(`‚úÖ Configura√ß√µes da inst√¢ncia "${instanceName}" atualizadas com sucesso`);
            res.json({
                success: true,
                message: "Configura√ß√µes atualizadas com sucesso",
                data: result.data
            });
        } else {
            console.log(`‚ùå Erro ao atualizar configura√ß√µes: ${result.status}`);
            res.status(result.status).json({
                success: false,
                error: "Erro ao atualizar configura√ß√µes",
                details: result.data
            });
        }

    } catch (error) {
        console.error('‚ùå Erro ao atualizar configura√ß√µes:', error);
        res.status(500).json({ 
            success: false,
            error: "Erro interno no servidor",
            details: error.message
        });
    }
});

// =================================================================
// MIDDLEWARE DE AUTENTICA√á√ÉO JWT SEGURA
// =================================================================

const authenticateJWT = async (req, res, next) => {
    try {
        const authHeader = req.headers.authorization;
        
        if (!authHeader || !authHeader.startsWith('Bearer ')) {
            return res.status(401).json({ error: 'Token JWT requerido' });
        }
        
        const token = authHeader.substring(7);
        
        // Verificar token usando Supabase auth.getUser()
        const { createClient } = require('@supabase/supabase-js');
        let supabaseUrl = process.env.SUPABASE_URL;
        let supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_ANON_KEY;

        // Auto-detect and fix swapped environment variables
        if (supabaseUrl && supabaseUrl.startsWith('eyJ') && process.env.SUPABASE_ANON_KEY && process.env.SUPABASE_ANON_KEY.startsWith('https://')) {
            console.log('üîÑ JWT verification auto-detecting swapped SUPABASE_URL and SUPABASE_ANON_KEY - fixing automatically');
            const temp = supabaseUrl;
            supabaseUrl = process.env.SUPABASE_ANON_KEY;
            supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY || temp;
        }
        
        if (!supabaseUrl || !supabaseServiceKey) {
            console.error('‚ùå Configura√ß√£o Supabase n√£o encontrada para autentica√ß√£o JWT');
            return res.status(500).json({ error: 'Erro de configura√ß√£o do servidor' });
        }
        
        const supabase = createClient(supabaseUrl, supabaseServiceKey);
        
        const { data: { user }, error } = await supabase.auth.getUser(token);
        
        if (error || !user) {
            console.log('‚ùå Token JWT inv√°lido:', error?.message);
            return res.status(401).json({ error: 'Token inv√°lido ou expirado' });
        }
        
        // Adicionar dados do usu√°rio na requisi√ß√£o
        req.user = user;
        req.session = {
            userId: user.id,
            userEmail: user.email,
            token: token
        };
        
        next();
    } catch (error) {
        console.error('‚ùå Erro na autentica√ß√£o JWT:', error);
        res.status(500).json({ error: 'Erro interno de autentica√ß√£o' });
    }
};

// Proxy seguro para Evolution API - connectionState
app.get("/api/evolution/connectionState/:instanceName", 
    authenticateEvolutionAPI,
    rateLimitEvolutionAPI(30, 60000),
    async (req, res) => {
    res.set('Cache-Control', 'no-cache, no-store, must-revalidate');
    res.set('Pragma', 'no-cache');
    res.set('Expires', '0');

    try {
        const { instanceName } = req.params;

        // Validar instanceName
        const validation = validateInstanceName(instanceName);
        if (!validation.isValid) {
            console.log(`‚ùå Validation error: ${validation.error}`);
            return res.status(400).json({
                error: validation.error,
                status: "error"
            });
        }
        const serverUrl = process.env.EVOLUTION_API_BASE_URL || process.env.EVOLUTION_API_URL || process.env.EVOLUTION_SERVER_URL;
        const apiKey = process.env.EVOLUTION_API_KEY;

        if (!serverUrl || !apiKey) {
            return res.status(500).json({ 
                error: "Evolution API n√£o configurada",
                status: "error"
            });
        }

        if (!instanceName) {
            return res.status(400).json({
                error: "Nome da inst√¢ncia √© obrigat√≥rio",
                status: "error"
            });
        }

        console.log(`üîç Proxy Evolution: Verificando inst√¢ncia "${instanceName}"`);

        // Fazer chamada para Evolution API usando m√≥dulo correto baseado no protocolo
        const https = require('https');
        const http = require('http');
        const { URL } = require('url');

        const evolutionUrl = new URL(`${serverUrl}/instance/connectionState/${instanceName}`);
        const isHttps = evolutionUrl.protocol === 'https:';
        const requestModule = isHttps ? https : http;

        const options = {
            hostname: evolutionUrl.hostname,
            port: evolutionUrl.port || (isHttps ? 443 : 80),
            path: evolutionUrl.pathname,
            method: 'GET',
            headers: {
                'apikey': apiKey,
                'Content-Type': 'application/json'
            }
        };

        const makeRequest = () => {
            return new Promise((resolve, reject) => {
                const req = requestModule.request(options, (evolutionResponse) => {
                    let data = '';

                    evolutionResponse.on('data', (chunk) => {
                        data += chunk;
                    });

                    evolutionResponse.on('end', () => {
                        try {
                            const jsonData = JSON.parse(data);
                            resolve({
                                status: evolutionResponse.statusCode,
                                data: jsonData
                            });
                        } catch (parseError) {
                            resolve({
                                status: evolutionResponse.statusCode,
                                data: { error: 'Invalid JSON response', raw: data }
                            });
                        }
                    });
                });

                req.on('error', (error) => {
                    reject(error);
                });

                req.end();
            });
        };

        const result = await makeRequest();

        if (result.status >= 200 && result.status < 300) {
            console.log(`‚úÖ Evolution: Inst√¢ncia "${instanceName}" - Status: ${result.data.instance?.state || 'unknown'}`);
            res.json(result.data);
        } else {
            console.log(`‚ùå Evolution: Erro ${result.status} para inst√¢ncia "${instanceName}"`);
            res.status(result.status).json(result.data);
        }

    } catch (error) {
        console.error('‚ùå Erro no proxy Evolution connectionState:', error);
        res.status(500).json({ 
            error: "Erro interno no servidor",
            details: error.message,
            status: "error"
        });
    }
});

// Proxy para criar inst√¢ncia Evolution API
app.post("/api/evolution/instance/create", 
    authenticateEvolutionAPI,
    rateLimitEvolutionAPI(10, 60000), // More restrictive for POST operations
    csrfProtection,
    async (req, res) => {
    try {
        const serverUrl = process.env.EVOLUTION_API_BASE_URL || process.env.EVOLUTION_API_URL || process.env.EVOLUTION_SERVER_URL;
        const apiKey = process.env.EVOLUTION_API_KEY;

        if (!serverUrl || !apiKey) {
            return res.status(500).json({
                error: "Evolution API n√£o configurada",
                details: "Vari√°veis de ambiente EVOLUTION_API_BASE_URL e EVOLUTION_API_KEY s√£o obrigat√≥rias"
            });
        }

        const instanceConfig = req.body;

        // Validar instanceName
        if (instanceConfig.instanceName) {
            const validation = validateInstanceName(instanceConfig.instanceName);
            if (!validation.isValid) {
                console.log(`‚ùå Validation error: ${validation.error}`);
                return res.status(400).json({
                    error: validation.error,
                    status: "error"
                });
            }
        }

        // Validar webhook URL se fornecida
        if (instanceConfig.webhook && instanceConfig.webhook.url) {
            const webhookValidation = validateWebhookUrl(instanceConfig.webhook.url);
            if (!webhookValidation.isValid) {
                console.log(`‚ùå Webhook validation error: ${webhookValidation.error}`);
                return res.status(400).json({
                    error: webhookValidation.error,
                    status: "error"
                });
            }
            console.log(`‚úÖ Webhook URL validada: ${instanceConfig.webhook.url}`);
        }

        console.log(`üöÄ Criando inst√¢ncia Evolution (autenticado): ${instanceConfig.instanceName}`);

        const makeRequest = () => {
            return new Promise((resolve, reject) => {
                const https = require('https');
                const http = require('http');

                const evolutionUrl = new URL(`${serverUrl}/instance/create`);
                const isHttps = evolutionUrl.protocol === 'https:';
                const requestModule = isHttps ? https : http;

                const postData = JSON.stringify(instanceConfig);

                const options = {
                    hostname: evolutionUrl.hostname,
                    port: evolutionUrl.port || (isHttps ? 443 : 80),
                    path: evolutionUrl.pathname,
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Content-Length': Buffer.byteLength(postData),
                        'apikey': apiKey
                    }
                };

                const req = requestModule.request(options, (evolutionResponse) => {
                    let data = '';

                    evolutionResponse.on('data', (chunk) => {
                        data += chunk;
                    });

                    evolutionResponse.on('end', () => {
                        try {
                            const jsonData = JSON.parse(data);
                            resolve({
                                status: evolutionResponse.statusCode,
                                data: jsonData
                            });
                        } catch (parseError) {
                            resolve({
                                status: evolutionResponse.statusCode,
                                data: { error: 'Invalid JSON response', raw: data }
                            });
                        }
                    });
                });

                req.on('error', (error) => {
                    reject(error);
                });

                req.write(postData);
                req.end();
            });
        };

        const result = await makeRequest();

        if (result.status >= 200 && result.status < 300) {
            console.log(`‚úÖ Inst√¢ncia Evolution criada: ${instanceConfig.instanceName}`);
            res.json(result.data);
        } else {
            console.log(`‚ùå Erro ao criar inst√¢ncia Evolution: ${result.status}`);
            res.status(result.status).json(result.data);
        }

    } catch (error) {
        console.error('‚ùå Erro no proxy Evolution create instance:', error);
        res.status(500).json({ 
            error: "Erro interno no servidor",
            details: error.message,
            status: "error"
        });
    }
});

// Proxy para buscar inst√¢ncias Evolution API
app.get("/api/evolution/instance/fetchInstances", 
    authenticateEvolutionAPI,
    rateLimitEvolutionAPI(30, 60000),
    async (req, res) => {
    try {
        const serverUrl = process.env.EVOLUTION_API_BASE_URL || process.env.EVOLUTION_API_URL || process.env.EVOLUTION_SERVER_URL;
        const apiKey = process.env.EVOLUTION_API_KEY;

        if (!serverUrl || !apiKey) {
            return res.status(500).json({
                error: "Evolution API n√£o configurada",
                details: "Vari√°veis de ambiente EVOLUTION_API_BASE_URL e EVOLUTION_API_KEY s√£o obrigat√≥rias"
            });
        }

        const instanceName = req.query.instanceName;

        // Validar instanceName se fornecido
        if (instanceName) {
            const validation = validateInstanceName(instanceName);
            if (!validation.isValid) {
                console.log(`‚ùå Validation error: ${validation.error}`);
                return res.status(400).json({
                    error: validation.error,
                    status: "error"
                });
            }
        }
        const queryParam = instanceName ? `?instanceName=${instanceName}` : '';

        console.log(`üîç Buscando inst√¢ncias Evolution${instanceName ? ` para: ${instanceName}` : ''}`);

        const makeRequest = () => {
            return new Promise((resolve, reject) => {
                const https = require('https');
                const http = require('http');

                const evolutionUrl = new URL(`${serverUrl}/instance/fetchInstances${queryParam}`);
                const isHttps = evolutionUrl.protocol === 'https:';
                const requestModule = isHttps ? https : http;

                const options = {
                    hostname: evolutionUrl.hostname,
                    port: evolutionUrl.port || (isHttps ? 443 : 80),
                    path: evolutionUrl.pathname + evolutionUrl.search,
                    method: 'GET',
                    headers: {
                        'apikey': apiKey
                    }
                };

                const req = requestModule.request(options, (evolutionResponse) => {
                    let data = '';

                    evolutionResponse.on('data', (chunk) => {
                        data += chunk;
                    });

                    evolutionResponse.on('end', () => {
                        try {
                            const jsonData = JSON.parse(data);
                            resolve({
                                status: evolutionResponse.statusCode,
                                data: jsonData
                            });
                        } catch (parseError) {
                            resolve({
                                status: evolutionResponse.statusCode,
                                data: { error: 'Invalid JSON response', raw: data }
                            });
                        }
                    });
                });

                req.on('error', (error) => {
                    reject(error);
                });

                req.end();
            });
        };

        const result = await makeRequest();

        if (result.status >= 200 && result.status < 300) {
            console.log(`‚úÖ Inst√¢ncias Evolution encontradas`);
            res.json(result.data);
        } else {
            console.log(`‚ùå Erro ao buscar inst√¢ncias Evolution: ${result.status}`);
            res.status(result.status).json(result.data);
        }

    } catch (error) {
        console.error('‚ùå Erro no proxy Evolution fetchInstances:', error);
        res.status(500).json({ 
            error: "Erro interno no servidor",
            details: error.message,
            status: "error"
        });
    }
});

// Proxy para buscar configura√ß√µes da inst√¢ncia Evolution API
app.get("/api/evolution/settings/find/:instanceName", 
    authenticateEvolutionAPI,
    rateLimitEvolutionAPI(30, 60000),
    async (req, res) => {
        try {
            const { instanceName } = req.params;

            // Validar instanceName
            const validation = validateInstanceName(instanceName);
            if (!validation.isValid) {
                console.log(`‚ùå Validation error: ${validation.error}`);
                return res.status(400).json({
                    error: validation.error,
                    status: "error"
                });
            }

            console.log(`üîç Buscando configura√ß√µes Evolution para inst√¢ncia: ${instanceName}`);

            const evolutionUrl = `${process.env.EVOLUTION_API_BASE_URL || process.env.EVOLUTION_API_URL || process.env.EVOLUTION_SERVER_URL}/settings/find/${instanceName}`;

            // Usar protocolo HTTP/HTTPS nativo do Node.js ao inv√©s de fetch
            const makeRequest = () => {
                return new Promise((resolve, reject) => {
                    const https = require('https');
                    const http = require('http');

                    const urlObj = new URL(evolutionUrl);
                    const isHttps = urlObj.protocol === 'https:';
                    const requestModule = isHttps ? https : http;

                    const options = {
                        hostname: urlObj.hostname,
                        port: urlObj.port || (isHttps ? 443 : 80),
                        path: urlObj.pathname,
                        method: 'GET',
                        headers: {
                            'apikey': process.env.EVOLUTION_API_KEY,
                            'Accept': 'application/json'
                        }
                    };

                    const req = requestModule.request(options, (res) => {
                        let data = '';
                        res.on('data', chunk => data += chunk);
                        res.on('end', () => {
                            try {
                                const parsedData = data ? JSON.parse(data) : {};
                                resolve({
                                    status: res.statusCode,
                                    data: parsedData,
                                    ok: res.statusCode >= 200 && res.statusCode < 300
                                });
                            } catch (parseError) {
                                resolve({
                                    status: res.statusCode,
                                    data: { error: 'Invalid JSON response', raw: data },
                                    ok: false
                                });
                            }
                        });
                    });

                    // Timeout de 30 segundos
                    req.setTimeout(30000, () => {
                        req.destroy();
                        reject(new Error('Request timeout'));
                    });

                    req.on('error', reject);
                    req.end();
                });
            };

            const evolutionResponse = await makeRequest();

            if (!evolutionResponse.ok) {
                console.log(`‚ùå Erro Evolution API (settings/find): ${evolutionResponse.status}`);
                return res.status(evolutionResponse.status).json({
                    error: `Erro na Evolution API: ${evolutionResponse.status}`,
                    status: "error",
                    details: evolutionResponse.data
                });
            }

            const data = evolutionResponse.data;
            console.log(`‚úÖ Configura√ß√µes Evolution encontradas para: ${instanceName}`);

            res.json({
                status: "success",
                settings: data,
                instanceName: instanceName
            });

        } catch (error) {
            console.error('üí• Erro ao buscar configura√ß√µes Evolution:', error);
            res.status(500).json({
                error: 'Erro interno do servidor',
                status: "error",
                message: error.message
            });
        }
    }
);

// Middleware de prote√ß√£o CSRF alternativa para endpoints Evolution
const evolutionCSRFProtection = (req, res, next) => {
    // Verificar header X-Requested-With (prote√ß√£o contra CSRF simples)
    const requestedWith = req.get('X-Requested-With');
    if (!requestedWith || requestedWith !== 'XMLHttpRequest') {
        console.log('‚ùå CSRF: Header X-Requested-With obrigat√≥rio');
        return res.status(403).json({
            error: 'Header X-Requested-With obrigat√≥rio',
            details: 'Inclua o header X-Requested-With: XMLHttpRequest',
            status: 'error'
        });
    }
    next();
};

// Proxy para definir configura√ß√µes da inst√¢ncia Evolution API
app.post("/api/evolution/settings/set/:instanceName", 
    authenticateEvolutionAPI,
    rateLimitEvolutionAPI(15, 60000), // More restrictive for POST operations
    evolutionCSRFProtection,
    async (req, res) => {
        try {
            const { instanceName } = req.params;
            const settings = req.body;

            // Validar instanceName
            const validation = validateInstanceName(instanceName);
            if (!validation.isValid) {
                console.log(`‚ùå Validation error: ${validation.error}`);
                return res.status(400).json({
                    error: validation.error,
                    status: "error"
                });
            }

            console.log(`‚öôÔ∏è Configurando Evolution para inst√¢ncia: ${instanceName}`);
            console.log(`üìã Configura√ß√µes a aplicar:`, settings);

            // Endpoint correto: /settings/set/{instance} (instanceName vai na URL)
            const evolutionUrl = `${process.env.EVOLUTION_API_BASE_URL || process.env.EVOLUTION_API_URL || process.env.EVOLUTION_SERVER_URL}/settings/set/${instanceName}`;

            // Usar protocolo HTTP/HTTPS nativo do Node.js ao inv√©s de fetch
            const makeRequest = () => {
                return new Promise((resolve, reject) => {
                    const https = require('https');
                    const http = require('http');

                    const urlObj = new URL(evolutionUrl);
                    const isHttps = urlObj.protocol === 'https:';
                    const requestModule = isHttps ? https : http;

                    // Body JSON apenas com as configura√ß√µes
                    const postData = JSON.stringify(settings);

                    const options = {
                        hostname: urlObj.hostname,
                        port: urlObj.port || (isHttps ? 443 : 80),
                        path: urlObj.pathname,
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'apikey': process.env.EVOLUTION_API_KEY,
                            'Accept': 'application/json',
                            'Content-Length': Buffer.byteLength(postData)
                        }
                    };

                    const req = requestModule.request(options, (res) => {
                        let data = '';
                        res.on('data', chunk => data += chunk);
                        res.on('end', () => {
                            resolve({
                                status: res.statusCode,
                                data: data ? JSON.parse(data) : {},
                                ok: res.statusCode >= 200 && res.statusCode < 300
                            });
                        });
                    });

                    req.on('error', reject);
                    req.write(postData);
                    req.end();
                });
            };

            const evolutionResponse = await makeRequest();

            if (!evolutionResponse.ok) {
                console.log(`‚ùå Erro Evolution API (settings/set): ${evolutionResponse.status}`);
                return res.status(evolutionResponse.status).json({
                    error: `Erro na Evolution API: ${evolutionResponse.status}`,
                    status: "error",
                    details: evolutionResponse.data
                });
            }

            const data = evolutionResponse.data;
            console.log(`‚úÖ Configura√ß√µes Evolution aplicadas para: ${instanceName}`);

            res.json({
                status: "success",
                result: data,
                instanceName: instanceName,
                appliedSettings: settings
            });

        } catch (error) {
            console.error('üí• Erro ao aplicar configura√ß√µes Evolution:', error);
            res.status(500).json({
                error: 'Erro interno do servidor',
                status: "error",
                message: error.message
            });
        }
    }
);

// Proxy para conectar inst√¢ncia Evolution API (gerar QR code)
app.get("/api/evolution/instance/connect/:instanceName", 
    authenticateEvolutionAPI,
    rateLimitEvolutionAPI(15, 60000), // More restrictive for QR generation
    async (req, res) => {
    try {
        const { instanceName } = req.params;

        // Validar instanceName
        const validation = validateInstanceName(instanceName);
        if (!validation.isValid) {
            console.log(`‚ùå Validation error: ${validation.error}`);
            return res.status(400).json({
                error: validation.error,
                status: "error"
            });
        }

        const serverUrl = process.env.EVOLUTION_API_BASE_URL || process.env.EVOLUTION_API_URL || process.env.EVOLUTION_SERVER_URL;
        const apiKey = process.env.EVOLUTION_API_KEY;

        if (!serverUrl || !apiKey) {
            return res.status(500).json({
                error: "Evolution API n√£o configurada",
                details: "Vari√°veis de ambiente EVOLUTION_API_BASE_URL e EVOLUTION_API_KEY s√£o obrigat√≥rias"
            });
        }

        console.log(`üì± Conectando inst√¢ncia Evolution: ${instanceName}`);

        const makeRequest = () => {
            return new Promise((resolve, reject) => {
                const https = require('https');
                const http = require('http');

                const evolutionUrl = new URL(`${serverUrl}/instance/connect/${instanceName}`);
                const isHttps = evolutionUrl.protocol === 'https:';
                const requestModule = isHttps ? https : http;

                const options = {
                    hostname: evolutionUrl.hostname,
                    port: evolutionUrl.port || (isHttps ? 443 : 80),
                    path: evolutionUrl.pathname,
                    method: 'GET',
                    headers: {
                        'apikey': apiKey
                    }
                };

                const req = requestModule.request(options, (evolutionResponse) => {
                    let data = '';

                    evolutionResponse.on('data', (chunk) => {
                        data += chunk;
                    });

                    evolutionResponse.on('end', () => {
                        try {
                            const jsonData = JSON.parse(data);
                            resolve({
                                status: evolutionResponse.statusCode,
                                data: jsonData
                            });
                        } catch (parseError) {
                            resolve({
                                status: evolutionResponse.statusCode,
                                data: { error: 'Invalid JSON response', raw: data }
                            });
                        }
                    });
                });

                req.on('error', (error) => {
                    reject(error);
                });

                req.end();
            });
        };

        const result = await makeRequest();

        if (result.status >= 200 && result.status < 300) {
            console.log(`‚úÖ QR Code gerado para inst√¢ncia: ${instanceName}`);
            res.json(result.data);
        } else {
            console.log(`‚ùå Erro ao conectar inst√¢ncia Evolution: ${result.status}`);
            res.status(result.status).json(result.data);
        }

    } catch (error) {
        console.error('‚ùå Erro no proxy Evolution connect:', error);
        res.status(500).json({ 
            error: "Erro interno no servidor",
            details: error.message,
            status: "error"
        });
    }
});

app.get("/api/config/supabase", (req, res) => {
    res.set('Cache-Control', 'no-cache, no-store, must-revalidate');
    res.set('Pragma', 'no-cache');
    res.set('Expires', '0');

    try {
        const supabaseUrl = process.env.SUPABASE_URL;
        const supabaseAnonKey = process.env.SUPABASE_ANON_KEY;

        if (!supabaseUrl || !supabaseAnonKey) {
            console.error("‚ùå ERRO: Vari√°veis de ambiente Supabase n√£o configuradas");
            return res.status(500).json({ 
                error: "Configuration incomplete", 
                configured: false
            });
        }

        console.log(`üîß Servindo Supabase config`);

        res.json({
            url: supabaseUrl,
            anonKey: supabaseAnonKey
        });
    } catch (error) {
        console.error("‚ùå Erro ao servir configura√ß√£o Supabase:", error);
        res.status(500).json({ error: "Internal server error" });
    }
});

app.get("/api/config/mapbox", (req, res) => {
    res.set('Cache-Control', 'no-cache, no-store, must-revalidate');
    res.set('Pragma', 'no-cache');
    res.set('Expires', '0');

    try {
        const accessToken = process.env.MAPBOX_TOKEN || process.env.MAPBOX_ACCESS_TOKEN || process.env.MAPBOX_API_KEY;

        if (!accessToken) {
            console.error("‚ùå ERRO: Vari√°vel de ambiente MAPBOX_TOKEN n√£o configurada");
            return res.status(500).json({ 
                error: "Configuration incomplete", 
                details: "Environment variable not configured",
                configured: false,
                status: "error"
            });
        }

        console.log(`üîß Servindo Mapbox config (token configurado)`);

        const config = {
            "status": "ok",
            "configured": true,
            "environment": process.env.NODE_ENV || "production",
            "accessToken": accessToken, // Mapbox public token is safe to expose for client-side use
            "features": {
                "maps": true,
                "geocoding": true,
                "directions": true,
                "places": true,
                "routing": true,
                "navigation": true
            },
            "services": {
                "geocoding": "https://api.mapbox.com/geocoding/v5",
                "directions": "https://api.mapbox.com/directions/v5",
                "static": "https://api.mapbox.com/styles/v1"
            },
            "timestamp": new Date().toISOString()
        };

        res.json(config);
    } catch (error) {
        console.error("Erro ao carregar configura√ß√£o Mapbox:", error);
        res.status(500).json({ error: "Mapbox configuration not found", details: error.message });
    }
});

app.get("/api/config/openai", (req, res) => {
    res.set('Cache-Control', 'no-cache, no-store, must-revalidate');
    res.set('Pragma', 'no-cache');
    res.set('Expires', '0');

    try {
        const apiKey = process.env.OPENAI_API_KEY;

        if (!apiKey) {
            console.error("‚ùå ERRO: Vari√°vel de ambiente OPENAI_API_KEY n√£o configurada");
            return res.status(500).json({ 
                error: "Configuration incomplete", 
                details: "OpenAI API key not configured",
                configured: false,
                status: "error"
            });
        }

        console.log(`üîß Servindo GPT-5-mini config via OpenAI API (API key configurada)`);

        const config = {
            "status": "ok",
            "configured": true,
            "environment": process.env.NODE_ENV || "production",
            "baseUrl": "https://api.openai.com/v1",
            // API key not exposed to client for security
            "provider": "OpenAI API",
            "model": "gpt-5-mini",
            "features": {
                "chat": true,
                "completions": true,
                "embeddings": true,
                "images": false,
                "audio": false,
                "reasoning": true,
                "tools": true,
                "streaming": true
            },
            "models": {
                "chat": "gpt-5-mini",
                "completion": "gpt-5-mini",
                "embedding": "text-embedding-ada-002"
            },
            "parameters": {
                "reasoning_effort": "medium",
                "max_completion_tokens": 4096,
                "stream": false,
                "response_format": {"type": "text"}
            },
            "reasoning_levels": {
                "minimal": "Para instru√ß√µes claras e diretas",
                "low": "Para tarefas simples com racioc√≠nio b√°sico", 
                "medium": "Equil√≠brio entre qualidade e velocidade (padr√£o)",
                "high": "Para an√°lises complexas e racioc√≠nio aprofundado"
            },
            "limits": {
                "requests_per_minute": 60,
                "tokens_per_minute": 40000
            },
            "timestamp": new Date().toISOString()
        };

        res.json(config);
    } catch (error) {
        console.error("Erro ao carregar configura√ß√£o OpenAI:", error);
        res.status(500).json({ error: "OpenAI configuration not found", details: error.message });
    }
});


app.get("/api/config/apis", (req, res) => {
    res.set('Cache-Control', 'no-cache, no-store, must-revalidate');
    res.set('Pragma', 'no-cache');
    res.set('Expires', '0');

    try {
        // Verificar se todas as vari√°veis de ambiente est√£o configuradas
        const mapboxKey = process.env.MAPBOX_TOKEN || process.env.MAPBOX_ACCESS_TOKEN || process.env.MAPBOX_API_KEY;
        const openaiApiKey = process.env.OPENAI_API_KEY;
        const evolutionUrl = process.env.EVOLUTION_API_BASE_URL || process.env.EVOLUTION_API_URL || process.env.EVOLUTION_SERVER_URL;

        console.log(`üîß Servindo APIs config`);

        const config = {
            "status": "ok",
            "mapbox": {
                "enabled": !!mapboxKey,
                // Public key not exposed directly for security
                "version": "v2.15.0",
                "features": {
                    "navigation": true,
                    "geocoding": true,
                    "directions": true
                }
            },
            "openai": {
                "enabled": !!openaiApiKey,
                "baseUrl": "https://api.openai.com/v1",
                "provider": "OpenAI API",
                "model": "gpt-5-mini",
                "version": "5-mini",
                "configured": !!openaiApiKey,
                "features": {
                    "chat": true,
                    "completion": true,
                    "embeddings": true,
                    "reasoning": true,
                    "tools": true,
                    "streaming": true
                }
            },
            "evolution": {
                "enabled": !!evolutionUrl,
                "serverUrl": evolutionUrl || null,
                "version": "1.7.4",
                "configured": !!evolutionUrl,
                "features": {
                    "whatsapp": true,
                    "telegram": false,
                    "instagram": false
                }
            },
            "timestamp": new Date().toISOString()
        };

        res.json(config);
    } catch (error) {
        console.error("Erro ao carregar configura√ß√£o APIs:", error);
        res.status(500).json({ error: "APIs configuration not found", details: error.message });
    }
});

app.get("/api/session", (req, res) => {
    res.set('Cache-Control', 'no-cache, no-store, must-revalidate');
    res.set('Pragma', 'no-cache');
    res.set('Expires', '0');

    try {
        console.log('üîç Verificando sess√£o do usu√°rio...');

        // Fun√ß√£o para extrair valor de cookie
        const getCookieValue = (cookies, name) => {
            if (!cookies) return null;
            const value = cookies.split('; ').find(row => row.startsWith(name + '='));
            return value ? decodeURIComponent(value.split('=')[1]) : null;
        };

        const cookies = req.headers.cookie || '';
        console.log('üç™ Cookies recebidos:', cookies);

        // Primeiro tentar extrair do cookie JSON padr√£o
        let sessionData = null;
        const jsonCookie = getCookieValue(cookies, 'timepulse_instance_token');

        if (jsonCookie) {
            try {
                sessionData = JSON.parse(jsonCookie);
                console.log('‚úÖ Session data extra√≠da do cookie JSON:', sessionData);
            } catch (parseError) {
                console.log('‚ö†Ô∏è Erro ao parse do cookie JSON:', parseError.message);
            }
        }

        // Fallback para cookies individuais
        if (!sessionData) {
            sessionData = {
                token: getCookieValue(cookies, 'timepulse_instance_token'),
                instanceId: getCookieValue(cookies, 'timepulse_instance_id'),
                instanceName: getCookieValue(cookies, 'timepulse_instance_name'),
                restaurantId: getCookieValue(cookies, 'timepulse_restaurant_id'),
                userEmail: getCookieValue(cookies, 'timepulse_user_email'),
                type: getCookieValue(cookies, 'timepulse_instance_type') || 'restaurant'
            };
        }

        // Verificar se h√° pelo menos alguns dados b√°sicos
        const isAuthenticated = !!(sessionData.restaurantId || sessionData.userEmail || sessionData.token);

        const response = {
            authenticated: isAuthenticated,
            restaurantId: sessionData.restaurantId || null,
            userEmail: sessionData.userEmail || null,
            instanceId: sessionData.instanceId || null,
            instanceName: sessionData.instanceName || null,
            type: sessionData.type || 'restaurant',
            timestamp: new Date().toISOString(),
            allCookies: cookies.split(';').map(c => c.trim()).filter(c => c.startsWith('timepulse_'))
        };

        console.log('üìä Dados da sess√£o retornados:', response);
        res.json(response);

    } catch (error) {
        console.error('‚ùå Erro ao verificar sess√£o:', error);
        res.status(500).json({ 
            authenticated: false,
            error: "Session check failed", 
            details: error.message,
            timestamp: new Date().toISOString()
        });
    }
});

app.get("/api/status", async (req, res) => {
    try {
        const startTime = Date.now();
        const timestamp = new Date().toISOString();
        
        // Initialize service statuses
        const services = {
            supabase: "checking",
            evolution: "checking", 
            mapbox: "checking",
            openai: "checking"
        };
        
        // Check Supabase connectivity
        try {
            const supabaseUrl = process.env.SUPABASE_URL;
            const supabaseKey = process.env.SUPABASE_ANON_KEY;
            
            if (supabaseUrl && supabaseKey) {
                const { createClient } = require('@supabase/supabase-js');
                const supabase = createClient(supabaseUrl, supabaseKey);
                
                // Simple connectivity test
                const { data, error } = await supabase.auth.getSession();
                services.supabase = error && error.message.includes('Invalid') ? "connected" : "connected";
            } else {
                services.supabase = "not_configured";
            }
        } catch (error) {
            services.supabase = "error";
            console.error("Supabase status check failed:", error.message);
        }
        
        // Check OpenAI connectivity  
        try {
            const openaiKey = process.env.OPENAI_API_KEY;
            if (openaiKey) {
                const OpenAI = require('openai');
                const openai = new OpenAI({ apiKey: openaiKey });
                
                // Simple model list check with timeout
                const modelsPromise = openai.models.list();
                const timeoutPromise = new Promise((_, reject) => 
                    setTimeout(() => reject(new Error('timeout')), 5000)
                );
                
                await Promise.race([modelsPromise, timeoutPromise]);
                services.openai = "connected";
            } else {
                services.openai = "not_configured";
            }
        } catch (error) {
            services.openai = error.message.includes('timeout') ? "timeout" : "error";
            console.error("OpenAI status check failed:", error.message);
        }
        
        // Check Evolution API connectivity
        try {
            const evolutionUrl = process.env.EVOLUTION_API_BASE_URL || process.env.EVOLUTION_API_URL || process.env.EVOLUTION_SERVER_URL;
            const evolutionKey = process.env.EVOLUTION_API_KEY;
            
            if (evolutionUrl && evolutionKey) {
                const fetch = require('node-fetch');
                const response = await Promise.race([
                    fetch(`${evolutionUrl}/manager/findInstances`, {
                        method: 'GET',
                        headers: { 'apikey': evolutionKey },
                        timeout: 5000
                    }),
                    new Promise((_, reject) => setTimeout(() => reject(new Error('timeout')), 5000))
                ]);
                
                services.evolution = response.ok ? "connected" : "error";
            } else {
                services.evolution = "not_configured";
            }
        } catch (error) {
            services.evolution = error.message.includes('timeout') ? "timeout" : "error";
            console.error("Evolution API status check failed:", error.message);
        }
        
        // Check Mapbox connectivity
        try {
            const mapboxToken = process.env.MAPBOX_ACCESS_TOKEN || process.env.MAPBOX_TOKEN;
            if (mapboxToken) {
                const fetch = require('node-fetch');
                const response = await Promise.race([
                    fetch(`https://api.mapbox.com/tokens/v2?access_token=${mapboxToken}`, {
                        timeout: 5000
                    }),
                    new Promise((_, reject) => setTimeout(() => reject(new Error('timeout')), 5000))
                ]);
                
                services.mapbox = response.ok ? "connected" : "error";
            } else {
                services.mapbox = "not_configured";
            }
        } catch (error) {
            services.mapbox = error.message.includes('timeout') ? "timeout" : "error";
            console.error("Mapbox status check failed:", error.message);
        }
        
        const responseTime = Date.now() - startTime;
        const overallStatus = Object.values(services).every(s => s === "connected") ? "ok" : "partial";
        
        res.json({
            status: overallStatus,
            service: "TimePulse AI API",
            version: "1.0.0",
            environment: process.env.NODE_ENV || 'development',
            uptime: process.uptime(),
            timestamp: timestamp,
            response_time_ms: responseTime,
            services: services,
            database: services.supabase,
            cache: "connected"
        });
        
    } catch (error) {
        console.error("Erro ao verificar status:", error);
        res.status(500).json({ 
            status: "error", 
            error: "Status check failed", 
            details: error.message,
            timestamp: new Date().toISOString()
        });
    }
});

// Auth routes
app.post("/api/auth/login", (req, res) => {
    try {
        const loginData = fs.readFileSync("./api/auth/login", "utf8");
        const loginConfig = JSON.parse(loginData);
        res.json(loginConfig);
    } catch (error) {
        console.error("Erro ao carregar configura√ß√£o login:", error);
        res.status(500).json({ error: "Login configuration not found", details: error.message });
    }
});

app.post("/api/auth/register", (req, res) => {
    try {
        const registerData = fs.readFileSync("./api/auth/register", "utf8");
        const registerConfig = JSON.parse(registerData);
        res.json(registerConfig);
    } catch (error) {
        console.error("Erro ao carregar configura√ß√£o register:", error);
        res.status(500).json({ error: "Register configuration not found", details: error.message });
    }
});

// Endpoint para autentica√ß√£o de revendedor
app.post("/api/auth/revendedor/login", async (req, res) => {
    try {
        const { email, cpfCnpj } = req.body;
        
        if (!email || !cpfCnpj) {
            return res.status(400).json({ 
                success: false,
                error: 'Email e CPF/CNPJ s√£o obrigat√≥rios' 
            });
        }
        
        // Normalizar CPF/CNPJ (remover pontos, tra√ßos, barras)
        const normalizedCpfCnpj = cpfCnpj.replace(/\D/g, '');
        
        // Verificar se supabaseAdmin est√° dispon√≠vel
        if (!supabaseAdmin) {
            console.error('‚ùå supabaseAdmin n√£o inicializado');
            return res.status(500).json({ 
                success: false,
                error: 'Configura√ß√£o do banco de dados indispon√≠vel' 
            });
        }
        
        console.log(`üîç Tentando autenticar revendedor: ${email} / CPF: ${normalizedCpfCnpj}`);
        
        // Buscar revendedor usando supabaseAdmin (bypassa RLS)
        const { data, error } = await supabaseAdmin
            .from('subcontas_asass')
            .select('*')
            .eq('email', email)
            .eq('cpfCnpj', normalizedCpfCnpj)
            .single();
        
        if (error) {
            console.error('‚ùå Erro ao buscar revendedor:', error);
            return res.status(401).json({ 
                success: false,
                error: 'Email ou CPF/CNPJ incorretos',
                details: error.message 
            });
        }
        
        if (!data) {
            console.log('‚ùå Revendedor n√£o encontrado');
            return res.status(401).json({ 
                success: false,
                error: 'Email ou CPF/CNPJ incorretos' 
            });
        }
        
        console.log(`‚úÖ Revendedor autenticado: ${data.name}`);
        
        // Retornar dados do revendedor (sem informa√ß√µes sens√≠veis como apiKey completa)
        res.json({
            success: true,
            data: {
                id: data.id,
                name: data.name,
                email: data.email,
                phone: data.phone,
                cpfCnpj: data.cpfCnpj,
                personType: data.personType,
                walletId: data.walletId,
                status: data.status,
                saldo_atual: data.saldo_atual,
                created_at: data.created_at
            }
        });
        
    } catch (error) {
        console.error('‚ùå Erro no login de revendedor:', error);
        res.status(500).json({ 
            success: false,
            error: 'Erro ao fazer login',
            details: error.message 
        });
    }
});

// Endpoint para listar restaurantes do revendedor
app.get("/api/revendedor/:revendedorId/restaurants", async (req, res) => {
    try {
        const { revendedorId } = req.params;
        
        console.log(`üîç Buscando restaurantes do revendedor ID: ${revendedorId}`);
        
        // Verificar se supabaseAdmin est√° dispon√≠vel
        if (!supabaseAdmin) {
            return res.status(500).json({ 
                success: false,
                error: 'Configura√ß√£o do banco de dados indispon√≠vel' 
            });
        }
        
        // Buscar restaurantes usando supabaseAdmin
        const { data, error } = await supabaseAdmin
            .from('restaurants')
            .select('*')
            .eq('id_revendedor', revendedorId)
            .order('created_at', { ascending: false });
        
        if (error) {
            console.error('‚ùå Erro ao buscar restaurantes:', error);
            return res.status(500).json({ 
                success: false,
                error: 'Erro ao buscar restaurantes',
                details: error.message 
            });
        }
        
        console.log(`‚úÖ Encontrados ${data?.length || 0} restaurantes do revendedor ${revendedorId}`);
        
        res.json({
            success: true,
            restaurants: data || [],
            count: data?.length || 0
        });
        
    } catch (error) {
        console.error('‚ùå Erro ao buscar restaurantes do revendedor:', error);
        res.status(500).json({ 
            success: false,
            error: 'Erro ao buscar restaurantes',
            details: error.message 
        });
    }
});

// =================================================================
// ENDPOINTS SISTEMA DE TESTE GRATUITO E ASSINATURAS
// =================================================================

// Endpoint p√∫blico para verificar status do teste (sem autentica√ß√£o para banner)
app.get('/api/trial-status/:restaurantId', rateLimitEvolutionAPI(10, 60000), async (req, res) => {
    try {
        const { restaurantId } = req.params;
        
        // Em modo desenvolvimento, permitir IDs de teste
        const isDevelopment = NODE_ENV !== 'production';
        const isDevId = restaurantId.startsWith('dev-');
        
        if (isDevelopment && isDevId) {
            // Retornar dados mockados para desenvolvimento
            console.log(`üõ†Ô∏è Modo desenvolvimento: Retornando dados mockados para ${restaurantId}`);
            return res.json({
                status: 'ok',
                trial_enabled: true,
                trial_days_remaining: 15,
                subscription_status: 'trial',
                plan: 'trial',
                whatsapp_disconnected: false,
                is_development: true,
                restaurant_id: restaurantId
            });
        }
        
        // Validar que restaurantId √© um UUID v√°lido para produ√ß√£o
        const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
        if (!uuidRegex.test(restaurantId)) {
            console.log(`‚ùå ID de restaurante inv√°lido: ${restaurantId}`);
            return res.status(400).json({ error: 'ID de restaurante inv√°lido' });
        }
        
        // Configurar cliente Supabase
        const { createClient } = require('@supabase/supabase-js');
        let supabaseUrl = process.env.SUPABASE_URL;
        let supabaseKey = process.env.SUPABASE_ANON_KEY;

        // Auto-detect and fix swapped environment variables
        if (supabaseUrl && supabaseUrl.startsWith('eyJ') && supabaseKey && supabaseKey.startsWith('https://')) {
            console.log('üîÑ Trial status auto-detecting swapped SUPABASE_URL and SUPABASE_ANON_KEY');
            const temp = supabaseUrl;
            supabaseUrl = supabaseKey;
            supabaseKey = temp;
        }

        if (!supabaseUrl || !supabaseKey) {
            return res.status(500).json({ error: 'Configura√ß√£o do Supabase incompleta' });
        }

        const supabaseClient = createClient(supabaseUrl, supabaseKey);
        
        // Buscar dados reais do restaurante
        const { data: restaurant, error: fetchError } = await supabaseClient
            .from('restaurants')
            .select(`
                id,
                name,
                trial_enabled,
                trial_start_date,
                trial_end_date,
                trial_days_remaining,
                subscription_status,
                subscription_start_date,
                subscription_end_date,
                whatsapp_disconnected_due_to_trial,
                plan,
                status
            `)
            .eq('id', restaurantId)
            .single();

        if (fetchError || !restaurant) {
            console.error('‚ùå Erro ao buscar dados do restaurante:', fetchError);
            return res.status(404).json({ error: 'Restaurante n√£o encontrado' });
        }

        // Calcular dados do per√≠odo de teste
        const now = new Date();
        const trialEndDate = restaurant.trial_end_date ? new Date(restaurant.trial_end_date) : null;
        const subscriptionEndDate = restaurant.subscription_end_date ? new Date(restaurant.subscription_end_date) : null;
        
        let subscriptionStatus = restaurant.subscription_status || 'trial';
        let trialDaysRemaining = 0;
        let isExpired = false;

        if (trialEndDate) {
            const timeDiff = trialEndDate.getTime() - now.getTime();
            trialDaysRemaining = Math.max(0, Math.ceil(timeDiff / (1000 * 60 * 60 * 24)));
            
            if (timeDiff <= 0 && subscriptionStatus === 'trial') {
                subscriptionStatus = 'expired';
                isExpired = true;
            }
        }

        // Verificar se assinatura ativa existe e est√° v√°lida
        if (subscriptionEndDate && subscriptionEndDate > now) {
            subscriptionStatus = 'active';
            isExpired = false;
        }

        // Retornar apenas campos necess√°rios para o banner (reduzir exposi√ß√£o de dados)
        const trialData = {
            trial_end_date: restaurant.trial_end_date,
            trial_days_remaining: trialDaysRemaining,
            subscription_status: subscriptionStatus,
            subscription_start_date: restaurant.subscription_start_date,
            subscription_end_date: restaurant.subscription_end_date,
            whatsapp_disconnected_due_to_trial: restaurant.whatsapp_disconnected_due_to_trial ?? false,
            plan: restaurant.plan || 'basic',
            is_expired: isExpired
        };
        
        console.log(`üìä Status do teste para restaurante ${restaurantId}: ${subscriptionStatus}, ${trialDaysRemaining} dias restantes`);
        res.json(trialData);
        
    } catch (error) {
        console.error('‚ùå Erro ao verificar status do teste:', error);
        res.status(500).json({ error: 'Erro ao verificar status do teste' });
    }
});

// Endpoint para buscar hist√≥rico de cobran√ßas
app.get('/api/billing-history/:restaurantId', rateLimitEvolutionAPI(10, 60000), async (req, res) => {
    try {
        const { restaurantId } = req.params;
        
        // Validar que restaurantId √© um UUID v√°lido
        const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
        if (!uuidRegex.test(restaurantId)) {
            console.log(`‚ùå ID de restaurante inv√°lido: ${restaurantId}`);
            return res.status(400).json({ error: 'ID de restaurante inv√°lido' });
        }
        
        // Configurar cliente Supabase com SERVICE_ROLE_KEY para bypassar RLS
        const { createClient } = require('@supabase/supabase-js');
        let supabaseUrl = process.env.SUPABASE_URL;
        let supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_ANON_KEY;

        if (supabaseUrl && supabaseUrl.startsWith('eyJ') && supabaseKey && supabaseKey.startsWith('https://')) {
            const temp = supabaseUrl;
            supabaseUrl = supabaseKey;
            supabaseKey = temp;
        }

        if (!supabaseUrl || !supabaseKey) {
            return res.status(500).json({ error: 'Configura√ß√£o do Supabase incompleta' });
        }

        const supabaseClient = createClient(supabaseUrl, supabaseKey);
        
        console.log('üîç [DEBUG BILLING] Configura√ß√£o:', { supabaseUrl, hasKey: !!supabaseKey });
        console.log('üîç [DEBUG BILLING] Buscando para restaurantId:', restaurantId);
        
        // Primeiro: buscar TODOS os registros para debug
        const { data: allData, error: allError } = await supabaseClient
            .from('sessao_assinaturas')
            .select('*');
        
        if (allError) {
            console.error('‚ùå [DEBUG BILLING] Erro ao buscar TODOS os registros:', allError);
        }
        
        console.log('üîç [DEBUG BILLING] Total de registros na tabela:', allData?.length || 0);
        if (allData && allData.length > 0) {
            console.log('üîç [DEBUG BILLING] Primeiros registros:', JSON.stringify(allData.slice(0, 3), null, 2));
        } else if (!allError) {
            console.warn('‚ö†Ô∏è [DEBUG BILLING] Tabela vazia ou sem permiss√£o de leitura (RLS ativo)');
        }
        
        // Buscar hist√≥rico de cobran√ßas com filtro
        const { data: sessions, error } = await supabaseClient
            .from('sessao_assinaturas')
            .select('*')
            .eq('id_restaurante', restaurantId)
            .order('data_pagamento', { ascending: false });

        console.log('üîç [DEBUG BILLING] Registros filtrados para', restaurantId, ':', sessions?.length || 0);
        
        if (error) {
            console.error('‚ùå Erro ao buscar hist√≥rico de cobran√ßas:', error);
            return res.status(500).json({ 
                error: 'Erro ao buscar hist√≥rico', 
                details: error.message,
                code: error.code 
            });
        }

        console.log(`üìä Hist√≥rico de cobran√ßas para ${restaurantId}: ${sessions?.length || 0} registros encontrados`);
        res.json({ 
            success: true, 
            data: sessions || [],
            count: sessions?.length || 0 
        });
        
    } catch (error) {
        console.error('‚ùå Erro ao buscar hist√≥rico de cobran√ßas:', error);
        res.status(500).json({ error: 'Erro ao buscar hist√≥rico de cobran√ßas', details: error.message });
    }
});

// Endpoint para buscar dados de um restaurante espec√≠fico
app.get('/api/restaurants/:restaurantId', rateLimitEvolutionAPI(10, 60000), async (req, res) => {
    try {
        const { restaurantId } = req.params;
        
        // Validar que restaurantId √© um UUID v√°lido
        const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
        if (!uuidRegex.test(restaurantId)) {
            console.log(`‚ùå ID de restaurante inv√°lido: ${restaurantId}`);
            return res.status(400).json({ error: 'ID de restaurante inv√°lido' });
        }
        
        // Configurar cliente Supabase
        const { createClient } = require('@supabase/supabase-js');
        let supabaseUrl = process.env.SUPABASE_URL;
        let supabaseKey = process.env.SUPABASE_ANON_KEY;

        // Auto-detect and fix swapped environment variables
        if (supabaseUrl && supabaseUrl.startsWith('eyJ') && supabaseKey && supabaseKey.startsWith('https://')) {
            console.log('üîÑ Restaurant endpoint auto-detecting swapped SUPABASE_URL and SUPABASE_ANON_KEY');
            const temp = supabaseUrl;
            supabaseUrl = supabaseKey;
            supabaseKey = temp;
        }

        if (!supabaseUrl || !supabaseKey) {
            return res.status(500).json({ error: 'Configura√ß√£o do Supabase incompleta' });
        }

        const supabaseClient = createClient(supabaseUrl, supabaseKey);
        
        // Buscar dados do restaurante
        const { data: restaurant, error: fetchError } = await supabaseClient
            .from('restaurants')
            .select(`
                id,
                name,
                owner_email,
                owner_cpf,
                owner_phone,
                trial_enabled,
                trial_start_date,
                trial_end_date,
                subscription_status,
                plan,
                status
            `)
            .eq('id', restaurantId)
            .single();

        if (fetchError || !restaurant) {
            console.error('‚ùå Erro ao buscar dados do restaurante:', fetchError);
            return res.status(404).json({ error: 'Restaurante n√£o encontrado' });
        }

        console.log(`üìä Dados do restaurante ${restaurantId} retornados com sucesso`);
        res.json(restaurant);
        
    } catch (error) {
        console.error('‚ùå Erro ao buscar dados do restaurante:', error);
        res.status(500).json({ error: 'Erro ao buscar dados do restaurante' });
    }
});

// Endpoint: Buscar tipos de neg√≥cio ativos
app.get('/api/business-types', async (req, res) => {
    try {
        const { createClient } = require('@supabase/supabase-js');
        let supabaseUrl = process.env.SUPABASE_URL;
        let supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_ANON_KEY;

        // Auto-detect and fix swapped environment variables
        if (supabaseUrl && supabaseUrl.startsWith('eyJ') && process.env.SUPABASE_ANON_KEY && process.env.SUPABASE_ANON_KEY.startsWith('https://')) {
            const temp = supabaseUrl;
            supabaseUrl = process.env.SUPABASE_ANON_KEY;
            supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || temp;
        }

        if (!supabaseUrl || !supabaseKey) {
            return res.status(500).json({ error: 'Configura√ß√£o do banco de dados n√£o encontrada' });
        }

        const supabase = createClient(supabaseUrl, supabaseKey);

        // Buscar tipos de neg√≥cio ativos ordenados por nome
        const { data: businessTypes, error } = await supabase
            .from('business_types')
            .select('id, name, description, is_food_business')
            .eq('active', true)
            .order('name', { ascending: true });

        if (error) {
            console.error('‚ùå Erro ao buscar tipos de neg√≥cio:', error);
            return res.status(500).json({ error: 'Erro ao buscar tipos de neg√≥cio' });
        }

        res.json({ businessTypes: businessTypes || [] });
    } catch (error) {
        console.error('‚ùå Erro interno ao buscar tipos de neg√≥cio:', error);
        res.status(500).json({ error: 'Erro interno do servidor' });
    }
});

// Endpoint para desconectar WhatsApp quando teste expira
app.post('/api/disconnect-whatsapp-trial', authenticateJWT, async (req, res) => {
    try {
        const { restaurantId, reason } = req.body;
        
        console.log(`üîå Desconectando WhatsApp para restaurante ${restaurantId} - Motivo: ${reason}`);
        
        // Buscar configura√ß√µes do Evolution API das vari√°veis de ambiente
        const evolutionApiUrl = process.env.EVOLUTION_API_BASE_URL || process.env.EVOLUTION_API_URL || process.env.EVOLUTION_SERVER_URL;
        const evolutionApiKey = process.env.EVOLUTION_API_KEY;
        
        if (evolutionApiUrl && evolutionApiKey) {
            try {
                const logoutResponse = await fetch(`${evolutionApiUrl}/instance/logout/${restaurantId}`, {
                    method: 'POST',
                    headers: {
                        'apikey': evolutionApiKey,
                        'Content-Type': 'application/json'
                    }
                });
                
                if (logoutResponse.ok) {
                    console.log(`‚úÖ WhatsApp desconectado com sucesso para restaurante ${restaurantId}`);
                    
                    // TODO: Atualizar no banco que foi desconectado
                    // await supabase.from('restaurants').update({ 
                    //     whatsapp_disconnected_due_to_trial: true 
                    // }).eq('id', restaurantId);
                    
                    res.json({ success: true, message: 'WhatsApp desconectado com sucesso' });
                } else {
                    throw new Error('Falha ao desconectar WhatsApp');
                }
            } catch (apiError) {
                console.error('‚ùå Erro na API Evolution:', apiError);
                res.status(500).json({ error: 'Erro ao comunicar com Evolution API' });
            }
        } else {
            console.log('‚ö†Ô∏è Configura√ß√µes da Evolution API n√£o encontradas');
            res.status(400).json({ error: 'Configura√ß√µes da Evolution API n√£o encontradas' });
        }
    } catch (error) {
        console.error('‚ùå Erro ao desconectar WhatsApp:', error);
        res.status(500).json({ error: 'Erro interno do servidor' });
    }
});

// =================================================================
// API Routes - Delivery Driver Mobile App
// =================================================================

// Mount driver API routes
try {
    const driverRoutes = require('./api/driver/routes');
    app.use('/api/driver', driverRoutes);
    console.log('üöó Driver Mobile App API routes mounted at /api/driver/*');
    
    // Try to mount setup routes separately (also requires JWT_SECRET)
    try {
        const driverSetupRoutes = require('./api/driver/setup-password');
        app.use('/api/driver/auth', driverSetupRoutes);
        console.log('üîß Driver password setup endpoint mounted (admin-only)');
    } catch (setupError) {
        console.error('‚ö†Ô∏è Failed to mount driver setup routes:', setupError.message);
        console.error('   Password setup for existing drivers will not be available until JWT_SECRET is configured.');
    }
} catch (error) {
    console.error('‚ö†Ô∏è Failed to mount driver routes (missing JWT_SECRET or SUPABASE_SERVICE_ROLE_KEY?):', error.message);
    console.error('   Driver authentication will not be available until configuration is fixed.');
}

// =================================================================
// Configuration Endpoints
// =================================================================

// Mapbox token endpoint (requires authentication)
app.get('/api/config/mapbox-token', (req, res) => {
    const authHeader = req.headers.authorization;
    
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
        return res.status(401).json({ error: 'Autentica√ß√£o requerida' });
    }
    
    if (!process.env.MAPBOX_TOKEN) {
        return res.status(500).json({ error: 'Mapbox token n√£o configurado' });
    }
    
    res.json({ token: process.env.MAPBOX_TOKEN });
});

// =================================================================
// Static Files & Express Configuration
// =================================================================

// Static files (somente diret√≥rio p√∫blico por seguran√ßa) - com cache busting
app.use(express.static("public", {
    setHeaders: (res, path, stat) => {
        // Evitar cache em arquivos HTML e JS de configura√ß√£o para garantir atualiza√ß√µes
        if (path.endsWith('.html') || 
            path.includes('js/config.js') || 
            path.includes('js/secure-config.js') || 
            path.includes('js/secure-config-simple.js')) {
            res.set('Cache-Control', 'no-cache, no-store, must-revalidate');
            res.set('Pragma', 'no-cache');
            res.set('Expires', '0');
        }
    }
}));

// Serve PWA files (config, service workers, etc)
app.use("/pwa", express.static("pwa", {
    setHeaders: (res, path, stat) => {
        if (path.endsWith('.js')) {
            res.set('Content-Type', 'application/javascript');
        }
    }
}));

// Serve assets files (driver-app.js, etc)
app.use("/assets", express.static("assets", {
    setHeaders: (res, path, stat) => {
        if (path.endsWith('.js')) {
            res.set('Content-Type', 'application/javascript');
        }
    }
}));

// Default route
app.get("/", (req, res) => {
    res.sendFile(path.join(__dirname, "public", "index.html"));
});


// =================================================================
// ADVANCED SECURITY MIDDLEWARE
// =================================================================

// Initialize Supabase Admin Client for JWT verification
let supabaseAdmin = null;
if (process.env.SUPABASE_URL && process.env.SUPABASE_SERVICE_ROLE_KEY) {
    supabaseAdmin = createClient(
        process.env.SUPABASE_URL, 
        process.env.SUPABASE_SERVICE_ROLE_KEY
    );
    console.log('‚úÖ Supabase Admin Client initialized for JWT verification');
} else {
    console.warn('‚ö†Ô∏è SUPABASE_SERVICE_ROLE_KEY not found. JWT admin verification will be limited.');
}

// JWT Supabase Authentication Middleware for Admin Endpoints
const authenticateAdmin = async (req, res, next) => {
    try {
        const authHeader = req.headers.authorization;
        
        if (!authHeader || !authHeader.startsWith('Bearer ')) {
            console.log('‚ùå Admin auth: No Bearer token provided');
            return res.status(401).json({ 
                error: 'Token de autoriza√ß√£o requerido',
                details: 'Forne√ßa um token Bearer v√°lido'
            });
        }
        
        const token = authHeader.substring(7);
        
        // Fallback to old token for development/testing
        if (token === 'admin-timepulse-2025' && process.env.NODE_ENV !== 'production') {
            console.log('‚ö†Ô∏è Using fallback admin token (development only)');
            req.user = { role: 'admin', email: 'admin@timepulse.ai' };
            return next();
        }
        
        // Verificar token JWT admin personalizado 
        try {
            const decoded = jwt.verify(token, process.env.JWT_SECRET || 'timepulse_admin_secret_2025');
            
            if (decoded.role === 'admin') {
                req.user = {
                    admin_id: decoded.admin_id,
                    email: decoded.email,
                    role: 'admin'
                };
                return next();
            } else {
                console.log('‚ùå Admin auth: User does not have admin role');
                return res.status(403).json({ 
                    error: 'Permiss√µes insuficientes',
                    details: 'Apenas administradores podem acessar este recurso'
                });
            }
        } catch (jwtError) {
            console.log('‚ùå Admin auth: Invalid JWT token:', jwtError.message);
            return res.status(401).json({ 
                error: 'Token JWT inv√°lido',
                details: 'Token expirado ou inv√°lido'
            });
        }
        
    } catch (error) {
        console.error('‚ùå Error in admin authentication:', error);
        res.status(500).json({ 
            error: 'Erro interno de autentica√ß√£o',
            details: 'Falha na verifica√ß√£o do token'
        });
    }
};

// Endpoint para atualizar dados completos do restaurante via admin
app.put('/api/admin/restaurant/:restaurantId', authenticateAdmin, async (req, res) => {
    try {
        const { restaurantId } = req.params;
        const {
            name,
            owner_email,
            owner_phone,
            address,
            plan,
            status,
            subscription_status,
            trial_end_date,
            subscription_end_date,
            trial_extension_reason,
            manual_activation_reason,
            status_change_reason
        } = req.body;

        console.log(`üìù Atualizando restaurante ${restaurantId} com dados:`, {
            name,
            owner_email,
            owner_phone,
            address,
            plan,
            status,
            subscription_status,
            trial_end_date,
            subscription_end_date
        });

        // Configurar cliente Supabase
        const { createClient } = require('@supabase/supabase-js');
        let supabaseUrl = process.env.SUPABASE_URL;
        let supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_ANON_KEY;

        // Auto-detect and fix swapped environment variables
        if (supabaseUrl && supabaseUrl.startsWith('eyJ') && process.env.SUPABASE_ANON_KEY && process.env.SUPABASE_ANON_KEY.startsWith('https://')) {
            const temp = supabaseUrl;
            supabaseUrl = process.env.SUPABASE_ANON_KEY;
            supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || temp;
        }

        const supabaseClient = createClient(supabaseUrl, supabaseKey);

        // Preparar dados para atualiza√ß√£o
        const updateData = {
            updated_at: new Date().toISOString()
        };

        // Atualizar apenas campos fornecidos
        if (name) updateData.name = name;
        if (owner_email) updateData.owner_email = owner_email;
        if (owner_phone) updateData.owner_phone = owner_phone;
        if (address) updateData.address = address;
        if (plan) updateData.plan = plan;
        if (status) updateData.status = status;
        if (subscription_status) updateData.subscription_status = subscription_status;
        if (trial_extension_reason) updateData.trial_extension_reason = trial_extension_reason;
        if (manual_activation_reason) updateData.manual_activation_reason = manual_activation_reason;
        if (status_change_reason) updateData.status_change_reason = status_change_reason;

        // Processar datas especiais
        if (trial_end_date) {
            updateData.trial_end_date = new Date(trial_end_date).toISOString();
        }
        
        if (subscription_end_date) {
            updateData.subscription_end_date = new Date(subscription_end_date).toISOString();
            updateData.subscription_start_date = new Date().toISOString();
            // S√≥ definir subscription_status='active' se n√£o foi explicitamente fornecido
            if (!subscription_status) {
                updateData.subscription_status = 'active';
            }
        }

        // Atualizar no banco de dados
        const { data: updatedRestaurant, error: updateError } = await supabaseClient
            .from('restaurants')
            .update(updateData)
            .eq('id', restaurantId)
            .select('*')
            .single();

        if (updateError) {
            console.error('‚ùå Erro ao atualizar restaurante:', updateError);
            return res.status(500).json({ error: 'Erro ao atualizar dados do restaurante' });
        }

        // Log da a√ß√£o administrativa
        await supabaseClient
            .from('activity_logs')
            .insert({
                restaurant_id: restaurantId,
                user_name: req.user.email,
                action: 'admin_update_restaurant',
                entity_type: 'restaurant',
                entity_id: restaurantId,
                description: `Restaurante atualizado via admin. Campos alterados: ${Object.keys(updateData).join(', ')}`
            });

        console.log(`‚úÖ Admin ${req.user.email} atualizou restaurante ${restaurantId}`);
        
        res.json({
            success: true,
            restaurant: updatedRestaurant,
            message: 'Dados do restaurante atualizados com sucesso'
        });

    } catch (error) {
        console.error('‚ùå Erro ao atualizar restaurante:', error);
        res.status(500).json({ error: 'Erro interno do servidor' });
    }
});

// Alias do endpoint com plural para compatibilidade
app.put('/api/admin/restaurants/:restaurantId', authenticateAdmin, async (req, res) => {
    // Redirecionar internamente para o endpoint singular
    req.url = `/api/admin/restaurant/${req.params.restaurantId}`;
    return app._router.handle(req, res, () => {});
});

// JWT Supabase Authentication Middleware for Regular Users (duplicado - removido)

// Alias for better semantic meaning
const authenticateUser = authenticateJWT;

// Combined security middleware for Evolution API
const secureEvolutionAPI = [
    authenticateJWT,
    rateLimitEvolutionAPI(30, 60000), // 30 requests per minute
    csrfProtection
];

// Subscription Status Verification Middleware
const requireActiveSubscription = async (req, res, next) => {
    try {
        // Get user info from previous authentication middleware
        const userId = req.session?.restaurantId || req.user?.id;
        const userEmail = req.session?.userEmail || req.user?.email;
        
        if (!userId && !userEmail) {
            return res.status(401).json({ 
                error: 'Usu√°rio n√£o identificado',
                details: 'Fa√ßa login primeiro'
            });
        }
        
        // TODO: Implement real subscription check with PostgreSQL
        // For now, simulate subscription check
        const hasActiveSubscription = await checkUserSubscription(userId || userEmail);
        
        if (!hasActiveSubscription.active) {
            return res.status(402).json({ 
                error: 'Assinatura necess√°ria',
                details: 'Este recurso requer uma assinatura ativa',
                subscription_status: hasActiveSubscription.status,
                trial_expired: hasActiveSubscription.trial_expired
            });
        }
        
        req.subscription = hasActiveSubscription;
        next();
        
    } catch (error) {
        console.error('‚ùå Error checking subscription:', error);
        res.status(500).json({ 
            error: 'Erro ao verificar assinatura',
            details: error.message
        });
    }
};

// Mock function for subscription check (replace with real database query)
async function checkUserSubscription(userId) {
    try {
        // TODO: Replace with real PostgreSQL query
        // SELECT subscription_status, trial_end_date, subscription_end_date 
        // FROM restaurants WHERE id = $1 OR owner_email = $1
        
        // For now, return mock data
        const mockSubscription = {
            active: true,
            status: 'trial', // 'trial', 'active', 'expired', 'cancelled'
            trial_expired: false,
            subscription_end_date: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 days from now
            plan: 'basic'
        };
        
        return mockSubscription;
    } catch (error) {
        console.error('Error checking subscription:', error);
        return { active: false, status: 'unknown', trial_expired: true };
    }
}

// Asaas Webhook Signature Validation
const validateAsaasWebhook = (req, res, next) => {
    try {
        const signature = req.headers['asaas-access-token'] || req.headers['x-asaas-signature'];
        const body = req.body;
        
        if (!signature) {
            console.log('‚ùå Asaas webhook: No signature header found');
            return res.status(401).json({ 
                error: 'Webhook n√£o autorizado',
                details: 'Assinatura de webhook ausente'
            });
        }
        
        const webhookSecret = process.env.ASAAS_WEBHOOK_SECRET;
        if (!webhookSecret) {
            console.log('‚ùå Asaas webhook: ASAAS_WEBHOOK_SECRET not configured');
            return res.status(500).json({ 
                error: 'Configura√ß√£o incompleta',
                details: 'Secret do webhook n√£o configurado'
            });
        }
        
        // Create signature verification
        const payload = JSON.stringify(body);
        const expectedSignature = crypto
            .createHmac('sha256', webhookSecret)
            .update(payload)
            .digest('hex');
        
        const isValid = crypto.timingSafeEqual(
            Buffer.from(signature, 'hex'),
            Buffer.from(expectedSignature, 'hex')
        );
        
        if (!isValid) {
            console.log('‚ùå Asaas webhook: Invalid signature');
            return res.status(401).json({ 
                error: 'Webhook n√£o autorizado',
                details: 'Assinatura inv√°lida'
            });
        }
        
        console.log('‚úÖ Asaas webhook signature verified');
        next();
        
    } catch (error) {
        console.error('‚ùå Error validating Asaas webhook:', error);
        res.status(500).json({ 
            error: 'Erro na valida√ß√£o do webhook',
            details: error.message
        });
    }
};

// =================================================================
// ENDPOINTS ADMINISTRATIVOS
// =================================================================

// Estat√≠sticas gerais do sistema
app.get('/api/admin/stats', authenticateAdmin, async (req, res) => {
    try {
        console.log('üìä Carregando estat√≠sticas administrativas...');

        // Criar cliente Supabase para consultas administrativas
        let supabaseUrl = process.env.SUPABASE_URL;
        let supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_ANON_KEY;

        // Auto-detect and fix swapped environment variables
        if (supabaseUrl && supabaseUrl.startsWith('eyJ') && process.env.SUPABASE_ANON_KEY && process.env.SUPABASE_ANON_KEY.startsWith('https://')) {
            console.log('üîÑ Admin endpoint auto-detecting swapped SUPABASE_URL and SUPABASE_ANON_KEY - fixing automatically');
            const temp = supabaseUrl;
            supabaseUrl = process.env.SUPABASE_ANON_KEY;
            supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || temp;
        }
        
        if (!supabaseUrl || !supabaseKey) {
            return res.status(500).json({ error: 'Configura√ß√£o do Supabase incompleta' });
        }
        
        const supabaseClient = createClient(supabaseUrl, supabaseKey);
        
        // Consultas reais ao PostgreSQL via Supabase
        const [restaurantsResult, ordersResult, subscriptionsResult] = await Promise.all([
            supabaseClient.from('restaurants').select('*'),
            supabaseClient.from('orders').select('*'),
            supabaseClient.from('subscriptions').select('*')
        ]);
        
        const restaurants = restaurantsResult.data || [];
        const orders = ordersResult.data || [];
        const subscriptions = subscriptionsResult.data || [];
        
        // Calcular estat√≠sticas reais
        const totalRestaurants = restaurants.length;
        const activeTrials = restaurants.filter(r => r.subscription_status === 'trial').length;
        const activeSubscriptions = restaurants.filter(r => r.subscription_status === 'active').length;
        
        // Calcular receita do m√™s atual
        const currentMonth = new Date().getMonth();
        const currentYear = new Date().getFullYear();
        const monthlyOrders = orders.filter(order => {
            const orderDate = new Date(order.created_at);
            return orderDate.getMonth() === currentMonth && orderDate.getFullYear() === currentYear;
        });
        
        const monthlyRevenue = monthlyOrders.reduce((sum, order) => sum + (parseFloat(order.total_amount) || 0), 0);
        const averageOrderValue = monthlyOrders.length > 0 ? monthlyRevenue / monthlyOrders.length : 0;
        
        // Novos restaurantes este m√™s
        const newRestaurantsThisMonth = restaurants.filter(restaurant => {
            const createdDate = new Date(restaurant.created_at);
            return createdDate.getMonth() === currentMonth && createdDate.getFullYear() === currentYear;
        }).length;
        
        const stats = {
            totalRestaurants,
            activeTrials,
            activeSubscriptions,
            monthlyRevenue: parseFloat(monthlyRevenue.toFixed(2)),
            newRestaurantsThisMonth,
            conversionRate: activeTrials > 0 ? ((activeSubscriptions / (activeTrials + activeSubscriptions)) * 100).toFixed(1) : 0,
            churnRate: 3.5, // Calcular baseado em dados hist√≥ricos
            averageOrderValue: parseFloat(averageOrderValue.toFixed(2)),
            totalOrders: orders.length,
            ordersThisMonth: monthlyOrders.length
        };

        console.log('‚úÖ Estat√≠sticas carregadas com sucesso:', stats);
        res.json(stats);
    } catch (error) {
        console.error('‚ùå Erro ao carregar estat√≠sticas:', error);
        res.status(500).json({ error: 'Erro interno do servidor', details: error.message });
    }
});

// Listar todos os restaurantes
app.get('/api/admin/restaurants', authenticateAdmin, async (req, res) => {
    try {
        console.log('üè™ Carregando lista de restaurantes...');

        // Criar cliente Supabase para consultas administrativas
        let supabaseUrl = process.env.SUPABASE_URL;
        let supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_ANON_KEY;

        // Auto-detect and fix swapped environment variables
        if (supabaseUrl && supabaseUrl.startsWith('eyJ') && process.env.SUPABASE_ANON_KEY && process.env.SUPABASE_ANON_KEY.startsWith('https://')) {
            console.log('üîÑ Admin endpoint auto-detecting swapped SUPABASE_URL and SUPABASE_ANON_KEY - fixing automatically');
            const temp = supabaseUrl;
            supabaseUrl = process.env.SUPABASE_ANON_KEY;
            supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || temp;
        }
        
        if (!supabaseUrl || !supabaseKey) {
            return res.status(500).json({ error: 'Configura√ß√£o do Supabase incompleta' });
        }
        
        const supabaseClient = createClient(supabaseUrl, supabaseKey);
        
        // Consulta real aos restaurantes no PostgreSQL
        const { data: restaurants, error } = await supabaseClient
            .from('restaurants')
            .select('*')
            .order('created_at', { ascending: false });
        
        if (error) {
            console.error('‚ùå Erro na consulta Supabase:', error);
            return res.status(500).json({ error: 'Erro ao consultar restaurantes', details: error.message });
        }
        
        // Buscar √∫ltimo login dos usu√°rios associados
        const enrichedRestaurants = await Promise.all(
            (restaurants || []).map(async (restaurant) => {
                try {
                    // Buscar informa√ß√µes do usu√°rio no auth.users se poss√≠vel
                    const { data: authData } = await supabaseClient.auth.admin.listUsers();
                    const user = authData?.users?.find(u => u.email === restaurant.owner_email);
                    
                    return {
                        ...restaurant,
                        last_login: user?.last_sign_in_at || null,
                        subscription_status: restaurant.subscription_status || 'trial'
                    };
                } catch (authError) {
                    // Se n√£o conseguir buscar dados do auth, retorna apenas os dados do restaurante
                    return {
                        ...restaurant,
                        last_login: null,
                        subscription_status: restaurant.subscription_status || 'trial'
                    };
                }
            })
        );

        console.log(`‚úÖ ${enrichedRestaurants.length} restaurantes carregados`);
        res.json({ restaurants: enrichedRestaurants });
    } catch (error) {
        console.error('‚ùå Erro ao carregar restaurantes:', error);
        res.status(500).json({ error: 'Erro interno do servidor', details: error.message });
    }
});

// Listar testes gratuitos ativos
app.get('/api/admin/trials', authenticateAdmin, async (req, res) => {
    try {
        console.log('üïê Carregando testes gratuitos ativos...');

        // Criar cliente Supabase para consultas administrativas
        let supabaseUrl = process.env.SUPABASE_URL;
        let supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_ANON_KEY;

        // Auto-detect and fix swapped environment variables
        if (supabaseUrl && supabaseUrl.startsWith('eyJ') && process.env.SUPABASE_ANON_KEY && process.env.SUPABASE_ANON_KEY.startsWith('https://')) {
            console.log('üîÑ Admin endpoint auto-detecting swapped SUPABASE_URL and SUPABASE_ANON_KEY - fixing automatically');
            const temp = supabaseUrl;
            supabaseUrl = process.env.SUPABASE_ANON_KEY;
            supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || temp;
        }
        
        if (!supabaseUrl || !supabaseKey) {
            return res.status(500).json({ error: 'Configura√ß√£o do Supabase incompleta' });
        }
        
        const supabaseClient = createClient(supabaseUrl, supabaseKey);
        
        // Consulta real aos restaurantes em per√≠odo de teste
        const { data: restaurants, error } = await supabaseClient
            .from('restaurants')
            .select('*')
            .eq('subscription_status', 'trial')
            .order('created_at', { ascending: false });
        
        if (error) {
            console.error('‚ùå Erro na consulta Supabase:', error);
            return res.status(500).json({ error: 'Erro ao consultar testes gratuitos', details: error.message });
        }
        
        // Calcular informa√ß√µes do per√≠odo de teste
        const trials = (restaurants || []).map(restaurant => {
            const trialStartDate = new Date(restaurant.created_at);
            const trialEndDate = new Date(trialStartDate);
            trialEndDate.setDate(trialEndDate.getDate() + 7); // 7 dias de teste
            
            const now = new Date();
            const trialDaysRemaining = Math.max(0, Math.ceil((trialEndDate - now) / (1000 * 60 * 60 * 24)));
            
            return {
                restaurant_id: restaurant.id,
                restaurant_name: restaurant.name,
                owner_email: restaurant.owner_email,
                trial_start_date: trialStartDate.toISOString(),
                trial_end_date: trialEndDate.toISOString(),
                trial_days_remaining: trialDaysRemaining,
                subscription_status: restaurant.subscription_status,
                is_expired: trialDaysRemaining <= 0
            };
        });

        console.log(`‚úÖ ${trials.length} testes ativos carregados`);
        res.json({ trials });
    } catch (error) {
        console.error('‚ùå Erro ao carregar testes:', error);
        res.status(500).json({ error: 'Erro interno do servidor', details: error.message });
    }
});

// Listar assinaturas ativas
app.get('/api/admin/subscriptions', authenticateAdmin, async (req, res) => {
    try {
        console.log('üí≥ Carregando assinaturas ativas...');

        // Criar cliente Supabase para consultas administrativas
        let supabaseUrl = process.env.SUPABASE_URL;
        let supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_ANON_KEY;

        // Auto-detect and fix swapped environment variables
        if (supabaseUrl && supabaseUrl.startsWith('eyJ') && process.env.SUPABASE_ANON_KEY && process.env.SUPABASE_ANON_KEY.startsWith('https://')) {
            console.log('üîÑ Admin endpoint auto-detecting swapped SUPABASE_URL and SUPABASE_ANON_KEY - fixing automatically');
            const temp = supabaseUrl;
            supabaseUrl = process.env.SUPABASE_ANON_KEY;
            supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || temp;
        }
        
        if (!supabaseUrl || !supabaseKey) {
            return res.status(500).json({ error: 'Configura√ß√£o do Supabase incompleta' });
        }
        
        const supabaseClient = createClient(supabaseUrl, supabaseKey);
        
        // Consulta na view admin_restaurants_detailed filtrando por subscription_status = 'active'
        const { data: subscriptions, error } = await supabaseClient
            .from('admin_restaurants_detailed')
            .select('*')
            .eq('subscription_status', 'active')
            .order('created_at', { ascending: false });
        
        if (error) {
            console.error('‚ùå Erro na consulta Supabase:', error);
            return res.status(500).json({ error: 'Erro ao consultar assinaturas', details: error.message });
        }

        console.log(`‚úÖ ${subscriptions?.length || 0} assinaturas carregadas`);
        res.json({ subscriptions: subscriptions || [] });
    } catch (error) {
        console.error('‚ùå Erro ao carregar assinaturas:', error);
        res.status(500).json({ error: 'Erro interno do servidor', details: error.message });
    }
});

// =================================================================
// ENDPOINTS ADMINISTRATIVOS ADICIONAIS
// =================================================================

// Login administrativo simplificado para desenvolvimento
app.post('/api/admin/login', async (req, res) => {
    try {
        const { email, password } = req.body;
        
        if (!email || !password) {
            return res.status(400).json({ error: 'Email e senha s√£o obrigat√≥rios' });
        }
        
        // Login administrativo simplificado para desenvolvimento
        if (email === 'luishplleite@gmail.com' && password === '@Lucas281178@') {
            
            // Gerar JWT
            const jwt = require('jsonwebtoken');
            const token = jwt.sign(
                { admin_id: 1, email: email, role: 'admin' },
                process.env.JWT_SECRET || 'timepulse_admin_secret_2025',
                { expiresIn: '8h' }
            );
            
            res.json({
                success: true,
                token: token,
                admin: {
                    id: 1,
                    name: 'Lucas Administrator',
                    email: email,
                    role: 'admin'
                }
            });
            
            console.log(`‚úÖ Login administrativo realizado para ${email}`);
            return;
        }
        
        // Credenciais inv√°lidas
        return res.status(401).json({ error: 'Credenciais inv√°lidas' });
        
    } catch (error) {
        console.error('‚ùå Erro no login admin:', error);
        res.status(500).json({ error: 'Erro interno do servidor' });
    }
});

// Verificar token administrativo
app.get('/api/admin/verify', authenticateAdmin, (req, res) => {
    res.json({
        success: true,
        admin: {
            email: req.user.email,
            role: req.user.role || 'admin'
        }
    });
});

// CSRF token para administradores
app.get('/api/admin/csrf-token', authenticateAdmin, (req, res) => {
    res.set('Cache-Control', 'no-cache, no-store, must-revalidate');
    res.set('Pragma', 'no-cache');
    res.set('Expires', '0');

    const crypto = require('crypto');
    const adminId = req.user.admin_id || req.user.id || 'admin';
    const timestamp = Date.now();
    const hash = crypto.createHash('sha256')
        .update(adminId + timestamp + 'timepulse-admin-csrf-secret')
        .digest('hex')
        .substring(0, 16);

    const csrfToken = `csrf_admin_${adminId}_${hash}`;

    res.json({
        csrfToken: csrfToken,
        timestamp: timestamp,
        status: "ok"
    });
});

// Chat do assistente para administradores
app.post('/api/admin/assistant/chat', authenticateAdmin, async (req, res) => {
    try {
        const { messages, model, reasoning_effort, max_completion_tokens, temperature, restaurant_id, session_id } = req.body;

        // Configurar par√¢metros padr√£o para administradores - OBRIGATORIAMENTE gpt-5-mini
        const finalModel = 'gpt-5-mini'; // Sempre gpt-5-mini, jamais outro modelo
        const finalReasoningEffort = reasoning_effort || 'medium';
        const finalMaxTokens = max_completion_tokens || 4096;
        const finalSessionId = session_id || `admin-${Date.now()}`;

        console.log(`ü§ñ Admin chat request: ${finalModel}, reasoning: ${finalReasoningEffort}`);

        // Verificar se a API key est√° configurada
        const apiKey = process.env.OPENAI_API_KEY;
        if (!apiKey) {
            console.error('‚ùå OPENAI_API_KEY n√£o configurada');
            return res.status(500).json({
                error: 'OpenAI API n√£o configurada',
                details: 'Chave da API n√£o encontrada'
            });
        }

        // Fazer requisi√ß√£o para OpenAI API
        const response = await fetch('https://api.openai.com/v1/chat/completions', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${apiKey}`
            },
            body: JSON.stringify({
                model: finalModel,
                messages: messages,
                max_completion_tokens: finalMaxTokens,
                stream: false
            })
        });

        if (!response.ok) {
            const errorData = await response.text();
            console.error('‚ùå Erro da OpenAI API:', response.status, errorData);
            return res.status(response.status).json({
                error: 'Erro na OpenAI API',
                details: `Status ${response.status}: ${errorData}`
            });
        }

        const data = await response.json();
        
        if (!data.choices || !data.choices[0] || !data.choices[0].message) {
            console.error('‚ùå Resposta inv√°lida da OpenAI API:', data);
            return res.status(500).json({
                error: 'Resposta inv√°lida da API',
                details: 'Formato de resposta inesperado'
            });
        }

        const aiResponse = data.choices[0].message.content;

        console.log(`‚úÖ Admin chat response: ${aiResponse.length} chars`);

        res.json({
            response: aiResponse,
            model_used: finalModel,
            reasoning_effort: finalReasoningEffort,
            session_id: finalSessionId,
            admin_mode: true,
            usage: data.usage || {},
            timestamp: new Date().toISOString()
        });

    } catch (error) {
        console.error('‚ùå Erro no chat admin:', error);
        res.status(500).json({
            error: 'Erro interno do servidor',
            details: error.message
        });
    }
});

// Endpoints para gerenciar prompts personalizados do assistente (Admin)
app.get('/api/admin/system-prompt', authenticateAdmin, async (req, res) => {
    try {
        const { restaurant_id } = req.query;
        
        if (!restaurant_id) {
            return res.status(400).json({
                error: 'restaurant_id √© obrigat√≥rio',
                status: 'validation_error'
            });
        }
        
        console.log(`üìñ [Admin] Carregando prompt personalizado para restaurante ${restaurant_id}...`);
        
        // Criar cliente Supabase para opera√ß√µes administrativas
        const { createClient } = require('@supabase/supabase-js');
        let supabaseUrl = process.env.SUPABASE_URL;
        let supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_ANON_KEY;

        if (supabaseUrl && supabaseUrl.startsWith('eyJ') && process.env.SUPABASE_ANON_KEY && process.env.SUPABASE_ANON_KEY.startsWith('https://')) {
            const temp = supabaseUrl;
            supabaseUrl = process.env.SUPABASE_ANON_KEY;
            supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || temp;
        }
        
        if (!supabaseUrl || !supabaseKey) {
            return res.status(500).json({ error: 'Configura√ß√£o do Supabase incompleta' });
        }
        
        const supabaseClient = createClient(supabaseUrl, supabaseKey);
        
        const { data: prompt, error } = await supabaseClient
            .from('ai_system_prompts')
            .select('*')
            .eq('restaurant_id', restaurant_id)
            .eq('is_active', true)
            .single();
        
        if (error && error.code !== 'PGRST116') { // PGRST116 = no rows returned
            console.error('‚ùå [Admin] Erro ao carregar prompt:', error);
            return res.status(500).json({ 
                error: 'Erro ao carregar prompt personalizado',
                hasCustomPrompt: false 
            });
        }
        
        if (!prompt) {
            console.log('üìñ [Admin] Nenhum prompt personalizado encontrado, usando padr√£o');
            return res.json({ 
                hasCustomPrompt: false,
                prompt: null,
                status: 'using_default'
            });
        }
        
        console.log(`‚úÖ [Admin] Prompt personalizado carregado para restaurante ${restaurant_id}`);
        res.json({
            hasCustomPrompt: true,
            prompt: prompt.content,
            promptId: prompt.id,
            createdBy: prompt.created_by,
            updatedAt: prompt.updated_at,
            status: 'loaded'
        });
        
    } catch (error) {
        console.error('‚ùå [Admin] Erro ao carregar prompt personalizado:', error);
        res.status(500).json({ 
            error: 'Erro interno ao carregar prompt',
            status: 'server_error'
        });
    }
});

app.post('/api/admin/system-prompt', 
    authenticateAdmin, 
    // Usar middleware CSRF administrativo
    (req, res, next) => {
        // Validar CSRF token para admin
        const csrfToken = req.headers['x-csrf-token'];
        if (!csrfToken || !csrfToken.startsWith('csrf_admin_')) {
            return res.status(403).json({
                error: "Token CSRF administrativo inv√°lido",
                details: "Use o endpoint /api/admin/csrf-token para obter um token v√°lido"
            });
        }
        next();
    },
    async (req, res) => {
    try {
        const { prompt, restaurant_id } = req.body;
        
        if (!restaurant_id) {
            return res.status(400).json({
                error: 'restaurant_id √© obrigat√≥rio',
                status: 'validation_error'
            });
        }
        
        if (!prompt || typeof prompt !== 'string' || prompt.trim().length === 0) {
            return res.status(400).json({
                error: 'Prompt √© obrigat√≥rio e deve ser uma string n√£o vazia',
                status: 'validation_error'
            });
        }
        
        if (prompt.length > 16384) { // Limite de ~4096 tokens (16k caracteres)
            return res.status(400).json({
                error: 'Prompt muito longo (m√°ximo 4096 tokens / 16.384 caracteres)',
                status: 'validation_error'
            });
        }
        
        console.log(`üíæ [Admin] Salvando prompt personalizado para restaurante ${restaurant_id}...`);
        
        // Criar cliente Supabase para opera√ß√µes administrativas
        const { createClient } = require('@supabase/supabase-js');
        let supabaseUrl = process.env.SUPABASE_URL;
        let supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_ANON_KEY;

        if (supabaseUrl && supabaseUrl.startsWith('eyJ') && process.env.SUPABASE_ANON_KEY && process.env.SUPABASE_ANON_KEY.startsWith('https://')) {
            const temp = supabaseUrl;
            supabaseUrl = process.env.SUPABASE_ANON_KEY;
            supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || temp;
        }
        
        if (!supabaseUrl || !supabaseKey) {
            return res.status(500).json({ error: 'Configura√ß√£o do Supabase incompleta' });
        }
        
        const supabaseClient = createClient(supabaseUrl, supabaseKey);
        
        // Desativar prompt anterior (se existir)
        await supabaseClient
            .from('ai_system_prompts')
            .update({ is_active: false })
            .eq('restaurant_id', restaurant_id);
        
        // Inserir novo prompt
        const { data, error } = await supabaseClient
            .from('ai_system_prompts')
            .insert({
                restaurant_id: restaurant_id,
                content: prompt.trim(),
                created_by: req.user.email || 'admin',
                is_active: true
            })
            .select()
            .single();
        
        if (error) {
            console.error('‚ùå [Admin] Erro ao salvar prompt:', error);
            return res.status(500).json({ 
                error: 'Erro ao salvar prompt personalizado',
                details: error.message 
            });
        }
        
        console.log(`‚úÖ [Admin] Prompt personalizado salvo com sucesso! ID: ${data.id}`);
        res.json({
            success: true,
            message: 'Prompt personalizado salvo com sucesso!',
            promptId: data.id,
            updatedAt: data.updated_at,
            status: 'saved'
        });
        
    } catch (error) {
        console.error('‚ùå [Admin] Erro ao salvar prompt personalizado:', error);
        res.status(500).json({ 
            error: 'Erro interno ao salvar prompt',
            status: 'server_error'
        });
    }
});

// ===== ENDPOINTS PARA GERENCIAR PROMPTS POR TIPO DE NEG√ìCIO =====

// Endpoint para obter prompt por tipo de neg√≥cio
app.get('/api/admin/business-type-prompt', authenticateAdmin, async (req, res) => {
    try {
        const { tipo_negocio } = req.query;
        
        if (!tipo_negocio) {
            return res.status(400).json({
                error: 'tipo_negocio √© obrigat√≥rio',
                status: 'validation_error'
            });
        }
        
        console.log(`üìñ [Admin] Carregando prompt para tipo de neg√≥cio: ${tipo_negocio}...`);
        
        // Criar cliente Supabase para opera√ß√µes administrativas
        const { createClient } = require('@supabase/supabase-js');
        let supabaseUrl = process.env.SUPABASE_URL;
        let supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_ANON_KEY;

        if (supabaseUrl && supabaseUrl.startsWith('eyJ') && process.env.SUPABASE_ANON_KEY && process.env.SUPABASE_ANON_KEY.startsWith('https://')) {
            const temp = supabaseUrl;
            supabaseUrl = process.env.SUPABASE_ANON_KEY;
            supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || temp;
        }
        
        if (!supabaseUrl || !supabaseKey) {
            return res.status(500).json({ error: 'Configura√ß√£o do Supabase incompleta' });
        }
        
        const supabaseClient = createClient(supabaseUrl, supabaseKey);
        
        const { data: prompt, error } = await supabaseClient
            .from('prompit')
            .select('*')
            .eq('tipo_negocio', tipo_negocio)
            .single();
        
        if (error && error.code !== 'PGRST116') { // PGRST116 = no rows returned
            console.error('‚ùå [Admin] Erro ao carregar prompt por tipo de neg√≥cio:', error);
            return res.status(500).json({ 
                error: 'Erro ao carregar prompt por tipo de neg√≥cio',
                hasPrompt: false 
            });
        }
        
        if (!prompt) {
            console.log(`üìñ [Admin] Nenhum prompt encontrado para tipo de neg√≥cio: ${tipo_negocio}`);
            return res.json({ 
                hasPrompt: false,
                prompt: null,
                status: 'not_found'
            });
        }
        
        console.log(`‚úÖ [Admin] Prompt carregado para tipo de neg√≥cio: ${tipo_negocio}`);
        res.json({
            hasPrompt: true,
            prompt: prompt.prompt,
            promptId: prompt.id,
            tipoNegocio: prompt.tipo_negocio,
            updatedAt: prompt.updated_at,
            status: 'loaded'
        });
        
    } catch (error) {
        console.error('‚ùå [Admin] Erro ao carregar prompt por tipo de neg√≥cio:', error);
        res.status(500).json({ 
            error: 'Erro interno ao carregar prompt',
            status: 'server_error'
        });
    }
});

// Endpoint para salvar prompt por tipo de neg√≥cio
app.post('/api/admin/business-type-prompt', 
    authenticateAdmin, 
    // Usar middleware CSRF administrativo
    (req, res, next) => {
        const csrfToken = req.headers['x-csrf-token'];
        if (!csrfToken || !csrfToken.startsWith('csrf_admin_')) {
            return res.status(403).json({
                error: "Token CSRF administrativo inv√°lido",
                details: "Use o endpoint /api/admin/csrf-token para obter um token v√°lido"
            });
        }
        next();
    },
    async (req, res) => {
    try {
        const { tipo_negocio, prompt } = req.body;
        
        if (!tipo_negocio) {
            return res.status(400).json({
                error: 'tipo_negocio √© obrigat√≥rio',
                status: 'validation_error'
            });
        }
        
        if (!prompt || typeof prompt !== 'string' || prompt.trim().length === 0) {
            return res.status(400).json({
                error: 'Prompt √© obrigat√≥rio e deve ser uma string n√£o vazia',
                status: 'validation_error'
            });
        }
        
        if (prompt.length > 16384) { // Limite de ~4096 tokens (16k caracteres)
            return res.status(400).json({
                error: 'Prompt muito longo (m√°ximo 4096 tokens / 16.384 caracteres)',
                status: 'validation_error'
            });
        }
        
        console.log(`üíæ [Admin] Salvando prompt para tipo de neg√≥cio: ${tipo_negocio}...`);
        
        // Criar cliente Supabase para opera√ß√µes administrativas
        const { createClient } = require('@supabase/supabase-js');
        let supabaseUrl = process.env.SUPABASE_URL;
        let supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_ANON_KEY;

        if (supabaseUrl && supabaseUrl.startsWith('eyJ') && process.env.SUPABASE_ANON_KEY && process.env.SUPABASE_ANON_KEY.startsWith('https://')) {
            const temp = supabaseUrl;
            supabaseUrl = process.env.SUPABASE_ANON_KEY;
            supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || temp;
        }
        
        if (!supabaseUrl || !supabaseKey) {
            return res.status(500).json({ error: 'Configura√ß√£o do Supabase incompleta' });
        }
        
        const supabaseClient = createClient(supabaseUrl, supabaseKey);
        
        // Verificar se j√° existe um prompt para este tipo de neg√≥cio
        const { data: existingPrompt } = await supabaseClient
            .from('prompit')
            .select('id')
            .eq('tipo_negocio', tipo_negocio)
            .single();
        
        let data, error;
        
        if (existingPrompt) {
            // Atualizar prompt existente
            ({ data, error } = await supabaseClient
                .from('prompit')
                .update({ 
                    prompt: prompt.trim(),
                    updated_at: new Date().toISOString()
                })
                .eq('tipo_negocio', tipo_negocio)
                .select()
                .single());
        } else {
            // Inserir novo prompt
            ({ data, error } = await supabaseClient
                .from('prompit')
                .insert({
                    tipo_negocio: tipo_negocio,
                    prompt: prompt.trim()
                })
                .select()
                .single());
        }
        
        if (error) {
            console.error('‚ùå [Admin] Erro ao salvar prompt por tipo de neg√≥cio:', error);
            return res.status(500).json({ 
                error: 'Erro ao salvar prompt por tipo de neg√≥cio',
                details: error.message 
            });
        }
        
        console.log(`‚úÖ [Admin] Prompt salvo para tipo de neg√≥cio: ${tipo_negocio}! ID: ${data.id}`);
        res.json({
            success: true,
            message: `Prompt para ${tipo_negocio} salvo com sucesso!`,
            promptId: data.id,
            tipoNegocio: data.tipo_negocio,
            updatedAt: data.updated_at,
            status: 'saved'
        });
        
    } catch (error) {
        console.error('‚ùå [Admin] Erro ao salvar prompt por tipo de neg√≥cio:', error);
        res.status(500).json({ 
            error: 'Erro interno ao salvar prompt',
            status: 'server_error'
        });
    }
});

// Endpoint para listar todos os prompts por tipo de neg√≥cio
app.get('/api/admin/business-types-prompts', authenticateAdmin, async (req, res) => {
    try {
        console.log(`üìñ [Admin] Carregando lista de prompts por tipo de neg√≥cio...`);
        
        // Criar cliente Supabase para opera√ß√µes administrativas
        const { createClient } = require('@supabase/supabase-js');
        let supabaseUrl = process.env.SUPABASE_URL;
        let supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_ANON_KEY;

        if (supabaseUrl && supabaseUrl.startsWith('eyJ') && process.env.SUPABASE_ANON_KEY && process.env.SUPABASE_ANON_KEY.startsWith('https://')) {
            const temp = supabaseUrl;
            supabaseUrl = process.env.SUPABASE_ANON_KEY;
            supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || temp;
        }
        
        if (!supabaseUrl || !supabaseKey) {
            return res.status(500).json({ error: 'Configura√ß√£o do Supabase incompleta' });
        }
        
        const supabaseClient = createClient(supabaseUrl, supabaseKey);
        
        const { data: prompts, error } = await supabaseClient
            .from('prompit')
            .select('*')
            .order('tipo_negocio', { ascending: true });
        
        if (error) {
            console.error('‚ùå [Admin] Erro ao carregar lista de prompts:', error);
            return res.status(500).json({ 
                error: 'Erro ao carregar lista de prompts',
                prompts: []
            });
        }
        
        console.log(`‚úÖ [Admin] Lista de prompts carregada: ${prompts?.length || 0} tipos configurados`);
        res.json({
            success: true,
            prompts: prompts || [],
            count: prompts?.length || 0,
            status: 'loaded'
        });
        
    } catch (error) {
        console.error('‚ùå [Admin] Erro ao carregar lista de prompts:', error);
        res.status(500).json({ 
            error: 'Erro interno ao carregar lista',
            status: 'server_error'
        });
    }
});

// Endpoint para obter prompt baseado no tipo de neg√≥cio do restaurante (para o assistente)
app.get('/api/assistant/business-type-prompt', async (req, res) => {
    try {
        const { restaurant_id } = req.query;
        
        if (!restaurant_id) {
            return res.status(400).json({
                error: 'restaurant_id √© obrigat√≥rio',
                status: 'validation_error'
            });
        }
        
        console.log(`üìñ [Assistant] Carregando prompt baseado no tipo de neg√≥cio para restaurante: ${restaurant_id}...`);
        
        // Criar cliente Supabase 
        const { createClient } = require('@supabase/supabase-js');
        let supabaseUrl = process.env.SUPABASE_URL;
        let supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_ANON_KEY;

        if (supabaseUrl && supabaseUrl.startsWith('eyJ') && process.env.SUPABASE_ANON_KEY && process.env.SUPABASE_ANON_KEY.startsWith('https://')) {
            const temp = supabaseUrl;
            supabaseUrl = process.env.SUPABASE_ANON_KEY;
            supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || temp;
        }
        
        if (!supabaseUrl || !supabaseKey) {
            return res.status(500).json({ error: 'Configura√ß√£o do Supabase incompleta' });
        }
        
        const supabaseClient = createClient(supabaseUrl, supabaseKey);
        
        // Primeiro, buscar o tipo de neg√≥cio do restaurante
        const { data: restaurant, error: restaurantError } = await supabaseClient
            .from('restaurants')
            .select('business_type')
            .eq('id', restaurant_id)
            .single();
        
        if (restaurantError || !restaurant) {
            console.warn(`‚ö†Ô∏è [Assistant] Restaurante n√£o encontrado: ${restaurant_id}`);
            return res.json({ 
                hasPrompt: false,
                prompt: null,
                businessType: null,
                status: 'restaurant_not_found'
            });
        }
        
        const businessType = restaurant.business_type;
        
        if (!businessType) {
            console.log(`üìñ [Assistant] Restaurante ${restaurant_id} n√£o tem tipo de neg√≥cio definido`);
            return res.json({ 
                hasPrompt: false,
                prompt: null,
                businessType: null,
                status: 'no_business_type'
            });
        }
        
        // Buscar prompt para este tipo de neg√≥cio
        const { data: prompt, error: promptError } = await supabaseClient
            .from('prompit')
            .select('*')
            .eq('tipo_negocio', businessType)
            .single();
        
        if (promptError && promptError.code !== 'PGRST116') {
            console.error('‚ùå [Assistant] Erro ao carregar prompt por tipo de neg√≥cio:', promptError);
            return res.status(500).json({ 
                error: 'Erro ao carregar prompt por tipo de neg√≥cio',
                hasPrompt: false 
            });
        }
        
        if (!prompt) {
            console.log(`üìñ [Assistant] Nenhum prompt encontrado para tipo de neg√≥cio: ${businessType}`);
            return res.json({ 
                hasPrompt: false,
                prompt: null,
                businessType: businessType,
                status: 'no_prompt_for_business_type'
            });
        }
        
        console.log(`‚úÖ [Assistant] Prompt carregado para tipo de neg√≥cio: ${businessType}`);
        res.json({
            hasPrompt: true,
            prompt: prompt.prompt,
            promptId: prompt.id,
            businessType: businessType,
            updatedAt: prompt.updated_at,
            status: 'loaded'
        });
        
    } catch (error) {
        console.error('‚ùå [Assistant] Erro ao carregar prompt por tipo de neg√≥cio:', error);
        res.status(500).json({ 
            error: 'Erro interno ao carregar prompt',
            status: 'server_error'
        });
    }
});

// Estender per√≠odo de teste
app.post('/api/admin/extend-trial', authenticateAdmin, async (req, res) => {
    try {
        const { restaurant_id, days, reason } = req.body;
        
        if (!restaurant_id || !days || days < 1) {
            return res.status(400).json({ error: 'ID do restaurante e n√∫mero de dias s√£o obrigat√≥rios' });
        }
        
        // Criar cliente Supabase para opera√ß√µes administrativas
        const { createClient } = require('@supabase/supabase-js');
        let supabaseUrl = process.env.SUPABASE_URL;
        let supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_ANON_KEY;

        // Auto-detect and fix swapped environment variables
        if (supabaseUrl && supabaseUrl.startsWith('eyJ') && process.env.SUPABASE_ANON_KEY && process.env.SUPABASE_ANON_KEY.startsWith('https://')) {
            console.log('üîÑ Admin operation auto-detecting swapped SUPABASE_URL and SUPABASE_ANON_KEY - fixing automatically');
            const temp = supabaseUrl;
            supabaseUrl = process.env.SUPABASE_ANON_KEY;
            supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || temp;
        }
        
        if (!supabaseUrl || !supabaseKey) {
            return res.status(500).json({ error: 'Configura√ß√£o do Supabase incompleta' });
        }
        
        const supabaseClient = createClient(supabaseUrl, supabaseKey);
        
        // Buscar restaurante atual
        const { data: restaurant, error: fetchError } = await supabaseClient
            .from('restaurants')
            .select('id, name, trial_end_date')
            .eq('id', restaurant_id)
            .single();
        
        if (fetchError || !restaurant) {
            return res.status(404).json({ error: 'Restaurante n√£o encontrado' });
        }
        
        // Calcular nova data de fim do teste
        const currentTrialEnd = new Date(restaurant.trial_end_date);
        const newTrialEnd = new Date(currentTrialEnd.getTime() + (days * 24 * 60 * 60 * 1000));
        
        // Atualizar per√≠odo de teste
        const updateData = { 
            trial_end_date: newTrialEnd.toISOString(),
            updated_at: new Date().toISOString()
        };
        
        // Adicionar motivo da extens√£o se fornecido
        if (reason && reason.trim()) {
            updateData.trial_extension_reason = reason.trim();
        }
        
        const { data: updatedRestaurant, error: updateError } = await supabaseClient
            .from('restaurants')
            .update(updateData)
            .eq('id', restaurant_id)
            .select('id, name, trial_end_date, trial_extension_reason')
            .single();
        
        if (updateError) {
            return res.status(500).json({ error: 'Erro ao atualizar per√≠odo de teste' });
        }
        
        // Log da a√ß√£o administrativa
        await supabaseClient
            .from('admin_action_logs')
            .insert({
                admin_id: req.user.admin_id || 0,
                action_type: 'extend_trial',
                target_id: restaurant_id,
                target_type: 'restaurant',
                description: `Estendido teste por ${days} dias. Motivo: ${reason || 'N/A'}`
            });
        
        console.log(`‚úÖ Admin ${req.user.email} estendeu teste em ${days} dias para restaurante ${restaurant_id}`);
        
        res.json({
            success: true,
            restaurant: updatedRestaurant,
            message: `Per√≠odo de teste estendido por ${days} dias`
        });
        
    } catch (error) {
        console.error('‚ùå Erro ao estender teste:', error);
        res.status(500).json({ error: 'Erro interno do servidor' });
    }
});

// Alterar status do restaurante
app.post('/api/admin/change-status', authenticateAdmin, async (req, res) => {
    try {
        const { restaurant_id, status, reason } = req.body;
        
        if (!restaurant_id || !status) {
            return res.status(400).json({ error: 'ID do restaurante e status s√£o obrigat√≥rios' });
        }
        
        if (!['active', 'inactive', 'suspended'].includes(status)) {
            return res.status(400).json({ error: 'Status inv√°lido' });
        }
        
        // Criar cliente Supabase para opera√ß√µes administrativas
        const { createClient } = require('@supabase/supabase-js');
        let supabaseUrl = process.env.SUPABASE_URL;
        let supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_ANON_KEY;

        // Auto-detect and fix swapped environment variables
        if (supabaseUrl && supabaseUrl.startsWith('eyJ') && process.env.SUPABASE_ANON_KEY && process.env.SUPABASE_ANON_KEY.startsWith('https://')) {
            console.log('üîÑ Admin operation auto-detecting swapped SUPABASE_URL and SUPABASE_ANON_KEY - fixing automatically');
            const temp = supabaseUrl;
            supabaseUrl = process.env.SUPABASE_ANON_KEY;
            supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || temp;
        }
        
        if (!supabaseUrl || !supabaseKey) {
            return res.status(500).json({ error: 'Configura√ß√£o do Supabase incompleta' });
        }
        
        const supabaseClient = createClient(supabaseUrl, supabaseKey);
        
        // Atualizar status do restaurante
        const { data: updatedRestaurant, error: updateError } = await supabaseClient
            .from('restaurants')
            .update({ 
                status: status,
                updated_at: new Date().toISOString()
            })
            .eq('id', restaurant_id)
            .select('id, name, status')
            .single();
        
        if (updateError || !updatedRestaurant) {
            return res.status(404).json({ error: 'Restaurante n√£o encontrado' });
        }
        
        // Log da a√ß√£o administrativa
        await supabaseClient
            .from('admin_action_logs')
            .insert({
                admin_id: req.user.admin_id || 0,
                action_type: 'change_status',
                target_id: restaurant_id,
                target_type: 'restaurant',
                description: `Status alterado para ${status}. Motivo: ${reason || 'N/A'}`
            });
        
        console.log(`‚úÖ Admin ${req.user.email} alterou status para ${status} do restaurante ${restaurant_id}`);
        
        res.json({
            success: true,
            restaurant: updatedRestaurant,
            message: `Status alterado para ${status}`
        });
        
    } catch (error) {
        console.error('‚ùå Erro ao alterar status:', error);
        res.status(500).json({ error: 'Erro interno do servidor' });
    }
});

// Ativa√ß√£o manual de assinatura
app.post('/api/admin/activate-subscription', authenticateAdmin, async (req, res) => {
    try {
        const { restaurant_id, end_date, reason } = req.body;
        
        if (!restaurant_id || !end_date || !reason) {
            return res.status(400).json({ 
                error: 'ID do restaurante, data de fim da assinatura e motivo s√£o obrigat√≥rios' 
            });
        }
        
        // Validar formato UUID do restaurant_id
        const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
        if (!uuidRegex.test(restaurant_id)) {
            return res.status(400).json({ error: 'ID do restaurante deve ser um UUID v√°lido' });
        }
        
        // Validar formato da data
        const subscriptionEndDate = new Date(end_date);
        if (isNaN(subscriptionEndDate.getTime())) {
            return res.status(400).json({ error: 'Data de fim da assinatura inv√°lida' });
        }
        
        // Verificar se a data √© futura
        if (subscriptionEndDate <= new Date()) {
            return res.status(400).json({ error: 'Data de fim da assinatura deve ser futura' });
        }
        
        // Criar cliente Supabase para opera√ß√µes administrativas
        const { createClient } = require('@supabase/supabase-js');
        let supabaseUrl = process.env.SUPABASE_URL;
        let supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_ANON_KEY;

        // Auto-detect and fix swapped environment variables
        if (supabaseUrl && supabaseUrl.startsWith('eyJ') && process.env.SUPABASE_ANON_KEY && process.env.SUPABASE_ANON_KEY.startsWith('https://')) {
            console.log('üîÑ Admin operation auto-detecting swapped SUPABASE_URL and SUPABASE_ANON_KEY - fixing automatically');
            const temp = supabaseUrl;
            supabaseUrl = process.env.SUPABASE_ANON_KEY;
            supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || temp;
        }
        
        if (!supabaseUrl || !supabaseKey) {
            return res.status(500).json({ error: 'Configura√ß√£o do Supabase incompleta' });
        }
        
        const supabaseClient = createClient(supabaseUrl, supabaseKey);
        
        // Buscar restaurante para verificar se existe
        const { data: restaurant, error: fetchError } = await supabaseClient
            .from('restaurants')
            .select('id, name, subscription_status')
            .eq('id', restaurant_id)
            .single();
        
        if (fetchError || !restaurant) {
            return res.status(404).json({ error: 'Restaurante n√£o encontrado' });
        }
        
        // Atualizar assinatura do restaurante
        const updateData = {
            subscription_status: 'active',
            subscription_start_date: new Date().toISOString(),
            subscription_end_date: subscriptionEndDate.toISOString(),
            manual_activation_reason: reason.trim(),
            updated_at: new Date().toISOString()
        };
        
        const { data: updatedRestaurant, error: updateError } = await supabaseClient
            .from('restaurants')
            .update(updateData)
            .eq('id', restaurant_id)
            .select('id, name, subscription_status, subscription_end_date')
            .single();
        
        if (updateError || !updatedRestaurant) {
            console.error('‚ùå Erro ao ativar assinatura:', updateError);
            return res.status(500).json({ error: 'Erro ao ativar assinatura' });
        }
        
        // Log da a√ß√£o administrativa
        await supabaseClient
            .from('admin_action_logs')
            .insert({
                admin_id: req.user.admin_id || 0,
                action_type: 'activate_subscription',
                target_id: restaurant_id,
                target_type: 'restaurant',
                description: `Assinatura ativada manualmente at√© ${end_date}. Motivo: ${reason}`
            });
        
        console.log(`‚úÖ Admin ${req.user.email} ativou assinatura manual para restaurante ${restaurant_id} at√© ${end_date}`);
        
        res.json({
            success: true,
            restaurant: updatedRestaurant,
            message: `Assinatura ativada com sucesso at√© ${subscriptionEndDate.toLocaleDateString('pt-BR')}`
        });
        
    } catch (error) {
        console.error('‚ùå Erro ao ativar assinatura manual:', error);
        res.status(500).json({ error: 'Erro interno do servidor' });
    }
});

// Logs de a√ß√µes administrativas
app.get('/api/admin/logs', authenticateAdmin, async (req, res) => {
    try {
        const { limit = 100, offset = 0 } = req.query;
        
        // Criar cliente Supabase para opera√ß√µes administrativas
        const { createClient } = require('@supabase/supabase-js');
        let supabaseUrl = process.env.SUPABASE_URL;
        let supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_ANON_KEY;

        // Auto-detect and fix swapped environment variables
        if (supabaseUrl && supabaseUrl.startsWith('eyJ') && process.env.SUPABASE_ANON_KEY && process.env.SUPABASE_ANON_KEY.startsWith('https://')) {
            console.log('üîÑ Admin operation auto-detecting swapped SUPABASE_URL and SUPABASE_ANON_KEY - fixing automatically');
            const temp = supabaseUrl;
            supabaseUrl = process.env.SUPABASE_ANON_KEY;
            supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || temp;
        }
        
        if (!supabaseUrl || !supabaseKey) {
            return res.status(500).json({ error: 'Configura√ß√£o do Supabase incompleta' });
        }
        
        const supabaseClient = createClient(supabaseUrl, supabaseKey);
        
        const { data: logs, error } = await supabaseClient
            .from('admin_action_logs')
            .select(`
                *,
                system_administrators(name, email)
            `)
            .order('created_at', { ascending: false })
            .range(offset, offset + limit - 1);
        
        if (error) {
            console.error('‚ùå Erro ao buscar logs:', error);
            return res.status(500).json({ error: 'Erro ao buscar logs' });
        }
        
        res.json(logs || []);
        
    } catch (error) {
        console.error('‚ùå Erro ao buscar logs:', error);
        res.status(500).json({ error: 'Erro interno do servidor' });
    }
});

console.log('üõ°Ô∏è Endpoints administrativos adicionais configurados');

// =================================================================
// ENDPOINTS CONFIGURA√á√ÉO DE ASSINATURA
// =================================================================

// Buscar todos os planos de assinatura
app.get('/api/admin/subscription-plans', authenticateAdmin, async (req, res) => {
    try {
        const { createClient } = require('@supabase/supabase-js');
        let supabaseUrl = process.env.SUPABASE_URL;
        let supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_ANON_KEY;

        if (supabaseUrl && supabaseUrl.startsWith('eyJ') && process.env.SUPABASE_ANON_KEY && process.env.SUPABASE_ANON_KEY.startsWith('https://')) {
            const temp = supabaseUrl;
            supabaseUrl = process.env.SUPABASE_ANON_KEY;
            supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || temp;
        }
        
        const supabaseClient = createClient(supabaseUrl, supabaseKey);
        
        const { data: plans, error } = await supabaseClient
            .from('subscription_plans')
            .select('*')
            .eq('active', true)
            .order('price', { ascending: true });
        
        if (error) {
            console.error('‚ùå Erro ao buscar planos:', error);
            return res.status(500).json({ error: 'Erro ao buscar planos' });
        }
        
        res.json(plans || []);
    } catch (error) {
        console.error('‚ùå Erro ao buscar planos:', error);
        res.status(500).json({ error: 'Erro interno do servidor' });
    }
});

// Atualizar pre√ßos dos planos
app.post('/api/admin/subscription-plans/prices', authenticateAdmin, async (req, res) => {
    try {
        const { prices } = req.body;
        
        const { createClient } = require('@supabase/supabase-js');
        let supabaseUrl = process.env.SUPABASE_URL;
        let supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_ANON_KEY;

        if (supabaseUrl && supabaseUrl.startsWith('eyJ') && process.env.SUPABASE_ANON_KEY && process.env.SUPABASE_ANON_KEY.startsWith('https://')) {
            const temp = supabaseUrl;
            supabaseUrl = process.env.SUPABASE_ANON_KEY;
            supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || temp;
        }
        
        const supabaseClient = createClient(supabaseUrl, supabaseKey);
        
        // Atualizar cada plano
        for (const [planName, price] of Object.entries(prices)) {
            if (planName !== 'trial') { // Trial sempre √© gratuito
                await supabaseClient
                    .from('subscription_plans')
                    .update({ 
                        price: parseFloat(price),
                        updated_at: new Date().toISOString()
                    })
                    .eq('name', planName);
            }
        }
        
        // Registrar auditoria
        await supabaseClient
            .from('subscription_config_audit')
            .insert({
                action_type: 'update_prices',
                new_value: prices,
                changed_by: req.user.admin_id || null,
                ip_address: req.ip
            });
        
        console.log(`‚úÖ Pre√ßos dos planos atualizados por ${req.user.email}`);
        res.json({ success: true, message: 'Pre√ßos atualizados com sucesso' });
        
    } catch (error) {
        console.error('‚ùå Erro ao atualizar pre√ßos:', error);
        res.status(500).json({ error: 'Erro interno do servidor' });
    }
});

// Buscar configura√ß√£o de bloqueio de um plano
app.get('/api/admin/subscription-config/:planName', authenticateAdmin, async (req, res) => {
    try {
        const { planName } = req.params;
        
        const { createClient } = require('@supabase/supabase-js');
        let supabaseUrl = process.env.SUPABASE_URL;
        let supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_ANON_KEY;

        if (supabaseUrl && supabaseUrl.startsWith('eyJ') && process.env.SUPABASE_ANON_KEY && process.env.SUPABASE_ANON_KEY.startsWith('https://')) {
            const temp = supabaseUrl;
            supabaseUrl = process.env.SUPABASE_ANON_KEY;
            supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || temp;
        }
        
        const supabaseClient = createClient(supabaseUrl, supabaseKey);
        
        const { data: config, error } = await supabaseClient
            .from('vw_subscription_blocking_details')
            .select('*')
            .eq('plan_name', planName);
        
        if (error) {
            console.error('‚ùå Erro ao buscar configura√ß√£o:', error);
            return res.status(500).json({ error: 'Erro ao buscar configura√ß√£o' });
        }
        
        res.json(config || []);
    } catch (error) {
        console.error('‚ùå Erro ao buscar configura√ß√£o:', error);
        res.status(500).json({ error: 'Erro interno do servidor' });
    }
});

// Salvar configura√ß√£o de bloqueio de um plano
app.post('/api/admin/subscription-config/:planName', authenticateAdmin, async (req, res) => {
    try {
        const { planName } = req.params;
        const { config } = req.body;
        
        const { createClient } = require('@supabase/supabase-js');
        let supabaseUrl = process.env.SUPABASE_URL;
        let supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_ANON_KEY;

        if (supabaseUrl && supabaseUrl.startsWith('eyJ') && process.env.SUPABASE_ANON_KEY && process.env.SUPABASE_ANON_KEY.startsWith('https://')) {
            const temp = supabaseUrl;
            supabaseUrl = process.env.SUPABASE_ANON_KEY;
            supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || temp;
        }
        
        const supabaseClient = createClient(supabaseUrl, supabaseKey);
        
        // Buscar plan_id
        const { data: plan } = await supabaseClient
            .from('subscription_plans')
            .select('id')
            .eq('name', planName)
            .single();
        
        if (!plan) {
            return res.status(404).json({ error: 'Plano n√£o encontrado' });
        }
        
        // Processar cada elemento da configura√ß√£o
        for (const [elementHtmlId, elementConfig] of Object.entries(config)) {
            // Buscar element_id
            const { data: element } = await supabaseClient
                .from('blockable_elements')
                .select('id')
                .eq('element_id', elementHtmlId)
                .single();
            
            if (element) {
                // Upsert (insert or update) na tabela de configura√ß√£o
                await supabaseClient
                    .from('subscription_blocking_config')
                    .upsert({
                        plan_id: plan.id,
                        element_id: element.id,
                        block_after_days: parseInt(elementConfig.blockAfterDays),
                        is_blocked: elementConfig.blocked,
                        updated_at: new Date().toISOString()
                    }, {
                        onConflict: 'plan_id,element_id'
                    });
            }
        }
        
        // Registrar auditoria
        await supabaseClient
            .from('subscription_config_audit')
            .insert({
                action_type: 'update_blocking_config',
                plan_id: plan.id,
                new_value: config,
                changed_by: req.user.admin_id || null,
                ip_address: req.ip
            });
        
        console.log(`‚úÖ Configura√ß√£o do plano ${planName} salva por ${req.user.email}`);
        res.json({ success: true, message: 'Configura√ß√£o salva com sucesso' });
        
    } catch (error) {
        console.error('‚ùå Erro ao salvar configura√ß√£o:', error);
        res.status(500).json({ error: 'Erro interno do servidor', details: error.message });
    }
});

// Buscar configura√ß√£o Asaas
app.get('/api/admin/asaas-config', authenticateAdmin, async (req, res) => {
    try {
        const { createClient } = require('@supabase/supabase-js');
        let supabaseUrl = process.env.SUPABASE_URL;
        let supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_ANON_KEY;

        if (supabaseUrl && supabaseUrl.startsWith('eyJ') && process.env.SUPABASE_ANON_KEY && process.env.SUPABASE_ANON_KEY.startsWith('https://')) {
            const temp = supabaseUrl;
            supabaseUrl = process.env.SUPABASE_ANON_KEY;
            supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || temp;
        }
        
        const supabaseClient = createClient(supabaseUrl, supabaseKey);
        
        const { data: config, error } = await supabaseClient
            .from('asaas_config')
            .select('environment, webhook_url, active, config_data')
            .eq('active', true)
            .single();
        
        if (error && error.code !== 'PGRST116') {
            console.error('‚ùå Erro ao buscar config Asaas:', error);
            return res.status(500).json({ error: 'Erro ao buscar configura√ß√£o Asaas' });
        }
        
        res.json(config || { environment: 'sandbox', active: false });
    } catch (error) {
        console.error('‚ùå Erro ao buscar config Asaas:', error);
        res.status(500).json({ error: 'Erro interno do servidor' });
    }
});

// Salvar configura√ß√£o Asaas
app.post('/api/admin/asaas-config', authenticateAdmin, async (req, res) => {
    try {
        const { environment, api_key, webhook_url, active } = req.body;
        
        // Usar vari√°vel de ambiente se API key n√£o for fornecida
        const finalApiKey = api_key || process.env.ASAAS_API_KEY;
        
        if (!finalApiKey) {
            return res.status(400).json({ 
                error: 'API Key n√£o fornecida. Configure ASAAS_API_KEY nas vari√°veis de ambiente.' 
            });
        }
        
        const { createClient } = require('@supabase/supabase-js');
        let supabaseUrl = process.env.SUPABASE_URL;
        let supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_ANON_KEY;

        if (supabaseUrl && supabaseUrl.startsWith('eyJ') && process.env.SUPABASE_ANON_KEY && process.env.SUPABASE_ANON_KEY.startsWith('https://')) {
            const temp = supabaseUrl;
            supabaseUrl = process.env.SUPABASE_ANON_KEY;
            supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || temp;
        }
        
        const supabaseClient = createClient(supabaseUrl, supabaseKey);
        
        // Validar admin_id se existir (deve ser UUID v√°lido)
        let createdBy = null;
        if (req.user.admin_id) {
            // Regex para validar UUID
            const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
            if (uuidRegex.test(req.user.admin_id)) {
                createdBy = req.user.admin_id;
            }
        }
        
        // Upsert na tabela asaas_config
        const { error } = await supabaseClient
            .from('asaas_config')
            .upsert({
                environment: environment || 'sandbox',
                api_key_encrypted: finalApiKey,
                webhook_url: webhook_url,
                active: active !== undefined ? active : true,
                config_data: {
                    api_url: (environment || 'sandbox') === 'sandbox' 
                        ? 'https://sandbox.asaas.com/api/v3' 
                        : 'https://api.asaas.com/v3',
                    description: (environment || 'sandbox') === 'sandbox' 
                        ? 'Ambiente de testes com dados fict√≠cios' 
                        : 'Ambiente de produ√ß√£o com dados reais'
                },
                updated_at: new Date().toISOString(),
                created_by: createdBy
            }, {
                onConflict: 'environment'
            });
        
        if (error) {
            console.error('‚ùå Erro ao salvar config Asaas:', error);
            return res.status(500).json({ error: 'Erro ao salvar configura√ß√£o Asaas' });
        }
        
        console.log(`‚úÖ Configura√ß√£o Asaas (${environment || 'sandbox'}) salva por ${req.user.email}`);
        res.json({ success: true, message: 'Configura√ß√£o Asaas salva com sucesso' });
        
    } catch (error) {
        console.error('‚ùå Erro ao salvar config Asaas:', error);
        res.status(500).json({ error: 'Erro interno do servidor' });
    }
});

// Testar conex√£o Asaas
app.post('/api/admin/asaas-test', authenticateAdmin, async (req, res) => {
    try {
        const { environment, api_key } = req.body;
        
        const apiUrl = environment === 'sandbox' 
            ? 'https://sandbox.asaas.com/api/v3' 
            : 'https://api.asaas.com/v3';
        
        const response = await fetch(`${apiUrl}/customers?limit=1`, {
            headers: {
                'access_token': api_key,
                'Content-Type': 'application/json'
            }
        });
        
        if (response.ok) {
            res.json({ 
                success: true, 
                message: 'Conex√£o com Asaas estabelecida com sucesso!',
                environment: environment 
            });
        } else {
            const error = await response.text();
            res.status(400).json({ 
                success: false, 
                message: 'Falha na conex√£o com Asaas',
                error: error 
            });
        }
        
    } catch (error) {
        console.error('‚ùå Erro ao testar Asaas:', error);
        res.status(500).json({ 
            success: false,
            message: 'Erro ao testar conex√£o',
            error: error.message 
        });
    }
});

// ========== ENDPOINTS ASAAS CHECKOUT E ASSINATURAS ==========

// Obter configura√ß√£o Asaas ativa
app.get('/api/asaas/active-config', async (req, res) => {
    try {
        const { createClient } = require('@supabase/supabase-js');
        let supabaseUrl = process.env.SUPABASE_URL;
        let supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_ANON_KEY;

        if (supabaseUrl && supabaseUrl.startsWith('eyJ') && process.env.SUPABASE_ANON_KEY && process.env.SUPABASE_ANON_KEY.startsWith('https://')) {
            const temp = supabaseUrl;
            supabaseUrl = process.env.SUPABASE_ANON_KEY;
            supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || temp;
        }
        
        const supabaseClient = createClient(supabaseUrl, supabaseKey);
        
        const { data: config, error } = await supabaseClient
            .from('asaas_config')
            .select('*')
            .eq('active', true)
            .single();
        
        if (error && error.code !== 'PGRST116') {
            console.error('‚ùå Erro ao buscar config Asaas ativa:', error);
            return res.status(500).json({ error: 'Erro ao buscar configura√ß√£o ativa' });
        }
        
        if (!config) {
            return res.status(404).json({ error: 'Nenhuma configura√ß√£o Asaas ativa encontrada' });
        }
        
        // N√£o retornar a API key para o frontend
        const { api_key_encrypted, ...safeConfig } = config;
        res.json(safeConfig);
        
    } catch (error) {
        console.error('‚ùå Erro ao buscar config Asaas ativa:', error);
        res.status(500).json({ error: 'Erro interno do servidor' });
    }
});

// Criar cliente no Asaas
app.post('/api/asaas/create-customer', async (req, res) => {
    try {
        const { restaurantId } = req.body;
        
        if (!restaurantId) {
            return res.status(400).json({ error: 'restaurantId √© obrigat√≥rio' });
        }
        
        const { createClient } = require('@supabase/supabase-js');
        let supabaseUrl = process.env.SUPABASE_URL;
        let supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_ANON_KEY;

        if (supabaseUrl && supabaseUrl.startsWith('eyJ') && process.env.SUPABASE_ANON_KEY && process.env.SUPABASE_ANON_KEY.startsWith('https://')) {
            const temp = supabaseUrl;
            supabaseUrl = process.env.SUPABASE_ANON_KEY;
            supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || temp;
        }
        
        const supabaseClient = createClient(supabaseUrl, supabaseKey);
        
        // Buscar dados do restaurante do Supabase
        const { data: restaurant, error: restaurantError } = await supabaseClient
            .from('restaurants')
            .select('*')
            .eq('id', restaurantId)
            .single();
        
        if (restaurantError || !restaurant) {
            console.error('‚ùå Erro ao buscar restaurante:', restaurantError);
            return res.status(404).json({ error: 'Restaurante n√£o encontrado' });
        }
        
        console.log('üìä Dados do restaurante encontrados:', {
            id: restaurant.id,
            name: restaurant.name,
            owner_name: restaurant.owner_name,
            owner_email: restaurant.owner_email,
            owner_cpf: restaurant.owner_cpf,
            owner_phone: restaurant.owner_phone
        });
        
        // Buscar configura√ß√£o Asaas ativa
        const { data: config, error: configError } = await supabaseClient
            .from('asaas_config')
            .select('*')
            .eq('active', true)
            .single();
        
        if (configError || !config || !config.api_key_encrypted) {
            console.error('‚ùå Erro ao buscar config Asaas:', configError);
            return res.status(400).json({ error: 'Configura√ß√£o Asaas n√£o encontrada ou API key ausente' });
        }
        
        console.log('üîß Configura√ß√£o Asaas encontrada:', {
            environment: config.environment,
            api_url: config.config_data?.api_url,
            hasApiKey: !!config.api_key_encrypted
        });
        
        // Preparar dados do cliente para Asaas
        const cleanCpf = restaurant.owner_cpf?.replace(/\D/g, '');
        const cleanPhone = restaurant.owner_phone?.replace(/\D/g, '');
        
        const customerData = {
            name: restaurant.owner_name || restaurant.name,
            externalReference: `restaurant_${restaurantId}`
        };
        
        // Adicionar campos opcionais apenas se v√°lidos
        if (restaurant.owner_email && restaurant.owner_email.includes('@')) {
            customerData.email = restaurant.owner_email;
        }
        
        // CPF/CNPJ deve ter 11 (CPF) ou 14 (CNPJ) d√≠gitos
        if (cleanCpf && (cleanCpf.length === 11 || cleanCpf.length === 14)) {
            customerData.cpfCnpj = cleanCpf;
        }
        
        // Telefone brasileiro deve ter 10 ou 11 d√≠gitos
        if (cleanPhone && (cleanPhone.length === 10 || cleanPhone.length === 11)) {
            customerData.phone = cleanPhone;
            customerData.mobilePhone = cleanPhone;
        }
        
        console.log('üìã Dados do cliente para Asaas:', {
            name: customerData.name,
            email: customerData.email || 'n√£o informado',
            cpfCnpj: customerData.cpfCnpj ? `***${customerData.cpfCnpj.slice(-3)}` : 'n√£o informado',
            phone: customerData.phone ? `***${customerData.phone.slice(-4)}` : 'n√£o informado'
        });
        
        // Criar cliente no Asaas
        const apiUrl = config.config_data.api_url;
        const response = await fetch(`${apiUrl}/customers`, {
            method: 'POST',
            headers: {
                'access_token': config.api_key_encrypted,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(customerData)
        });
        
        const responseText = await response.text();
        let data;
        
        try {
            data = JSON.parse(responseText);
        } catch (e) {
            console.error('‚ùå Erro ao fazer parse da resposta Asaas:', responseText);
            return res.status(500).json({ 
                error: 'Erro na resposta da API Asaas', 
                details: responseText.substring(0, 200) 
            });
        }
        
        if (!response.ok) {
            console.error('‚ùå Erro ao criar cliente no Asaas:', {
                status: response.status,
                statusText: response.statusText,
                data: data
            });
            return res.status(400).json({ 
                error: data.errors?.[0]?.description || data.message || 'Erro ao criar cliente no Asaas',
                details: data
            });
        }
        
        // Salvar customer_id no restaurante (se campo existir)
        const { error: updateError } = await supabaseClient
            .from('restaurants')
            .update({ 
                updated_at: new Date().toISOString()
            })
            .eq('id', restaurantId);
        
        if (updateError) {
            console.warn('‚ö†Ô∏è Aviso ao atualizar restaurante:', updateError);
        }
        
        console.log(`‚úÖ Cliente criado no Asaas: ${data.id} para restaurante ${restaurantId}`);
        res.json({ success: true, customer: data });
        
    } catch (error) {
        console.error('‚ùå Erro ao criar cliente no Asaas:', error);
        res.status(500).json({ error: 'Erro interno do servidor', message: error.message });
    }
});

// Criar assinatura no Asaas
app.post('/api/asaas/create-subscription', async (req, res) => {
    try {
        const { customerId, planId, value, cycle } = req.body;
        
        const { createClient } = require('@supabase/supabase-js');
        let supabaseUrl = process.env.SUPABASE_URL;
        let supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_ANON_KEY;

        if (supabaseUrl && supabaseUrl.startsWith('eyJ') && process.env.SUPABASE_ANON_KEY && process.env.SUPABASE_ANON_KEY.startsWith('https://')) {
            const temp = supabaseUrl;
            supabaseUrl = process.env.SUPABASE_ANON_KEY;
            supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || temp;
        }
        
        const supabaseClient = createClient(supabaseUrl, supabaseKey);
        
        // Buscar configura√ß√£o ativa
        const { data: config } = await supabaseClient
            .from('asaas_config')
            .select('*')
            .eq('active', true)
            .single();
        
        if (!config || !config.api_key_encrypted) {
            return res.status(400).json({ error: 'Configura√ß√£o Asaas n√£o encontrada' });
        }
        
        // Criar assinatura no Asaas
        const apiUrl = config.config_data.api_url;
        const response = await fetch(`${apiUrl}/subscriptions`, {
            method: 'POST',
            headers: {
                'access_token': config.api_key_encrypted,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                customer: customerId,
                billingType: 'UNDEFINED', // Cliente escolhe na hora do pagamento
                value: value,
                nextDueDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0], // 30 dias
                cycle: cycle || 'MONTHLY',
                description: `Assinatura ${planId}`
            })
        });
        
        const data = await response.json();
        
        if (!response.ok) {
            console.error('‚ùå Erro ao criar assinatura no Asaas:', data);
            return res.status(400).json({ error: data.errors || 'Erro ao criar assinatura' });
        }
        
        console.log(`‚úÖ Assinatura criada no Asaas: ${data.id}`);
        res.json({ success: true, subscription: data });
        
    } catch (error) {
        console.error('‚ùå Erro ao criar assinatura:', error);
        res.status(500).json({ error: 'Erro interno do servidor' });
    }
});

// Criar checkout transparente
app.post('/api/asaas/create-checkout', async (req, res) => {
    try {
        const { paymentId, planName, value } = req.body;
        
        const { createClient } = require('@supabase/supabase-js');
        let supabaseUrl = process.env.SUPABASE_URL;
        let supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_ANON_KEY;

        if (supabaseUrl && supabaseUrl.startsWith('eyJ') && process.env.SUPABASE_ANON_KEY && process.env.SUPABASE_ANON_KEY.startsWith('https://')) {
            const temp = supabaseUrl;
            supabaseUrl = process.env.SUPABASE_ANON_KEY;
            supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || temp;
        }
        
        const supabaseClient = createClient(supabaseUrl, supabaseKey);
        
        // Buscar configura√ß√£o ativa e m√©todos de pagamento
        const { data: config } = await supabaseClient
            .from('asaas_config')
            .select('*')
            .eq('active', true)
            .single();
        
        if (!config || !config.api_key_encrypted) {
            return res.status(400).json({ error: 'Configura√ß√£o Asaas n√£o encontrada' });
        }
        
        // Determinar m√©todos de pagamento habilitados
        const checkoutMethods = config.config_data.checkout_methods || {
            credit_card: true,
            pix: true,
            boleto: true
        };
        
        const billingTypes = [];
        if (checkoutMethods.credit_card) billingTypes.push('CREDIT_CARD');
        if (checkoutMethods.pix) billingTypes.push('PIX');
        if (checkoutMethods.boleto) billingTypes.push('BOLETO');
        
        // Criar checkout no Asaas
        const apiUrl = config.config_data.api_url;
        const response = await fetch(`${apiUrl}/payments/${paymentId}/checkout`, {
            method: 'POST',
            headers: {
                'access_token': config.api_key_encrypted,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                billingTypes: billingTypes,
                successUrl: `${req.protocol}://${req.get('host')}/assinaturas.html?payment=success`,
                cancelUrl: `${req.protocol}://${req.get('host')}/assinaturas.html?payment=cancel`
            })
        });
        
        const data = await response.json();
        
        if (!response.ok) {
            console.error('‚ùå Erro ao criar checkout:', data);
            return res.status(400).json({ error: data.errors || 'Erro ao criar checkout' });
        }
        
        console.log(`‚úÖ Checkout criado para pagamento: ${paymentId}`);
        res.json({ success: true, checkout: data });
        
    } catch (error) {
        console.error('‚ùå Erro ao criar checkout:', error);
        res.status(500).json({ error: 'Erro interno do servidor' });
    }
});

// Listar hist√≥rico de cobran√ßas
app.get('/api/asaas/billing-history/:restaurantId', async (req, res) => {
    try {
        const { restaurantId } = req.params;
        
        const { createClient } = require('@supabase/supabase-js');
        let supabaseUrl = process.env.SUPABASE_URL;
        let supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_ANON_KEY;

        if (supabaseUrl && supabaseUrl.startsWith('eyJ') && process.env.SUPABASE_ANON_KEY && process.env.SUPABASE_ANON_KEY.startsWith('https://')) {
            const temp = supabaseUrl;
            supabaseUrl = process.env.SUPABASE_ANON_KEY;
            supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || temp;
        }
        
        const supabaseClient = createClient(supabaseUrl, supabaseKey);
        
        // Buscar customer_id do restaurante
        const { data: restaurant } = await supabaseClient
            .from('restaurants')
            .select('asaas_customer_id')
            .eq('id', restaurantId)
            .single();
        
        if (!restaurant || !restaurant.asaas_customer_id) {
            return res.json({ payments: [] }); // Retorna vazio se n√£o tiver customer
        }
        
        // Buscar configura√ß√£o ativa
        const { data: config } = await supabaseClient
            .from('asaas_config')
            .select('*')
            .eq('active', true)
            .single();
        
        if (!config || !config.api_key_encrypted) {
            return res.status(400).json({ error: 'Configura√ß√£o Asaas n√£o encontrada' });
        }
        
        // Buscar pagamentos do cliente no Asaas
        const apiUrl = config.config_data.api_url;
        const response = await fetch(`${apiUrl}/payments?customer=${restaurant.asaas_customer_id}&limit=50`, {
            headers: {
                'access_token': config.api_key_encrypted,
                'Content-Type': 'application/json'
            }
        });
        
        const data = await response.json();
        
        if (!response.ok) {
            console.error('‚ùå Erro ao buscar pagamentos:', data);
            return res.status(400).json({ error: 'Erro ao buscar hist√≥rico' });
        }
        
        console.log(`‚úÖ Hist√≥rico de ${data.data?.length || 0} pagamentos carregado para restaurante ${restaurantId}`);
        res.json({ payments: data.data || [] });
        
    } catch (error) {
        console.error('‚ùå Erro ao buscar hist√≥rico:', error);
        res.status(500).json({ error: 'Erro interno do servidor' });
    }
});

// Salvar configura√ß√£o de checkout transparente
app.post('/api/admin/checkout-config', authenticateAdmin, async (req, res) => {
    try {
        const { credit_card, pix, boleto } = req.body;
        
        const { createClient } = require('@supabase/supabase-js');
        let supabaseUrl = process.env.SUPABASE_URL;
        let supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_ANON_KEY;

        if (supabaseUrl && supabaseUrl.startsWith('eyJ') && process.env.SUPABASE_ANON_KEY && process.env.SUPABASE_ANON_KEY.startsWith('https://')) {
            const temp = supabaseUrl;
            supabaseUrl = process.env.SUPABASE_ANON_KEY;
            supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || temp;
        }
        
        const supabaseClient = createClient(supabaseUrl, supabaseKey);
        
        // Upsert na tabela asaas_config para incluir checkout config
        const { data: existingConfig, error: fetchError } = await supabaseClient
            .from('asaas_config')
            .select('*')
            .limit(1)
            .single();
        
        const checkoutConfig = {
            credit_card: credit_card !== false,
            pix: pix !== false,
            boleto: boleto !== false
        };
        
        const configData = existingConfig?.config_data || {};
        configData.checkout_methods = checkoutConfig;
        
        const { error } = await supabaseClient
            .from('asaas_config')
            .upsert({
                environment: existingConfig?.environment || 'sandbox',
                api_key_encrypted: existingConfig?.api_key_encrypted || null,
                webhook_url: existingConfig?.webhook_url || null,
                active: existingConfig?.active || false,
                config_data: configData,
                updated_at: new Date().toISOString(),
                created_by: req.user.admin_id || null
            }, {
                onConflict: 'environment'
            });
        
        if (error) {
            console.error('‚ùå Erro ao salvar checkout config:', error);
            return res.status(500).json({ error: 'Erro ao salvar configura√ß√£o de checkout' });
        }
        
        console.log(`‚úÖ Configura√ß√£o de checkout salva por ${req.user.email}:`, checkoutConfig);
        res.json({ success: true, message: 'Configura√ß√£o de checkout salva com sucesso', config: checkoutConfig });
        
    } catch (error) {
        console.error('‚ùå Erro ao salvar checkout config:', error);
        res.status(500).json({ error: 'Erro interno do servidor' });
    }
});

// Buscar configura√ß√£o de checkout transparente
app.get('/api/admin/checkout-config', authenticateAdmin, async (req, res) => {
    try {
        const { createClient } = require('@supabase/supabase-js');
        let supabaseUrl = process.env.SUPABASE_URL;
        let supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_ANON_KEY;

        if (supabaseUrl && supabaseUrl.startsWith('eyJ') && process.env.SUPABASE_ANON_KEY && process.env.SUPABASE_ANON_KEY.startsWith('https://')) {
            const temp = supabaseUrl;
            supabaseUrl = process.env.SUPABASE_ANON_KEY;
            supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || temp;
        }
        
        const supabaseClient = createClient(supabaseUrl, supabaseKey);
        
        const { data: config, error } = await supabaseClient
            .from('asaas_config')
            .select('config_data')
            .limit(1)
            .single();
        
        if (error && error.code !== 'PGRST116') {
            console.error('‚ùå Erro ao buscar checkout config:', error);
            return res.status(500).json({ error: 'Erro ao buscar configura√ß√£o' });
        }
        
        const checkoutConfig = config?.config_data?.checkout_methods || {
            credit_card: true,
            pix: true,
            boleto: true
        };
        
        res.json(checkoutConfig);
    } catch (error) {
        console.error('‚ùå Erro ao buscar checkout config:', error);
        res.status(500).json({ error: 'Erro interno do servidor' });
    }
});

console.log('‚öôÔ∏è Endpoints de configura√ß√£o de assinatura configurados');
console.log('üõí Endpoints de checkout transparente configurados');

// =================================================================
// ENDPOINT P√öBLICO - BUSCAR PLANOS DE ASSINATURA ATIVOS
// =================================================================

// Endpoint p√∫blico para restaurantes visualizarem os planos dispon√≠veis
app.get('/api/subscription-plans', async (req, res) => {
    try {
        const { createClient } = require('@supabase/supabase-js');
        let supabaseUrl = process.env.SUPABASE_URL;
        let supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_ANON_KEY;

        if (supabaseUrl && supabaseUrl.startsWith('eyJ') && process.env.SUPABASE_ANON_KEY && process.env.SUPABASE_ANON_KEY.startsWith('https://')) {
            const temp = supabaseUrl;
            supabaseUrl = process.env.SUPABASE_ANON_KEY;
            supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || temp;
        }
        
        const supabaseClient = createClient(supabaseUrl, supabaseKey);
        
        // Buscar apenas planos ativos (active = true)
        const { data: plans, error } = await supabaseClient
            .from('subscription_plans')
            .select('*')
            .eq('active', true)
            .order('price', { ascending: true });
        
        if (error) {
            console.error('‚ùå Erro ao buscar planos:', error);
            return res.status(500).json({ error: 'Erro ao buscar planos' });
        }
        
        console.log(`‚úÖ ${plans?.length || 0} planos ativos retornados`);
        res.json(plans || []);
    } catch (error) {
        console.error('‚ùå Erro ao buscar planos:', error);
        res.status(500).json({ error: 'Erro interno do servidor' });
    }
});

// =================================================================
// ENDPOINT P√öBLICO - BUSCAR CONFIGURA√á√ïES DE BLOQUEIO POR RESTAURANTE
// =================================================================

// Buscar configura√ß√µes de bloqueio para aplicar no dashboard
app.get('/api/blocking-config', async (req, res) => {
    try {
        const { restaurantId } = req.query;
        
        if (!restaurantId) {
            return res.status(400).json({ error: 'restaurantId √© obrigat√≥rio' });
        }
        
        // Criar cliente Supabase
        const { createClient } = require('@supabase/supabase-js');
        let supabaseUrl = process.env.SUPABASE_URL;
        let supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_ANON_KEY;

        if (supabaseUrl && supabaseUrl.startsWith('eyJ') && process.env.SUPABASE_ANON_KEY && process.env.SUPABASE_ANON_KEY.startsWith('https://')) {
            const temp = supabaseUrl;
            supabaseUrl = process.env.SUPABASE_ANON_KEY;
            supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || temp;
        }
        
        if (!supabaseUrl || !supabaseKey) {
            return res.status(500).json({ error: 'Configura√ß√£o do Supabase incompleta' });
        }
        
        const supabaseClient = createClient(supabaseUrl, supabaseKey);
        
        // Buscar restaurante no Supabase (dados reais do usu√°rio)
        const { data: restaurant, error: supabaseError } = await supabaseClient
            .from('restaurants')
            .select('id, plan, subscription_status, trial_start_date, trial_end_date')
            .eq('id', restaurantId)
            .single();
        
        if (supabaseError || !restaurant) {
            console.log('‚ùå Restaurante n√£o encontrado no Supabase:', restaurantId);
            return res.status(404).json({ error: 'Restaurante n√£o encontrado' });
        }
        
        console.log('‚úÖ Restaurante encontrado:', restaurant.id, 'Status:', restaurant.subscription_status);
        
        // Usar subscription_status para definir qual plano de bloqueio aplicar
        // Se est√° em trial, usar configura√ß√µes de trial, sen√£o usar o plano atual
        const blockingPlan = restaurant.subscription_status === 'trial' ? 'trial' : (restaurant.plan || 'trial');
        
        console.log('üîí Aplicando configura√ß√µes de bloqueio do plano:', blockingPlan);
        
        // Buscar configura√ß√µes de bloqueio do plano usando a view
        const configQuery = `
            SELECT element_id, element_name, page, is_blocked, block_after_days
            FROM public.vw_subscription_blocking_details
            WHERE plan_name = $1
            ORDER BY page, element_name
        `;
        
        const configResult = await devPool.query(configQuery, [blockingPlan]);
        
        // Formatar resposta para o frontend
        const response = {
            restaurant_id: restaurant.id,
            plan: restaurant.plan || 'trial',
            subscription_status: restaurant.subscription_status,
            trial_start_date: restaurant.trial_start_date,
            trial_end_date: restaurant.trial_end_date,
            blocking_config: configResult.rows
        };
        
        res.json(response);
        
    } catch (error) {
        console.error('‚ùå Erro ao buscar configura√ß√£o de bloqueio:', error);
        res.status(500).json({ error: 'Erro interno do servidor', details: error.message });
    }
});

console.log('üîí Endpoint de bloqueio din√¢mico configurado');

// =================================================================
// ENDPOINTS INTEGRA√á√ÉO ASAAS
// =================================================================

// Criar nova assinatura no Asaas
app.post('/api/asaas/create-subscription', async (req, res) => {
    try {
        const { plan, restaurantId, customerEmail, restaurantName } = req.body;
        
        console.log(`üí≥ Criando assinatura ${plan} para restaurante ${restaurantId}`);

        // Validar dados de entrada
        if (!plan || !restaurantId || !customerEmail) {
            return res.status(400).json({ 
                success: false, 
                error: 'Dados obrigat√≥rios: plan, restaurantId, customerEmail' 
            });
        }

        // Configura√ß√µes dos planos
        const planConfigs = {
            premium: {
                value: 49.00,
                cycle: 'MONTHLY',
                description: 'Plano Premium TimePulse AI'
            },
            enterprise: {
                value: 99.00,
                cycle: 'MONTHLY', 
                description: 'Plano Empresarial TimePulse AI'
            }
        };

        const planConfig = planConfigs[plan];
        if (!planConfig) {
            return res.status(400).json({ 
                success: false, 
                error: 'Plano inv√°lido' 
            });
        }

        // Simular resposta da API Asaas
        // TODO: Implementar integra√ß√£o real com Asaas API
        const mockAsaasResponse = {
            success: true,
            subscriptionId: 'sub_' + Date.now(),
            checkoutUrl: 'https://checkout.asaas.com/c/' + Date.now(),
            customer: {
                id: 'cus_' + Date.now(),
                email: customerEmail
            }
        };

        console.log('‚úÖ Assinatura criada com sucesso (simulada)');
        res.json(mockAsaasResponse);

    } catch (error) {
        console.error('‚ùå Erro ao criar assinatura:', error);
        res.status(500).json({ 
            success: false, 
            error: 'Erro interno do servidor' 
        });
    }
});

// Buscar hist√≥rico de cobran√ßa
app.get('/api/asaas/billing-history/:restaurantId', async (req, res) => {
    try {
        const { restaurantId } = req.params;
        
        console.log(`üìÑ Buscando hist√≥rico de cobran√ßa para ${restaurantId}`);

        // Simular dados de hist√≥rico
        // TODO: Implementar consulta real na API Asaas
        const mockInvoices = [
            {
                date: '2025-09-01T00:00:00Z',
                description: 'Plano Premium - Setembro 2025',
                amount: 49.00,
                status: 'paid',
                invoiceUrl: 'https://asaas.com/invoice/123'
            }
        ];

        res.json({ 
            success: true, 
            invoices: mockInvoices 
        });

    } catch (error) {
        console.error('‚ùå Erro ao buscar hist√≥rico:', error);
        res.status(500).json({ 
            success: false, 
            error: 'Erro interno do servidor' 
        });
    }
});

// Cancelar assinatura
app.post('/api/asaas/cancel-subscription', async (req, res) => {
    try {
        const { restaurantId } = req.body;
        
        console.log(`‚ùå Cancelando assinatura para restaurante ${restaurantId}`);

        // TODO: Implementar cancelamento real na API Asaas
        // 1. Buscar subscription_id do restaurante no banco
        // 2. Fazer chamada para API Asaas para cancelar
        // 3. Atualizar status no banco de dados

        res.json({ 
            success: true, 
            message: 'Assinatura cancelada com sucesso' 
        });

    } catch (error) {
        console.error('‚ùå Erro ao cancelar assinatura:', error);
        res.status(500).json({ 
            success: false, 
            error: 'Erro interno do servidor' 
        });
    }
});

// Webhook para receber notifica√ß√µes do Asaas
// Real Subscription State Endpoint
app.get('/api/me/subscription-state', authenticateJWT, async (req, res) => {
    try {
        console.log('üîç Checking subscription state for user:', req.session.userEmail);
        
        const userId = req.session?.restaurantId || req.session?.userEmail;
        if (!userId) {
            return res.status(401).json({ 
                error: 'Usu√°rio n√£o identificado',
                authenticated: false
            });
        }
        
        // Get real subscription status
        const subscriptionData = await checkUserSubscription(userId);
        
        // Calculate trial days remaining
        let trialDaysRemaining = 0;
        if (subscriptionData.status === 'trial' && subscriptionData.subscription_end_date) {
            const now = new Date();
            const endDate = new Date(subscriptionData.subscription_end_date);
            const diffTime = endDate - now;
            trialDaysRemaining = Math.max(0, Math.ceil(diffTime / (1000 * 60 * 60 * 24)));
        }
        
        const response = {
            authenticated: true,
            subscription_status: subscriptionData.status,
            is_active: subscriptionData.active,
            is_trial: subscriptionData.status === 'trial',
            trial_expired: subscriptionData.trial_expired,
            trial_days_remaining: trialDaysRemaining,
            subscription_end_date: subscriptionData.subscription_end_date,
            plan: subscriptionData.plan || 'basic',
            features_enabled: {
                whatsapp_integration: subscriptionData.active,
                evolution_api: subscriptionData.active,
                premium_support: subscriptionData.active && subscriptionData.plan !== 'basic',
                advanced_analytics: subscriptionData.active && subscriptionData.plan === 'premium'
            },
            timestamp: new Date().toISOString()
        };
        
        console.log(`‚úÖ Subscription state for ${userId}:`, {
            status: response.subscription_status,
            active: response.is_active,
            trial_days: response.trial_days_remaining
        });
        
        res.json(response);
        
    } catch (error) {
        console.error('‚ùå Error checking subscription state:', error);
        res.status(500).json({ 
            error: 'Erro ao verificar status da assinatura',
            details: error.message,
            authenticated: true
        });
    }
});

// Create or update subscription session
app.post('/api/subscription-session', async (req, res) => {
    try {
        const { instance_id, restaurant_id, plan_name, plan_display_name, plan_price, pix_payload, invoice_number, session_data } = req.body;
        
        console.log('üíæ Salvando sess√£o de assinatura:', { instance_id, plan_name });
        
        const { createClient } = require('@supabase/supabase-js');
        let supabaseUrl = process.env.SUPABASE_URL;
        let supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_ANON_KEY;

        if (supabaseUrl && supabaseUrl.startsWith('eyJ') && process.env.SUPABASE_ANON_KEY && process.env.SUPABASE_ANON_KEY.startsWith('https://')) {
            const temp = supabaseUrl;
            supabaseUrl = process.env.SUPABASE_ANON_KEY;
            supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || temp;
        }
        
        const supabaseClient = createClient(supabaseUrl, supabaseKey);
        
        // Upsert (insert ou update) a sess√£o
        const { data, error } = await supabaseClient
            .from('subscription_sessions')
            .upsert({
                instance_id,
                restaurant_id,
                plan_name,
                plan_display_name,
                plan_price,
                pix_payload,
                invoice_number,
                session_data,
                updated_at: new Date().toISOString()
            }, {
                onConflict: 'instance_id'
            })
            .select()
            .single();
        
        if (error) {
            console.error('‚ùå Erro ao salvar sess√£o:', error);
            return res.status(500).json({ 
                error: 'Erro ao salvar sess√£o',
                details: error.message
            });
        }
        
        console.log('‚úÖ Sess√£o salva com sucesso:', data.id);
        res.json({ success: true, session: data });
        
    } catch (error) {
        console.error('‚ùå Erro ao salvar sess√£o de assinatura:', error);
        res.status(500).json({ 
            error: 'Erro interno do servidor',
            details: error.message
        });
    }
});

// Get subscription session data by instance ID
app.get('/api/subscription-session/:instanceId', async (req, res) => {
    try {
        const { instanceId } = req.params;
        
        console.log('üîç Buscando sess√£o de assinatura para inst√¢ncia:', instanceId);
        
        // Buscar sess√£o no banco de dados
        const { createClient } = require('@supabase/supabase-js');
        let supabaseUrl = process.env.SUPABASE_URL;
        let supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_ANON_KEY;

        if (supabaseUrl && supabaseUrl.startsWith('eyJ') && process.env.SUPABASE_ANON_KEY && process.env.SUPABASE_ANON_KEY.startsWith('https://')) {
            const temp = supabaseUrl;
            supabaseUrl = process.env.SUPABASE_ANON_KEY;
            supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || temp;
        }
        
        const supabaseClient = createClient(supabaseUrl, supabaseKey);
        
        const { data: session, error } = await supabaseClient
            .from('subscription_sessions')
            .select('*')
            .eq('instance_id', instanceId)
            .order('created_at', { ascending: false })
            .limit(1)
            .single();
        
        if (error || !session) {
            console.log('‚ùå Sess√£o n√£o encontrada:', error?.message || 'Sem dados');
            return res.status(404).json({ 
                error: 'Sess√£o de assinatura n√£o encontrada',
                instanceId: instanceId
            });
        }
        
        // Buscar dados do restaurante se dispon√≠vel
        let restaurantData = null;
        if (session.restaurant_id) {
            const { data: restaurant } = await supabaseClient
                .from('restaurants')
                .select('*')
                .eq('id', session.restaurant_id)
                .single();
            
            restaurantData = restaurant;
        }
        
        console.log('‚úÖ Sess√£o encontrada:', {
            instance_id: session.instance_id,
            plan: session.plan_name,
            restaurant: restaurantData?.name || 'N/A'
        });
        
        res.json({
            session: session,
            restaurant: restaurantData
        });
        
    } catch (error) {
        console.error('‚ùå Erro ao buscar sess√£o de assinatura:', error);
        res.status(500).json({ 
            error: 'Erro interno do servidor',
            details: error.message
        });
    }
});

app.post('/api/asaas/webhook', express.raw({ type: 'application/json' }), validateAsaasWebhook, async (req, res) => {
    try {
        console.log('üì¢ Webhook Asaas recebido e validado com sucesso');
        
        const event = JSON.parse(req.body.toString());
        const eventType = event.event;
        const payment = event.payment;
        
        console.log(`üéØ Processando evento: ${eventType}`, {
            payment_id: payment?.id,
            customer_id: payment?.customer,
            status: payment?.status,
            value: payment?.value
        });
        
        // Process different webhook events
        switch (eventType) {
            case 'PAYMENT_RECEIVED':
            case 'PAYMENT_CONFIRMED':
                await handlePaymentConfirmed(payment);
                break;
                
            case 'PAYMENT_OVERDUE':
            case 'PAYMENT_DELETED':
                await handlePaymentFailed(payment);
                break;
                
            case 'PAYMENT_REFUNDED':
                await handlePaymentRefunded(payment);
                break;
                
            default:
                console.log(`‚ÑπÔ∏è Evento n√£o processado: ${eventType}`);
        }
        
        res.status(200).send('OK');
        
    } catch (error) {
        console.error('‚ùå Erro ao processar webhook Asaas:', error);
        res.status(500).send('Erro no processamento');
    }
});

// Webhook event handlers
async function handlePaymentConfirmed(payment) {
    try {
        console.log(`‚úÖ Pagamento confirmado: ${payment.id}`);
        
        // TODO: Update subscription status in PostgreSQL
        // UPDATE restaurants SET subscription_status = 'active', 
        //                      subscription_end_date = DATE_ADD(NOW(), INTERVAL 1 MONTH)
        // WHERE asaas_customer_id = payment.customer
        
        // For now, log the event
        console.log(`üí≥ Ativando assinatura para customer ${payment.customer}`);
        
    } catch (error) {
        console.error('‚ùå Erro ao processar pagamento confirmado:', error);
    }
}

async function handlePaymentFailed(payment) {
    try {
        console.log(`‚ùå Pagamento falhou: ${payment.id}`);
        
        // TODO: Update subscription status in PostgreSQL
        // UPDATE restaurants SET subscription_status = 'overdue' 
        // WHERE asaas_customer_id = payment.customer
        
        console.log(`‚ö†Ô∏è Suspendendo assinatura para customer ${payment.customer}`);
        
    } catch (error) {
        console.error('‚ùå Erro ao processar falha de pagamento:', error);
    }
}

async function handlePaymentRefunded(payment) {
    try {
        console.log(`üîÑ Pagamento reembolsado: ${payment.id}`);
        
        // TODO: Update subscription status in PostgreSQL
        // UPDATE restaurants SET subscription_status = 'cancelled',
        //                      subscription_end_date = NOW()
        // WHERE asaas_customer_id = payment.customer
        
        console.log(`‚ùå Cancelando assinatura para customer ${payment.customer}`);
        
    } catch (error) {
        console.error('‚ùå Erro ao processar reembolso:', error);
    }
}

// =================================================================
// ENDPOINTS ASSISTENTE VIRTUAL ANA
// =================================================================

// Endpoint para chat com GPT-5-mini (com integra√ß√£o MCP e hist√≥rico do banco)
app.post('/api/assistant/chat', authenticateEvolutionAPI, rateLimitEvolutionAPI(30, 60000), async (req, res) => {
    try {
        const { messages, model, reasoning_effort, max_completion_tokens, temperature, restaurant_id, session_id } = req.body;

        // Verificar se o usu√°rio tem acesso a este restaurante
        if (restaurant_id && req.session.restaurantId !== restaurant_id) {
            console.log(`‚ùå Acesso negado: Usu√°rio ${req.session.userEmail} tentou usar chat para restaurante ${restaurant_id}, mas est√° autenticado para ${req.session.restaurantId}`);
            return res.status(403).json({
                error: "Acesso n√£o autorizado",
                details: "Voc√™ n√£o tem permiss√£o para usar o assistente para este restaurante"
            });
        }
        
        if (!messages || !Array.isArray(messages)) {
            return res.status(400).json({ error: 'Mensagens s√£o obrigat√≥rias' });
        }

        const apiKey = process.env.OPENAI_API_KEY;
        if (!apiKey) {
            console.error('‚ùå OPENAI_API_KEY n√£o configurada');
            return res.status(500).json({ error: 'Configura√ß√£o da OpenAI API n√£o encontrada' });
        }

        console.log(`ü§ñ Ana processando mensagem para restaurante ${restaurant_id}`);

        // üìö CARREGAR HIST√ìRICO DO BANCO DE DADOS
        let chatHistory = [];
        if (session_id) {
            chatHistory = await loadChatHistory(session_id);
            console.log(`üìö Hist√≥rico carregado do banco: ${chatHistory.length} mensagens para session ${session_id}`);
        }

        // üë§ BUSCAR DADOS DO CLIENTE ANTES DE PROCESSAR (RECONHECIMENTO)
        let customerData = null;
        if (session_id && restaurant_id) {
            try {
                // Extrair telefone do session_id (ex: 5513991292600@s.whatsapp.net -> 5513991292600)
                const phoneNumber = session_id.replace('@s.whatsapp.net', '').replace('@c.us', '');
                console.log(`üë§ Buscando cliente com telefone extra√≠do: ${phoneNumber.substring(0, 4)}****${phoneNumber.slice(-4)}`);
                
                // Buscar cliente usando fun√ß√£o MCP
                const customerResult = await executeSupabaseQuery('customers_data', { 
                    phone: phoneNumber,
                    restaurant_id: restaurant_id 
                });
                
                if (customerResult && customerResult.data && customerResult.data.length > 0) {
                    customerData = customerResult.data[0];
                    console.log(`‚úÖ Cliente RECONHECIDO: ${customerData.name} (${customerData.phone})`);
                    console.log(`üìç Endere√ßo: ${customerData.address || 'n√£o cadastrado'}`);
                } else {
                    console.log(`‚ÑπÔ∏è Cliente n√£o encontrado no banco (novo cliente)`);
                }
            } catch (customerError) {
                console.error('‚ö†Ô∏è Erro ao buscar cliente:', customerError.message);
                // Continuar sem dados do cliente
            }
        }

        // Combinar hist√≥rico do banco com mensagem do system prompt
        const systemMessage = messages.find(m => m.role === 'system');
        const userMessages = messages.filter(m => m.role !== 'system');
        
        // Construir array de mensagens: system + hist√≥rico do banco + mensagens novas
        let allMessages = [];
        if (systemMessage) {
            // üéØ ADICIONAR DADOS DO CLIENTE AO SYSTEM PROMPT (RECONHECIMENTO)
            let enhancedSystemMessage = { ...systemMessage };
            
            if (customerData) {
                // Adicionar informa√ß√µes do cliente ao contexto do sistema
                const customerContext = `

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üë§ DADOS DO CLIENTE IDENTIFICADO (USE PARA PERSONALIZAR RESPOSTA):
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚úÖ CLIENTE CADASTRADO: ${customerData.name}
üìû Telefone: ${customerData.phone}
üìç Endere√ßo cadastrado: ${customerData.address || 'N√£o informado'}
${customerData.city ? `üèôÔ∏è Cidade: ${customerData.city}` : ''}
${customerData.zip_code ? `üìÆ CEP: ${customerData.zip_code}` : ''}
üìä Total de pedidos: ${customerData.total_orders || 0}
üí∞ Valor total gasto: R$ ${customerData.total_spent || '0.00'}

‚ö†Ô∏è IMPORTANTE: 
- SEMPRE cumprimente o cliente pelo NOME na primeira mensagem
- Confirme o endere√ßo cadastrado ANTES de criar pedido
- Use tom familiar e acolhedor, como se j√° conhecesse o cliente
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
`;
                enhancedSystemMessage.content = systemMessage.content + customerContext;
                console.log(`‚úÖ Dados do cliente ${customerData.name} adicionados ao contexto da OpenAI`);
            } else {
                console.log(`‚ÑπÔ∏è Nenhum dado de cliente adicionado (cliente novo ou n√£o identificado)`);
            }
            
            allMessages.push(enhancedSystemMessage);
        }
        
        // Adicionar hist√≥rico do banco (se houver)
        if (chatHistory.length > 0) {
            allMessages.push(...chatHistory);
            console.log(`‚úÖ ${chatHistory.length} mensagens do hist√≥rico adicionadas ao contexto da OpenAI`);
        }
        
        // Adicionar mensagens novas (apenas user/assistant, sem system)
        allMessages.push(...userMessages);

        // üîß INTEGRA√á√ÉO MCP: Verificar se a √∫ltima mensagem cont√©m palavras-chave MCP
        let mcpData = null;
        let mcpActivated = false;
        const lastMessage = allMessages[allMessages.length - 1];
        if (lastMessage && lastMessage.role === 'user' && detectMCPKeywords(lastMessage.content)) {
            console.log('üîß Palavras-chave MCP detectadas, executando consulta...');
            try {
                // Determinar comando MCP baseado na mensagem
                let queryCommand = 'list_tables';
                const msg = lastMessage.content.toLowerCase();
                
                if (msg.includes('restaurante') || msg.includes('restaurant')) {
                    queryCommand = 'restaurants_data';
                } else if (msg.includes('pedido') || msg.includes('order')) {
                    queryCommand = 'orders_data';
                } else if (msg.includes('cliente') || msg.includes('customer')) {
                    queryCommand = 'customers_data';
                } else if (msg.includes('produto') || msg.includes('product')) {
                    queryCommand = 'products_data';
                } else if (msg.includes('entregador') || msg.includes('deliverer')) {
                    queryCommand = 'deliverers_data';
                } else if (msg.includes('cupom') || msg.includes('coupon')) {
                    queryCommand = 'coupons_data';
                }
                
                // Executar consulta MCP
                mcpData = await executeSupabaseQuery(queryCommand, { restaurant_id: restaurant_id });
                mcpActivated = true;
                
                // Adicionar dados MCP ao contexto da mensagem
                if (mcpData) {
                    const mcpContext = `\n\nüìä DADOS DO SISTEMA MCP:
${typeof mcpData === 'string' ? mcpData : JSON.stringify(mcpData, null, 2)}

Use esses dados para responder √† pergunta do usu√°rio de forma precisa e √∫til.`;
                    
                    // Modificar a √∫ltima mensagem para incluir o contexto MCP
                    allMessages[allMessages.length - 1].content += mcpContext;
                    console.log('‚úÖ Dados MCP adicionados ao contexto do assistente');
                }
            } catch (mcpError) {
                console.error('‚ùå Erro ao executar MCP:', mcpError);
                // Continuar sem MCP em caso de erro
            }
        }

        // Chamar OpenAI API com GPT-5-mini (com hist√≥rico completo)
        const gptResponse = await fetch('https://api.openai.com/v1/chat/completions', {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${apiKey}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                model: 'gpt-5-mini',
                messages: allMessages,
                max_completion_tokens: max_completion_tokens || 4096,
                temperature: temperature || 0.7,
                stream: false
            })
        });

        if (!gptResponse.ok) {
            const errorData = await gptResponse.text();
            console.error('‚ùå Erro na OpenAI API:', errorData);
            return res.status(500).json({ error: 'Erro no processamento da IA' });
        }

        const data = await gptResponse.json();
        const responseMessage = data.choices?.[0]?.message?.content || 'Desculpe, n√£o consegui processar sua mensagem.';

        // üíæ SALVAR MENSAGENS NO HIST√ìRICO DO BANCO
        if (session_id) {
            // Salvar mensagem do usu√°rio
            const userMessage = userMessages[userMessages.length - 1];
            if (userMessage) {
                await saveChatMessage(session_id, userMessage.role, userMessage.content);
            }
            
            // Salvar resposta do assistente
            await saveChatMessage(session_id, 'assistant', responseMessage);
            console.log(`üíæ Mensagens salvas no banco para session ${session_id}`);
        }

        console.log(`‚úÖ Ana respondeu para ${session_id}${mcpActivated ? ' (com dados MCP)' : ''}`);

        res.json({
            response: responseMessage,
            model_used: 'gpt-5-mini',
            reasoning_effort: reasoning_effort || 'medium',
            mcp_activated: mcpActivated,
            mcp_data: mcpActivated ? mcpData : null
        });

    } catch (error) {
        console.error('‚ùå Erro no endpoint do assistente:', error);
        res.status(500).json({ error: 'Erro interno do servidor' });
    }
});

// Endpoint para buscar card√°pio para o assistente
app.get('/api/assistant/menu/:restaurantId', authenticateEvolutionAPI, rateLimitEvolutionAPI(30, 60000), async (req, res) => {
    try {
        const { restaurantId } = req.params;
        
        // Verificar se o usu√°rio tem acesso a este restaurante
        if (req.session.restaurantId !== restaurantId) {
            console.log(`‚ùå Acesso negado: Usu√°rio ${req.session.userEmail} tentou acessar restaurante ${restaurantId}, mas est√° autenticado para ${req.session.restaurantId}`);
            return res.status(403).json({
                error: "Acesso n√£o autorizado",
                details: "Voc√™ n√£o tem permiss√£o para acessar este restaurante"
            });
        }
        
        // Configurar cliente Supabase
        const { createClient } = require('@supabase/supabase-js');
        let supabaseUrl = process.env.SUPABASE_URL;
        let supabaseKey = process.env.SUPABASE_ANON_KEY;

        // Auto-detect and fix swapped environment variables
        if (supabaseUrl && supabaseUrl.startsWith('eyJ') && supabaseKey && supabaseKey.startsWith('https://')) {
            const temp = supabaseUrl;
            supabaseUrl = supabaseKey;
            supabaseKey = temp;
        }

        if (!supabaseUrl || !supabaseKey) {
            return res.status(500).json({ error: 'Configura√ß√£o do Supabase incompleta' });
        }

        const supabaseClient = createClient(supabaseUrl, supabaseKey);

        // Buscar produtos e categorias
        const { data: products, error: productsError } = await supabaseClient
            .from('products')
            .select(`
                id,
                name,
                description,
                price,
                category_id,
                product_categories (
                    name
                )
            `)
            .eq('restaurant_id', restaurantId)
            .eq('active', true)
            .order('category_id')
            .order('name');

        if (productsError) {
            console.error('‚ùå Erro ao buscar produtos:', productsError);
            return res.status(500).json({ error: 'Erro ao buscar card√°pio' });
        }

        console.log(`üìã Ana buscou card√°pio para restaurante ${restaurantId}: ${products?.length || 0} produtos`);

        res.json({
            products: products || [],
            restaurant_id: restaurantId,
            total_items: products?.length || 0
        });

    } catch (error) {
        console.error('‚ùå Erro ao buscar card√°pio para assistente:', error);
        res.status(500).json({ error: 'Erro interno do servidor' });
    }
});

// Endpoint para criar pedido pelo assistente
app.post('/api/assistant/create-order', authenticateEvolutionAPI, rateLimitEvolutionAPI(10, 60000), async (req, res) => {
    try {
        const { 
            restaurant_id, 
            customer_name, 
            customer_phone, 
            customer_address,
            order_items,
            payment_method,
            notes,
            session_id
        } = req.body;

        if (!restaurant_id || !customer_phone) {
            return res.status(400).json({ error: 'Dados obrigat√≥rios n√£o fornecidos' });
        }

        // Verificar se o usu√°rio tem acesso a este restaurante
        if (req.session.restaurantId !== restaurant_id) {
            console.log(`‚ùå Acesso negado: Usu√°rio ${req.session.userEmail} tentou criar pedido para restaurante ${restaurant_id}, mas est√° autenticado para ${req.session.restaurantId}`);
            return res.status(403).json({
                error: "Acesso n√£o autorizado",
                details: "Voc√™ n√£o tem permiss√£o para criar pedidos para este restaurante"
            });
        }

        // Configurar cliente Supabase
        const { createClient } = require('@supabase/supabase-js');
        let supabaseUrl = process.env.SUPABASE_URL;
        let supabaseKey = process.env.SUPABASE_ANON_KEY;

        // Auto-detect and fix swapped environment variables
        if (supabaseUrl && supabaseUrl.startsWith('eyJ') && supabaseKey && supabaseKey.startsWith('https://')) {
            const temp = supabaseUrl;
            supabaseUrl = supabaseKey;
            supabaseKey = temp;
        }

        if (!supabaseUrl || !supabaseKey) {
            return res.status(500).json({ error: 'Configura√ß√£o do Supabase incompleta' });
        }

        const supabaseClient = createClient(supabaseUrl, supabaseKey);

        // Calcular total do pedido
        const total = order_items?.reduce((sum, item) => {
            return sum + (parseFloat(item.unit_price || 0) * (item.quantity || 1));
        }, 0) || 0;

        // Criar pedido com status "novo"
        const orderData = {
            restaurant_id,
            customer_name: customer_name || 'Cliente',
            customer_phone,
            customer_address: customer_address || '',
            order_type: 'delivery',
            status: 'novo',  // Status obrigat√≥rio conforme solicitado
            total: total,
            payment_method: payment_method || 'PIX',
            notes: notes || `Pedido criado via Ana - Assistente Virtual\nSession ID: ${session_id}`,
            created_at: new Date().toISOString()
        };

        const { data: order, error: orderError } = await supabaseClient
            .from('orders')
            .insert([orderData])
            .select()
            .single();

        if (orderError) {
            console.error('‚ùå Erro ao criar pedido:', orderError);
            return res.status(500).json({ error: 'Erro ao criar pedido' });
        }

        // Criar itens do pedido se existirem
        if (order_items && order_items.length > 0) {
            const orderItemsData = order_items.map(item => ({
                order_id: order.id,
                product_name: item.product_name || item.name || 'Produto',
                quantity: item.quantity || 1,
                unit_price: parseFloat(item.unit_price || 0),
                total_price: parseFloat(item.unit_price || 0) * (item.quantity || 1),
                additionals: item.additionals || []
            }));

            const { error: itemsError } = await supabaseClient
                .from('order_items')
                .insert(orderItemsData);

            if (itemsError) {
                console.error('‚ùå Erro ao criar itens do pedido:', itemsError);
                // Continuar mesmo com erro nos itens, o pedido j√° foi criado
            }
        }

        console.log(`‚úÖ Ana criou pedido ${order.id} para ${customer_name} (${customer_phone})`);

        res.json({
            success: true,
            order_id: order.id,
            order_number: String(order.id).slice(-8).toUpperCase(),
            total: total,
            status: 'novo',
            created_at: order.created_at
        });

    } catch (error) {
        console.error('‚ùå Erro ao criar pedido pelo assistente:', error);
        res.status(500).json({ error: 'Erro interno do servidor' });
    }
});

// Endpoint para buscar informa√ß√µes do produto com adicionais
app.post('/api/assistant/product-info', authenticateEvolutionAPI, rateLimitEvolutionAPI(30, 60000), async (req, res) => {
    try {
        const { restaurant_id, produto_nome, remoteid_cliente } = req.body;

        if (!restaurant_id || !produto_nome) {
            return res.status(400).json({ error: 'Restaurant ID e nome do produto s√£o obrigat√≥rios' });
        }

        // Configurar cliente Supabase
        const { createClient } = require('@supabase/supabase-js');
        let supabaseUrl = process.env.SUPABASE_URL;
        let supabaseKey = process.env.SUPABASE_ANON_KEY;

        // Auto-detect and fix swapped environment variables
        if (supabaseUrl && supabaseUrl.startsWith('eyJ') && supabaseKey && supabaseKey.startsWith('https://')) {
            const temp = supabaseUrl;
            supabaseUrl = supabaseKey;
            supabaseKey = temp;
        }

        if (!supabaseUrl || !supabaseKey) {
            return res.status(500).json({ error: 'Configura√ß√£o do Supabase incompleta' });
        }

        const supabaseClient = createClient(supabaseUrl, supabaseKey);

        // Buscar produto por nome
        const { data: product, error: productError } = await supabaseClient
            .from('products')
            .select('*')
            .eq('restaurant_id', restaurant_id)
            .ilike('name', `%${produto_nome}%`)
            .eq('active', true)
            .limit(1)
            .single();

        if (productError || !product) {
            return res.json({
                found: false,
                message: `Produto "${produto_nome}" n√£o encontrado.`
            });
        }

        // Buscar adicionais do produto (se houver tabela de adicionais)
        // Para este exemplo, vamos simular alguns adicionais comuns
        const mockAdditionals = [
            { nome: 'Nutella', preco: '4.00' },
            { nome: 'Granola', preco: '2.50' },
            { nome: 'Leite Condensado', preco: '3.00' },
            { nome: 'Chocolate', preco: '3.50' }
        ];

        const response = {
            found: true,
            produto: {
                nome: product.name,
                preco: parseFloat(product.price).toFixed(2),
                descricao: product.description || ''
            },
            adicionais: mockAdditionals,
            restaurant_id,
            remoteid_cliente
        };

        console.log(`üîç Ana encontrou produto "${produto_nome}" para ${remoteid_cliente}`);

        res.json(response);

    } catch (error) {
        console.error('‚ùå Erro ao buscar informa√ß√µes do produto:', error);
        res.status(500).json({ error: 'Erro interno do servidor' });
    }
});

// =================================================================
// ENDPOINTS PARA GERENCIAR PROMPTS PERSONALIZADOS DO ASSISTENTE
// =================================================================

// Endpoint para carregar prompt personalizado do sistema
app.get('/api/assistant/system-prompt', authenticateEvolutionAPI, rateLimitEvolutionAPI(30, 60000), async (req, res) => {
    try {
        console.log('üìñ Carregando prompt personalizado do sistema...');
        
        const { data: prompt, error } = await supabaseAdmin
            .from('ai_system_prompts')
            .select('*')
            .eq('restaurant_id', req.session.restaurantId)
            .eq('is_active', true)
            .single();
        
        if (error && error.code !== 'PGRST116') { // PGRST116 = no rows returned
            console.error('‚ùå Erro ao carregar prompt:', error);
            return res.status(500).json({ 
                error: 'Erro ao carregar prompt personalizado',
                hasCustomPrompt: false 
            });
        }
        
        if (!prompt) {
            console.log('üìñ Nenhum prompt personalizado encontrado, usando padr√£o');
            return res.json({ 
                hasCustomPrompt: false,
                prompt: null,
                status: 'using_default'
            });
        }
        
        console.log(`‚úÖ Prompt personalizado carregado para restaurante ${req.session.restaurantId}`);
        res.json({
            hasCustomPrompt: true,
            prompt: prompt.content,
            updatedAt: prompt.updated_at,
            status: 'custom_loaded'
        });
        
    } catch (error) {
        console.error('‚ùå Erro ao carregar prompt personalizado:', error);
        res.status(500).json({ 
            error: 'Erro interno ao carregar prompt',
            hasCustomPrompt: false 
        });
    }
});

// Endpoint para salvar prompt personalizado do sistema
app.post('/api/assistant/system-prompt', 
    authenticateEvolutionAPI, 
    rateLimitEvolutionAPI(5, 60000), // Mais restritivo para saves
    csrfProtection,
    async (req, res) => {
    try {
        const { prompt } = req.body;
        
        if (!prompt || typeof prompt !== 'string' || prompt.trim().length === 0) {
            return res.status(400).json({
                error: 'Prompt √© obrigat√≥rio e deve ser uma string n√£o vazia',
                status: 'validation_error'
            });
        }
        
        if (prompt.length > 16384) { // Limite de ~4096 tokens (16k caracteres)
            return res.status(400).json({
                error: 'Prompt muito longo (m√°ximo 4096 tokens / 16.384 caracteres)',
                status: 'validation_error'
            });
        }
        
        console.log(`üíæ Salvando prompt personalizado para restaurante ${req.session.restaurantId}...`);
        
        // Desativar prompt anterior (se existir)
        await supabaseAdmin
            .from('ai_system_prompts')
            .update({ is_active: false })
            .eq('restaurant_id', req.session.restaurantId);
        
        // Inserir novo prompt
        const { data, error } = await supabaseAdmin
            .from('ai_system_prompts')
            .insert({
                restaurant_id: req.session.restaurantId,
                content: prompt.trim(),
                created_by: req.session.userEmail,
                is_active: true
            })
            .select()
            .single();
        
        if (error) {
            console.error('‚ùå Erro ao salvar prompt:', error);
            return res.status(500).json({ 
                error: 'Erro ao salvar prompt personalizado',
                details: error.message 
            });
        }
        
        console.log(`‚úÖ Prompt personalizado salvo com sucesso! ID: ${data.id}`);
        res.json({
            success: true,
            message: 'Prompt personalizado salvo com sucesso!',
            promptId: data.id,
            updatedAt: data.updated_at,
            status: 'saved'
        });
        
    } catch (error) {
        console.error('‚ùå Erro ao salvar prompt personalizado:', error);
        res.status(500).json({ 
            error: 'Erro interno ao salvar prompt',
            status: 'server_error'
        });
    }
});

// =================================================================
// ENDPOINTS PARA GERENCIAR HIST√ìRICO DE CHAT
// =================================================================

// Endpoint para carregar hist√≥rico de chat
app.get('/api/assistant/chat-history/:sessionId', authenticateEvolutionAPI, rateLimitEvolutionAPI(30, 60000), async (req, res) => {
    try {
        const { sessionId } = req.params;
        
        if (!sessionId) {
            return res.status(400).json({ error: 'Session ID √© obrigat√≥rio' });
        }

        console.log(`üìö Carregando hist√≥rico de chat para session: ${sessionId}`);
        
        const history = await loadChatHistory(sessionId);
        
        res.json({
            success: true,
            session_id: sessionId,
            messages: history,
            count: history.length
        });
        
    } catch (error) {
        console.error('‚ùå Erro ao carregar hist√≥rico de chat:', error);
        res.status(500).json({ 
            error: 'Erro ao carregar hist√≥rico',
            success: false
        });
    }
});

// Endpoint para salvar mensagem no hist√≥rico
app.post('/api/assistant/save-message', authenticateEvolutionAPI, rateLimitEvolutionAPI(60, 60000), async (req, res) => {
    try {
        const { session_id, role, content } = req.body;
        
        if (!session_id || !role || !content) {
            return res.status(400).json({ 
                error: 'session_id, role e content s√£o obrigat√≥rios' 
            });
        }

        if (!['user', 'assistant'].includes(role)) {
            return res.status(400).json({ 
                error: 'role deve ser "user" ou "assistant"' 
            });
        }

        console.log(`üíæ Salvando mensagem no hist√≥rico: ${session_id} (${role})`);
        
        const saved = await saveChatMessage(session_id, role, content);
        
        if (saved) {
            res.json({
                success: true,
                message: 'Mensagem salva com sucesso',
                session_id,
                role
            });
        } else {
            res.status(500).json({
                success: false,
                error: 'Falha ao salvar mensagem'
            });
        }
        
    } catch (error) {
        console.error('‚ùå Erro ao salvar mensagem:', error);
        res.status(500).json({ 
            error: 'Erro ao salvar mensagem',
            success: false
        });
    }
});

// Endpoint para limpar hist√≥rico antigo
app.delete('/api/assistant/clean-history', authenticateEvolutionAPI, rateLimitEvolutionAPI(5, 60000), async (req, res) => {
    try {
        console.log('üßπ Limpando hist√≥rico antigo de chat...');
        
        const cleaned = await cleanOldChatHistory();
        
        if (cleaned) {
            res.json({
                success: true,
                message: 'Hist√≥rico antigo limpo com sucesso'
            });
        } else {
            res.status(500).json({
                success: false,
                error: 'Falha ao limpar hist√≥rico'
            });
        }
        
    } catch (error) {
        console.error('‚ùå Erro ao limpar hist√≥rico:', error);
        res.status(500).json({ 
            error: 'Erro ao limpar hist√≥rico',
            success: false
        });
    }
});

// ===== WEBHOOK ENDPOINT PARA EVOLUTION API - ASSISTENTE ANA =====

// Array para armazenar as √∫ltimas mensagens recebidas (m√°ximo 10)
let latestEvolutionMessages = [];

// Armazenamento detalhado de todos os webhooks recebidos
let webhookDetailedLog = [];
let webhookStats = {
    total: 0,
    processed: 0,
    ignored: 0,
    errors: 0
};

// Fun√ß√£o para adicionar entrada no log detalhado
function addWebhookLogEntry(logData) {
    // Adicionar timestamp se n√£o existir
    if (!logData.timestamp) {
        logData.timestamp = new Date().toISOString();
    }
    
    // Adicionar no in√≠cio do array
    webhookDetailedLog.unshift(logData);
    
    // Manter apenas os √∫ltimos 100 logs para performance
    if (webhookDetailedLog.length > 100) {
        webhookDetailedLog = webhookDetailedLog.slice(0, 100);
    }
    
    // Atualizar estat√≠sticas
    webhookStats.total++;
    if (logData.status === 'processed') {
        webhookStats.processed++;
    } else if (logData.status === 'ignored') {
        webhookStats.ignored++;
    } else if (logData.status === 'error') {
        webhookStats.errors++;
    }
}

// Fun√ß√£o para adicionar mensagem ao hist√≥rico
function addMessageToHistory(messageData) {
    // Adicionar nova mensagem no in√≠cio do array
    latestEvolutionMessages.unshift(messageData);
    
    // Manter apenas as √∫ltimas 10 mensagens
    if (latestEvolutionMessages.length > 10) {
        latestEvolutionMessages = latestEvolutionMessages.slice(0, 10);
    }
}

// Endpoint GET para buscar as 10 √∫ltimas mensagens
app.get('/api/webhook/evolution', async (req, res) => {
    try {
        res.json({
            status: 'ok',
            messages: latestEvolutionMessages,
            count: latestEvolutionMessages.length,
            timestamp: new Date().toISOString()
        });
    } catch (error) {
        console.error('‚ùå Erro ao buscar mensagens:', error);
        res.status(500).json({ 
            error: 'Erro ao buscar mensagens',
            status: 'error' 
        });
    }
});

// Endpoint GET para buscar o log detalhado dos webhooks
app.get('/api/webhook/evolution/log', async (req, res) => {
    try {
        res.json({
            status: 'ok',
            logs: webhookDetailedLog,
            stats: webhookStats,
            count: webhookDetailedLog.length,
            timestamp: new Date().toISOString()
        });
    } catch (error) {
        console.error('‚ùå Erro ao buscar log do webhook:', error);
        res.status(500).json({ 
            error: 'Erro ao buscar log do webhook',
            status: 'error' 
        });
    }
});

// Endpoint DELETE para limpar o log dos webhooks
app.delete('/api/webhook/evolution/log', async (req, res) => {
    try {
        webhookDetailedLog = [];
        webhookStats = {
            total: 0,
            processed: 0,
            ignored: 0,
            errors: 0
        };
        
        console.log('üßπ Log do webhook Evolution API foi limpo');
        
        res.json({
            status: 'ok',
            message: 'Log do webhook foi limpo com sucesso',
            timestamp: new Date().toISOString()
        });
    } catch (error) {
        console.error('‚ùå Erro ao limpar log do webhook:', error);
        res.status(500).json({ 
            error: 'Erro ao limpar log do webhook',
            status: 'error' 
        });
    }
});

// Endpoint webhook para receber mensagens do Evolution API e processar com Ana
app.post('/api/webhook/evolution', async (req, res) => {
    try {
        const webhookData = req.body;
        const receivedAt = new Date().toISOString();
        
        // Log webhook de forma segura (sem expor API keys)
        const safeWebhookData = {
            event: webhookData.event,
            instance: webhookData.instance,
            messageType: webhookData.data?.messageType,
            hasMessage: !!webhookData.data?.message,
            fromMe: webhookData.data?.key?.fromMe,
            pushName: webhookData.data?.pushName || 'An√¥nimo'
        };
        console.log('üì® Webhook Evolution API recebido:', JSON.stringify(safeWebhookData, null, 2));
        
        // Validar estrutura b√°sica do webhook
        if (!webhookData.instance || !webhookData.data || !webhookData.data.message) {
            console.log('‚ö†Ô∏è Webhook inv√°lido: estrutura incorreta');
            
            // Adicionar ao log detalhado
            addWebhookLogEntry({
                status: 'ignored',
                reason: 'invalid_structure',
                timestamp: receivedAt,
                rawData: webhookData,
                instance: webhookData.instance || 'N/A',
                messageType: webhookData.data?.messageType || 'N/A'
            });
            
            return res.status(200).json({ status: 'ignored', reason: 'invalid_structure' });
        }
        
        const { instance } = webhookData;
        const { key, message, messageType, pushName } = webhookData.data;
        const body = message.conversation || message.body;
        
        // Ignorar mensagens do pr√≥prio bot
        if (key.fromMe === true) {
            console.log('ü§ñ Ignorando mensagem pr√≥pria do bot');
            
            // Adicionar ao log detalhado
            addWebhookLogEntry({
                status: 'ignored',
                reason: 'own_message',
                timestamp: receivedAt,
                rawData: webhookData,
                instance: instance,
                messageType: messageType,
                pushName: pushName,
                body: body,
                remoteJid: key.remoteJid
            });
            
            return res.status(200).json({ status: 'ignored', reason: 'own_message' });
        }
        
        // Processar apenas mensagens de texto
        if (messageType !== 'textMessage' && messageType !== 'conversation') {
            console.log('üìù Ignorando mensagem n√£o textual:', messageType);
            
            // Adicionar ao log detalhado
            addWebhookLogEntry({
                status: 'ignored',
                reason: 'not_text_message',
                timestamp: receivedAt,
                rawData: webhookData,
                instance: instance,
                messageType: messageType,
                pushName: pushName,
                body: body,
                remoteJid: key.remoteJid
            });
            
            return res.status(200).json({ status: 'ignored', reason: 'not_text_message' });
        }
        
        if (!body || body.trim() === '') {
            console.log('üì≠ Mensagem vazia ignorada');
            
            // Adicionar ao log detalhado
            addWebhookLogEntry({
                status: 'ignored',
                reason: 'empty_message',
                timestamp: receivedAt,
                rawData: webhookData,
                instance: instance,
                messageType: messageType,
                pushName: pushName,
                body: body || '',
                remoteJid: key.remoteJid
            });
            
            return res.status(200).json({ status: 'ignored', reason: 'empty_message' });
        }
        
        console.log(`üí¨ Mensagem de ${pushName || 'Usu√°rio'} na inst√¢ncia ${instance}: ${body}`);
        
        // Armazenar mensagem no hist√≥rico
        const messageData = {
            id: key.id || Date.now().toString(),
            timestamp: new Date().toISOString(),
            instance: instance,
            messageType: messageType,
            body: body,
            pushName: pushName || 'Usu√°rio An√¥nimo',
            remoteJid: key.remoteJid,
            fromMe: key.fromMe
        };
        
        addMessageToHistory(messageData);
        console.log(`üìù Mensagem armazenada no hist√≥rico. Total: ${latestEvolutionMessages.length}`);
        
        // Buscar restaurante pela inst√¢ncia (name = instance)
        const { createClient } = require('@supabase/supabase-js');
        
        // Auto-detect and fix swapped environment variables (same logic as other endpoints)
        let supabaseUrl = process.env.SUPABASE_URL;
        let supabaseAnonKey = process.env.SUPABASE_ANON_KEY;
        let supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || supabaseAnonKey;

        if (supabaseUrl && supabaseUrl.startsWith('eyJ') && supabaseAnonKey && supabaseAnonKey.startsWith('https://')) {
            console.log('üîÑ Webhook auto-detecting swapped SUPABASE_URL and SUPABASE_ANON_KEY - fixing automatically');
            const temp = supabaseUrl;
            supabaseUrl = supabaseAnonKey;
            supabaseAnonKey = temp;
            supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || supabaseAnonKey;
        }
        
        if (!supabaseUrl || !supabaseKey) {
            console.error('‚ùå Configura√ß√£o do Supabase n√£o encontrada para webhook');
            return res.status(500).json({ error: 'Database configuration missing' });
        }
        
        const supabase = createClient(supabaseUrl, supabaseKey);
        
        // Buscar restaurante pela coluna name (que corresponde √† inst√¢ncia)
        const { data: restaurant, error: restaurantError } = await supabase
            .from('restaurants')
            .select('*')
            .eq('name', instance)
            .single();
            
        if (restaurantError || !restaurant) {
            console.log(`‚ö†Ô∏è Restaurante n√£o encontrado para inst√¢ncia: ${instance}`);
            
            // Adicionar ao log detalhado
            addWebhookLogEntry({
                status: 'ignored',
                reason: 'restaurant_not_found',
                timestamp: receivedAt,
                rawData: webhookData,
                instance: instance,
                messageType: messageType,
                pushName: pushName,
                body: body,
                remoteJid: key.remoteJid
            });
            
            return res.status(200).json({ status: 'ignored', reason: 'restaurant_not_found' });
        }
        
        console.log(`üè™ Restaurante encontrado: ${restaurant.name} (ID: ${restaurant.id})`);  // Mant√©m vari√°vel restaurant do webhook
        
        // üîç Buscar contexto completo usando MCP
        console.log('üîç Buscando contexto completo via MCP...');
        let context = {
            customer: null,
            restaurant: restaurant,
            menu: null,
            channel: {
                instance: instance,
                remoteJid: key.remoteJid,
                pushName: pushName
            }
        };
        
        try {
            // Normalizar telefone do WhatsApp antes da consulta
            const normalizedPhone = normalizeWhatsAppJid(key.remoteJid);
            console.log(`üìû Telefone normalizado: ${key.remoteJid} -> ${normalizedPhone}`);
            
            // Gerar m√∫ltiplos formatos de telefone para busca
            const phoneFormats = [
                normalizedPhone,                                    // +5513991292600
                normalizedPhone.replace('+', ''),                   // 5513991292600
                normalizedPhone.replace('+55', ''),                 // 13991292600
                normalizedPhone.replace(/[^0-9]/g, ''),            // Apenas n√∫meros
                normalizedPhone.replace(/[^0-9]/g, '').substring(2) // Remove c√≥digo do pa√≠s
            ];
            
            console.log(`üìû Buscando cliente em ${phoneFormats.length} formatos de telefone`);
            
            // Buscar dados do cliente por telefone em m√∫ltiplos formatos
            let customerData = null;
            for (const phoneFormat of phoneFormats) {
                try {
                    customerData = await executeSupabaseQuery('customers_data', { 
                        phone: phoneFormat,
                        restaurant_id: restaurant.id 
                    });
                    
                    if (customerData && customerData.customer) {
                        context.customer = customerData.customer;
                        console.log(`üë§ Cliente encontrado: ${customerData.customer.name} (formato: ${phoneFormat})`);
                        break;
                    }
                } catch (err) {
                    // Continuar tentando outros formatos
                    console.log(`‚ö†Ô∏è Formato ${phoneFormat} n√£o encontrou cliente`);
                }
            }
            
            if (!context.customer) {
                console.log(`üë§ Cliente n√£o encontrado em nenhum formato de telefone`);
            }
            
            // Buscar card√°pio do restaurante
            const menuData = await executeSupabaseQuery('products_data', { restaurant_id: restaurant.id });  // Usa restaurant do webhook
            if (menuData && menuData.categories) {
                context.menu = menuData;
                console.log(`üìù Card√°pio carregado: ${menuData.total_categories} categorias, ${menuData.total_products} produtos`);
            } else {
                console.log(`üìù Nenhum card√°pio encontrado para restaurante: ${restaurant.id}`);  // Usa restaurant do webhook
            }
            
        } catch (mcpError) {
            console.error('‚ö†Ô∏è Erro ao buscar contexto via MCP:', mcpError);
            // Continuar mesmo com erro no contexto
        }
        
        // üíæ Salvar mensagem do usu√°rio no hist√≥rico
        const sessionId = key.remoteJid;
        await saveChatMessage(sessionId, 'user', body);
        
        // üìö Carregar hist√≥rico de conversas
        const chatHistory = await loadChatHistory(sessionId);
        
        // Processar mensagem com Ana usando contexto completo e hist√≥rico
        const aiResponse = await processMessageWithAna(body, context, chatHistory);
        
        if (!aiResponse) {
            console.log('ü§ñ Ana n√£o retornou resposta');
            
            // Adicionar ao log detalhado
            addWebhookLogEntry({
                status: 'processed',
                reason: 'no_ai_response',
                timestamp: receivedAt,
                rawData: webhookData,
                instance: instance,
                messageType: messageType,
                pushName: pushName,
                body: body,
                remoteJid: key.remoteJid,
                restaurant: restaurant.name,  // Usa restaurant do webhook
                hasCustomer: !!context?.customer,
                hasMenu: !!context?.menu
            });
            
            return res.status(200).json({ status: 'processed', reason: 'no_ai_response' });
        }
        
        // üíæ Salvar resposta da OpenAI no hist√≥rico
        await saveChatMessage(sessionId, 'assistant', aiResponse);
        
        // Enviar resposta via Evolution API
        const sendSuccess = await sendEvolutionMessage(instance, key.remoteJid, aiResponse);
        
        if (sendSuccess) {
            console.log('‚úÖ Resposta enviada com sucesso via Evolution API');
            
            // Adicionar ao log detalhado como sucesso completo
            addWebhookLogEntry({
                status: 'processed',
                reason: 'success',
                timestamp: receivedAt,
                rawData: webhookData,
                instance: instance,
                messageType: messageType,
                pushName: pushName,
                body: body,
                remoteJid: key.remoteJid,
                restaurant: restaurant.name,  // Usa restaurant do webhook
                hasCustomer: !!context?.customer,
                hasMenu: !!context?.menu,
                aiResponse: aiResponse,
                messageSent: true
            });
            
            return res.status(200).json({ status: 'processed', message_sent: true });
        } else {
            console.log('‚ùå Erro ao enviar resposta via Evolution API');
            
            // Adicionar ao log detalhado como processado mas com erro de envio
            addWebhookLogEntry({
                status: 'processed',
                reason: 'send_error',
                timestamp: receivedAt,
                rawData: webhookData,
                instance: instance,
                messageType: messageType,
                pushName: pushName,
                body: body,
                remoteJid: key.remoteJid,
                restaurant: restaurant.name,  // Usa restaurant do webhook
                hasCustomer: !!context?.customer,
                hasMenu: !!context?.menu,
                aiResponse: aiResponse,
                messageSent: false
            });
            
            return res.status(200).json({ status: 'processed', message_sent: false });
        }
        
    } catch (error) {
        console.error('‚ùå Erro no webhook Evolution API:', error);
        
        // Adicionar erro ao log detalhado
        try {
            addWebhookLogEntry({
                status: 'error',
                error: error.message,
                timestamp: receivedAt || new Date().toISOString(),
                rawData: webhookData || {},
                instance: webhookData?.instance || 'N/A',
                messageType: webhookData?.data?.messageType || 'N/A'
            });
        } catch (logError) {
            console.error('‚ùå Erro ao adicionar erro no log:', logError);
        }
        
        return res.status(500).json({ error: 'Webhook processing failed' });
    }
});

// =================================================================
// FUN√á√ïES DE MEM√ìRIA DE CHAT (SUPABASE)
// =================================================================

// Fun√ß√£o para salvar mensagem no hist√≥rico do Supabase
async function saveChatMessage(sessionId, role, content) {
    try {
        const { createClient } = require('@supabase/supabase-js');
        
        let supabaseUrl = process.env.SUPABASE_URL;
        let supabaseAnonKey = process.env.SUPABASE_ANON_KEY;
        let supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || supabaseAnonKey;

        if (supabaseUrl && supabaseUrl.startsWith('eyJ') && supabaseAnonKey && supabaseAnonKey.startsWith('https://')) {
            const temp = supabaseUrl;
            supabaseUrl = supabaseAnonKey;
            supabaseAnonKey = temp;
            supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || supabaseAnonKey;
        }
        
        const supabase = createClient(supabaseUrl, supabaseKey);
        
        const { error } = await supabase
            .from('chat_histories')
            .insert({
                session_id: sessionId,
                message: { role, content }
            });
        
        if (error) {
            console.error('‚ùå Erro ao salvar mensagem no hist√≥rico:', error);
            return false;
        }
        
        console.log(`üíæ Mensagem salva no hist√≥rico: ${sessionId} (${role})`);
        return true;
        
    } catch (error) {
        console.error('‚ùå Erro ao salvar mensagem:', error);
        return false;
    }
}

// Fun√ß√£o para carregar hist√≥rico de chat do Supabase
async function loadChatHistory(sessionId) {
    try {
        const { createClient } = require('@supabase/supabase-js');
        
        let supabaseUrl = process.env.SUPABASE_URL;
        let supabaseAnonKey = process.env.SUPABASE_ANON_KEY;
        let supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || supabaseAnonKey;

        if (supabaseUrl && supabaseUrl.startsWith('eyJ') && supabaseAnonKey && supabaseAnonKey.startsWith('https://')) {
            const temp = supabaseUrl;
            supabaseUrl = supabaseAnonKey;
            supabaseAnonKey = temp;
            supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || supabaseAnonKey;
        }
        
        const supabase = createClient(supabaseUrl, supabaseKey);
        
        // Buscar √∫ltimas 50 mensagens (hist√≥rico recente) ordenadas por ID
        const { data, error } = await supabase
            .from('chat_histories')
            .select('message')
            .eq('session_id', sessionId)
            .order('id', { ascending: true })
            .limit(50);
        
        if (error) {
            console.error('‚ùå Erro ao carregar hist√≥rico:', error);
            return [];
        }
        
        const messages = data.map(row => row.message);
        console.log(`üìö Hist√≥rico carregado: ${messages.length} mensagens para ${sessionId}`);
        console.log(`‚úÖ CONFIRMA√á√ÉO: OpenAI est√° consultando a tabela chat_histories do Supabase!`);
        console.log(`üìä Dados do hist√≥rico consultado:`, {
            sessionId: sessionId,
            totalMessages: messages.length,
            table: 'chat_histories',
            timeRange: '√∫ltimas 24 horas',
            hasMessages: messages.length > 0
        });
        return messages;
        
    } catch (error) {
        console.error('‚ùå Erro ao carregar hist√≥rico:', error);
        return [];
    }
}

// Fun√ß√£o para limpar mensagens antigas (>24 horas)
async function cleanOldChatHistory() {
    try {
        const { createClient } = require('@supabase/supabase-js');
        
        let supabaseUrl = process.env.SUPABASE_URL;
        let supabaseAnonKey = process.env.SUPABASE_ANON_KEY;
        let supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || supabaseAnonKey;

        if (supabaseUrl && supabaseUrl.startsWith('eyJ') && supabaseAnonKey && supabaseAnonKey.startsWith('https://')) {
            const temp = supabaseUrl;
            supabaseUrl = supabaseAnonKey;
            supabaseAnonKey = temp;
            supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || supabaseAnonKey;
        }
        
        const supabase = createClient(supabaseUrl, supabaseKey);
        
        // Manter apenas as √∫ltimas 100 mensagens de cada sess√£o
        const { data: sessions } = await supabase
            .from('chat_histories')
            .select('session_id')
            .order('session_id');
        
        if (!sessions) return true;
        
        const uniqueSessions = [...new Set(sessions.map(s => s.session_id))];
        
        for (const sessionId of uniqueSessions) {
            // Buscar IDs das mensagens antigas (manter √∫ltimas 100)
            const { data: oldMessages } = await supabase
                .from('chat_histories')
                .select('id')
                .eq('session_id', sessionId)
                .order('id', { ascending: false })
                .range(100, 1000); // Pegar da 101¬™ mensagem em diante
            
            if (oldMessages && oldMessages.length > 0) {
                const idsToDelete = oldMessages.map(m => m.id);
                await supabase
                    .from('chat_histories')
                    .delete()
                    .in('id', idsToDelete);
            }
        }
        
        const { error } = { error: null };
        
        if (error) {
            console.error('‚ùå Erro ao limpar hist√≥rico antigo:', error);
            return false;
        }
        
        console.log('üßπ Hist√≥rico antigo limpo com sucesso');
        return true;
        
    } catch (error) {
        console.error('‚ùå Erro ao limpar hist√≥rico:', error);
        return false;
    }
}

// Executar limpeza de hist√≥rico a cada 6 horas
setInterval(cleanOldChatHistory, 6 * 60 * 60 * 1000);

// Fun√ß√£o para processar mensagem com Ana (simulando o comportamento do assistente.js)
async function processMessageWithAna(messageText, context, chatHistory = []) {
    try {
        console.log('ü§ñ Processando mensagem com Ana...');
        console.log(`üìö Usando hist√≥rico de ${chatHistory.length} mensagens`);
        
        // Buscar prompt personalizado baseado no business_type do restaurante
        const { createClient } = require('@supabase/supabase-js');
        
        // Auto-detect and fix swapped environment variables
        let supabaseUrl = process.env.SUPABASE_URL;
        let supabaseAnonKey = process.env.SUPABASE_ANON_KEY;
        let supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || supabaseAnonKey;

        if (supabaseUrl && supabaseUrl.startsWith('eyJ') && supabaseAnonKey && supabaseAnonKey.startsWith('https://')) {
            console.log('üîÑ processMessageWithAna auto-detecting swapped SUPABASE_URL and SUPABASE_ANON_KEY - fixing automatically');
            const temp = supabaseUrl;
            supabaseUrl = supabaseAnonKey;
            supabaseAnonKey = temp;
            supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || supabaseAnonKey;
        }
        
        const supabase = createClient(supabaseUrl, supabaseKey);
        
        let customPrompt = null;
        const businessType = context?.restaurant?.business_type || 'restaurante';
        
        console.log(`üéØ Buscando prompt para tipo de neg√≥cio: ${businessType}`);
        
        const { data: promptData, error: promptError } = await supabase
            .from('prompit')
            .select('prompt')
            .eq('tipo_negocio', businessType)
            .eq('active', true)
            .single();
            
        if (promptError) {
            console.log(`‚ö†Ô∏è Prompt espec√≠fico n√£o encontrado para "${businessType}", usando padr√£o`);
        } else if (promptData) {
            customPrompt = promptData.prompt;
            console.log(`‚úÖ Prompt personalizado carregado para tipo: ${businessType}`);
        }
        
        // üîß INTEGRA√á√ÉO MCP: Verificar se a mensagem cont√©m palavras-chave MCP
        let mcpData = null;
        let mcpActivated = false;
        if (detectMCPKeywords(messageText)) {
            console.log('üîß Palavras-chave MCP detectadas no WhatsApp, executando consulta...');
            try {
                // Determinar comando MCP baseado na mensagem
                let queryCommand = 'list_tables';
                const msg = messageText.toLowerCase();
                
                if (msg.includes('restaurante') || msg.includes('restaurant')) {
                    queryCommand = 'restaurants_data';
                } else if (msg.includes('pedido') || msg.includes('order')) {
                    queryCommand = 'orders_data';
                } else if (msg.includes('cliente') || msg.includes('customer')) {
                    queryCommand = 'customers_data';
                } else if (msg.includes('produto') || msg.includes('product')) {
                    queryCommand = 'products_data';
                } else if (msg.includes('entregador') || msg.includes('deliverer')) {
                    queryCommand = 'deliverers_data';
                } else if (msg.includes('cupom') || msg.includes('coupon')) {
                    queryCommand = 'coupons_data';
                } else if (msg.includes('dados') || msg.includes('consulta') || msg.includes('database')) {
                    queryCommand = 'list_tables';
                }
                
                // Executar consulta MCP
                mcpData = await executeSupabaseQuery(queryCommand, { restaurant_id: context.restaurant.id });
                mcpActivated = true;
                console.log('‚úÖ Dados MCP obtidos com sucesso no WhatsApp');
                
            } catch (mcpError) {
                console.error('‚ùå Erro ao executar MCP no WhatsApp:', mcpError);
                // Continuar sem MCP em caso de erro
            }
        }

        // üö® PROMPT MESTRE DA ANA - SEGUIR √Ä RISCA
        const anaBasePrompt = `### **[PROMPT MESTRE PARA ASSISTENTE DE RESTAURANTE: ANA]**

**Voc√™ √© Ana, uma assistente virtual especialista em atendimento para restaurantes via WhatsApp.** Sua miss√£o √© proporcionar uma experi√™ncia de pedido fluida, eficiente e, acima de tudo, humana e calorosa para cada cliente.

## 1. PERSONA E DIRETRIZES GERAIS

* **Nome:** Ana
* **Tom:** Humanizado, usando portugu√™s brasileiro coloquial e amig√°vel. Use contra√ß√µes como "t√°", "pra", "a gente". Seja calorosa ("Que alegria te ver por aqui!", "Opa, que del√≠cia!"), mas sempre eficiente e clara.

## üö® REGRA CR√çTICA OBRIGAT√ìRIA: PROCESSO INTERNO INVIS√çVEL

**‚ùå NUNCA MOSTRE AO USU√ÅRIO:**
- "Vou pegar suas informa√ß√µes..."
- "üîç Consultando dados..."
- "Um momentinho..."
- "Aguarde..."
- Qualquer indica√ß√£o de que est√° processando ou consultando

**‚úÖ SEMPRE FA√áA:**
- Use os dados j√° consultados que est√£o no contexto
- Responda DIRETAMENTE com as informa√ß√µes j√° dispon√≠veis
- Seja natural e fluida na conversa

## DADOS DISPON√çVEIS NO CONTEXTO (J√Å CONSULTADOS):

**Restaurante:**
- Nome: ${context.restaurant.name}
- Tipo: ${context.restaurant.business_type || 'restaurante'}
- Hor√°rio: ${context.restaurant.opening_hours || '8h'} √†s ${context.restaurant.closing_hours || '22h'}

**Cliente:**
${context.customer ? 
`- Nome: ${context.customer.name}
- Telefone: ${context.customer.phone}
- Endere√ßo: ${context.customer.address || 'n√£o cadastrado'}
- Cidade: ${context.customer.city || ''}
- CEP: ${context.customer.zip_code || ''}
- Cliente CADASTRADO: SIM` 
: 
`- WhatsApp: ${context.channel.pushName}
- Telefone: ${context.channel.remoteJid}
- Cliente CADASTRADO: N√ÉO`}

**Card√°pio:**
${context.menu ? 
`${context.menu.categories.map(cat => 
    `\nüçΩÔ∏è ${cat.name}:\n${cat.products.map(prod => 
        `  ‚Ä¢ ${prod.name} - R$ ${prod.price}${prod.description ? ` (${prod.description})` : ''}`
    ).join('\n')}`
).join('\n')}`
: 'Card√°pio n√£o dispon√≠vel no momento'}

## FLUXO OBRIGAT√ìRIO:

### SE CLIENTE CADASTRADO (context.customer existe):
**PRIMEIRA MENSAGEM:**
"Oi, ${context.customer?.name}! Que alegria te ver por aqui! üòä 

S√≥ pra confirmar, seu endere√ßo para entrega ainda √©:
üìç ${context.customer?.address || 'endere√ßo n√£o cadastrado'}

T√° certo? 

A gente t√° aberto das ${context.restaurant.opening_hours || '8h'} √†s ${context.restaurant.closing_hours || '22h'}."

### SE CLIENTE N√ÉO CADASTRADO (context.customer n√£o existe):
**PRIMEIRA MENSAGEM:**
"Ol√°! Seja muito bem-vindo(a) ao ${context.restaurant.name}! üòä 

Para a gente come√ßar, preciso de algumas informa√ß√µes:

üìù **Nome completo:**
üìç **Endere√ßo de entrega completo** (rua, n√∫mero, bairro, cidade e CEP):

Estamos abertos das ${context.restaurant.opening_hours || '8h'} √†s ${context.restaurant.closing_hours || '22h'}."

## CARD√ÅPIO:
${context.menu ? 
`Quando cliente pedir card√°pio, mostre TODAS as categorias e TODOS os produtos:

üìã **CARD√ÅPIO COMPLETO - ${context.restaurant.name}**
${context.menu.categories.map((cat, catIdx) => 
    `\n${cat.emoji || 'üçΩÔ∏è'} **${cat.name}**\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n${cat.products.map((prod, prodIdx) => 
        `${catIdx * 10 + prodIdx + 1}Ô∏è‚É£ **${prod.name}** - R$ ${prod.price}${prod.description ? `\n   ${prod.description}` : ''}`
    ).join('\n\n')}`
).join('\n\n')}
\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nQual vai ser? Pode me dizer o n√∫mero ou o nome! üòä`
: 'Card√°pio n√£o dispon√≠vel'}

## REGRAS CR√çTICAS:
1. ‚úÖ Use SEMPRE os dados j√° dispon√≠veis no contexto
2. ‚ùå NUNCA diga que est√° "consultando" ou "verificando"
3. ‚úÖ Responda de forma DIRETA e natural
4. ‚úÖ Mostre TODOS os produtos do card√°pio (n√£o omita nada)
5. ‚úÖ Sempre confirme endere√ßo antes de prosseguir
6. ‚úÖ Sempre pergunte forma de pagamento antes de finalizar

Lembre-se: Os dados j√° foram consultados! Use-os diretamente sem mencionar o processo.`;

        let systemPrompt = customPrompt || anaBasePrompt;

        // Adicionar dados MCP ao contexto se dispon√≠veis
        let userMessage = messageText;
        if (mcpActivated && mcpData) {
            const mcpContext = `\n\nüìä DADOS DO SISTEMA MCP:
${typeof mcpData === 'string' ? mcpData : JSON.stringify(mcpData, null, 2)}

Use esses dados para responder √† pergunta do usu√°rio de forma precisa e √∫til.`;
            userMessage += mcpContext;
            console.log('‚úÖ Dados MCP adicionados ao contexto do WhatsApp');
        }

        // üìö Construir array de mensagens com hist√≥rico
        const messages = [
            {
                role: "system",
                content: systemPrompt
            }
        ];
        
        // Adicionar hist√≥rico de conversas (m√°ximo 10 mensagens para n√£o exceder tokens)
        const recentHistory = chatHistory.slice(-10);
        messages.push(...recentHistory);
        
        // Adicionar mensagem atual do usu√°rio
        messages.push({
            role: "user", 
            content: userMessage
        });

        // Chamar OpenAI API
        const openaiResponse = await fetch('https://api.openai.com/v1/chat/completions', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`
            },
            body: JSON.stringify({
                model: 'gpt-4o-mini', // Usar modelo dispon√≠vel
                messages: messages,
                max_completion_tokens: 500,
                temperature: 0.7
            })
        });

        if (!openaiResponse.ok) {
            console.error('‚ùå Erro na OpenAI API:', openaiResponse.status);
            return 'Desculpe, estou com problemas t√©cnicos no momento. Tente novamente em instantes.';
        }

        const openaiData = await openaiResponse.json();
        const aiResponse = openaiData.choices[0]?.message?.content || 'Desculpe, n√£o consegui processar sua mensagem.';
        
        console.log(`‚úÖ Ana processou a mensagem${mcpActivated ? ' (com dados MCP)' : ''}:`, aiResponse.substring(0, 100) + '...');
        return aiResponse;
        
    } catch (error) {
        console.error('‚ùå Erro ao processar com Ana:', error);
        return 'Desculpe, tive um problema t√©cnico. Nossa equipe foi notificada.';
    }
}

// Fun√ß√£o para enviar mensagem via Evolution API
async function sendEvolutionMessage(instance, remoteJid, message) {
    try {
        const evolutionApiUrl = process.env.EVOLUTION_API_BASE_URL || process.env.EVOLUTION_API_URL || process.env.EVOLUTION_SERVER_URL;
        const evolutionApiKey = process.env.EVOLUTION_API_KEY;
        
        if (!evolutionApiUrl || !evolutionApiKey) {
            console.error('‚ùå Evolution API n√£o configurada');
            return false;
        }
        
        const sendEndpoint = `${evolutionApiUrl}/message/sendText/${instance}`;
        
        // Limpar o n√∫mero - remover @s.whatsapp.net se presente
        const cleanNumber = remoteJid.replace('@s.whatsapp.net', '').replace('@c.us', '');
        
        const payload = {
            number: cleanNumber,
            text: message
        };
        
        console.log('üì§ Enviando mensagem via Evolution API:', { instance, remoteJid, cleanNumber, messageLength: message.length });
        
        const response = await fetch(sendEndpoint, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'apikey': evolutionApiKey
            },
            body: JSON.stringify(payload)
        });
        
        if (response.ok) {
            console.log('‚úÖ Mensagem enviada com sucesso via Evolution API');
            return true;
        } else {
            console.error('‚ùå Erro ao enviar mensagem:', response.status, await response.text());
            return false;
        }
        
    } catch (error) {
        console.error('‚ùå Erro ao enviar via Evolution API:', error);
        return false;
    }
}


// =================================================================
// MCP (Model Context Protocol) INTEGRATION
// =================================================================

// Fun√ß√£o para normalizar n√∫meros de telefone do WhatsApp para E.164
function normalizeWhatsAppJid(remoteJid) {
    try {
        // Extrair apenas os d√≠gitos do JID (remove @s.whatsapp.net, etc)
        const phoneDigits = remoteJid.replace(/[^0-9]/g, '');
        
        // Se j√° tem c√≥digo do pa√≠s (come√ßa com 55 para Brasil), manter
        if (phoneDigits.startsWith('55') && phoneDigits.length >= 12) {
            return '+' + phoneDigits;
        }
        
        // Se n√£o tem c√≥digo do pa√≠s, assumir Brasil (+55)
        if (phoneDigits.length >= 10) {
            return '+55' + phoneDigits;
        }
        
        // Se muito curto, retornar como est√° com prefixo
        return '+55' + phoneDigits;
        
    } catch (error) {
        console.error('‚ùå Erro ao normalizar telefone:', remoteJid, error);
        return remoteJid; // Retornar original em caso de erro
    }
}

// Fun√ß√£o para mascarar telefone para logs (seguran√ßa e privacidade)
function maskPhoneForLog(phone) {
    try {
        if (!phone) return phone;
        
        // Extrair apenas d√≠gitos
        const digits = phone.replace(/[^0-9]/g, '');
        
        if (digits.length >= 8) {
            // Mascarar todos exceto √∫ltimos 4 d√≠gitos
            const masked = '*'.repeat(digits.length - 4) + digits.slice(-4);
            // Substituir d√≠gitos originais pelos mascarados na string original
            return phone.replace(/\d+/g, masked);
        }
        
        return phone; // Retornar original se muito curto
    } catch (error) {
        return '****'; // Fallback seguro
    }
}

// Fun√ß√£o para gerar m√∫ltiplos formatos de telefone para busca (otimizada)
function generatePhoneFormats(phone) {
    try {
        // Limpar o telefone primeiro
        const cleanPhone = phone.replace(/[^0-9]/g, '');
        
        // Valida√ß√£o m√≠nima - se muito curto, retornar vazio para for√ßar fallback
        if (cleanPhone.length < 8) {
            return [];
        }
        
        const formats = [];
        
        // Formato 1: +5513991292600 (completo com +55)
        if (cleanPhone.startsWith('55') && cleanPhone.length >= 12) {
            formats.push('+' + cleanPhone);
            formats.push(cleanPhone);
            // Extrair apenas DDD + n√∫mero (remove 55)
            const ddcNumber = cleanPhone.substring(2);
            if (ddcNumber.length >= 10) {
                formats.push(ddcNumber);
            }
        } else if (cleanPhone.length >= 10) {
            // Formato com c√≥digo do pa√≠s
            formats.push('+55' + cleanPhone);
            formats.push('55' + cleanPhone);
            // Formato s√≥ DDD + n√∫mero
            formats.push(cleanPhone);
        }
        
        // Remover duplicatas e retornar apenas formatos limpos
        return [...new Set(formats)];
        
    } catch (error) {
        console.error('‚ùå Erro ao gerar formatos de telefone:', maskPhoneForLog(phone || ''), error.message);
        return []; // Retornar array vazio em caso de erro
    }
}

// Cache simples para card√°pios (mem√≥ria, TTL 10 minutos)
const menuCache = new Map();
const MENU_CACHE_TTL = 10 * 60 * 1000; // 10 minutos em millisegundos

function getFromMenuCache(restaurantId) {
    const cached = menuCache.get(restaurantId);
    if (cached && Date.now() - cached.timestamp < MENU_CACHE_TTL) {
        console.log('üì¶ Card√°pio carregado do cache para restaurante:', restaurantId);
        return cached.data;
    }
    return null;
}

function setMenuCache(restaurantId, data) {
    menuCache.set(restaurantId, {
        data: data,
        timestamp: Date.now()
    });
    console.log('üì¶ Card√°pio salvo no cache para restaurante:', restaurantId);
}

// Fun√ß√£o para detectar palavras-chave MCP
function detectMCPKeywords(message) {
    const mcpKeywords = [
        'mcp', 'database', 'banco de dados', 'consulta', 'query', 
        'tabela', 'dados', 'sql', 'supabase', 'buscar dados', 
        'verificar banco', 'consultar base', 'dados do sistema',
        'restaurante', 'restaurant', 'pedido', 'order', 'cliente', 'customer',
        'produto', 'product', 'entregador', 'deliverer', 'delivery',
        'cupom', 'coupon', 'desconto', 'notificacao', 'notification',
        'log', 'atividade', 'activity', 'chat', 'conversa', 'message',
        'prompt', 'prompit', 'administrador', 'admin', 'usuario', 'user',
        'tipo negocio', 'business type', 'relatorio', 'report', 'estatistica',
        // Palavras-chave para cria√ß√£o de pedidos
        'criar pedido', 'novo pedido', 'fazer pedido', 'create order', 'new order',
        'pedido delivery', 'pedido balcao', 'balc√£o', 'counter order', 'delivery order',
        'finalizar pedido', 'processar pedido', 'salvar pedido', 'complete order'
    ];
    
    const messageNormalized = message.toLowerCase().trim();
    return mcpKeywords.some(keyword => messageNormalized.includes(keyword));
}

// Fun√ß√£o para consultar dados do Supabase (simula√ß√£o MCP simplificada)
async function executeSupabaseQuery(command, params = {}) {
    try {
        console.log('üîß Executando consulta Supabase:', command, params);
        
        // Criar cliente Supabase
        const { createClient } = require('@supabase/supabase-js');
        
        // Auto-detect and fix swapped environment variables
        let supabaseUrl = process.env.SUPABASE_URL;
        let supabaseAnonKey = process.env.SUPABASE_ANON_KEY;
        let supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || supabaseAnonKey;

        if (supabaseUrl && supabaseUrl.startsWith('eyJ') && supabaseAnonKey && supabaseAnonKey.startsWith('https://')) {
            console.log('üîÑ executeSupabaseQuery auto-detecting swapped SUPABASE_URL and SUPABASE_ANON_KEY - fixing automatically');
            const temp = supabaseUrl;
            supabaseUrl = supabaseAnonKey;
            supabaseAnonKey = temp;
            supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || supabaseAnonKey;
        }
        
        if (!supabaseUrl || !supabaseKey) {
            throw new Error('Configura√ß√£o Supabase incompleta');
        }
        
        const supabaseClient = createClient(supabaseUrl, supabaseKey);
        
        let result = null;
        
        // Comandos baseados no schema completo do TimePulse AI
        switch (command) {
            case 'list_tables':
                result = {
                    message: 'Tabelas dispon√≠veis no TimePulse AI Database',
                    tables: [
                        'activity_logs', 'add_on_categories', 'admin_action_logs', 'buffer_mensagem',
                        'business_types', 'chat_histories', 'coupon_usage', 'coupons',
                        'custom_payment_methods', 'customers', 'deliverers', 'delivery_baixa_dia',
                        'notifications', 'order_items', 'orders', 'product_add_on_categories_link',
                        'product_add_ons', 'product_categories', 'product_to_product_add_ons_link',
                        'products', 'prompit', 'provisional_order_items', 'restaurants',
                        'system_administrators', 'system_settings', 'withdrawal_requests'
                    ],
                    categories: {
                        'core': ['restaurants', 'orders', 'order_items', 'customers'],
                        'products': ['products', 'product_categories', 'product_add_ons', 'add_on_categories'],
                        'delivery': ['deliverers', 'delivery_baixa_dia', 'withdrawal_requests'],
                        'business': ['coupons', 'coupon_usage', 'custom_payment_methods', 'business_types'],
                        'system': ['activity_logs', 'admin_action_logs', 'notifications', 'system_administrators', 'system_settings'],
                        'chat': ['chat_histories', 'prompit', 'buffer_mensagem'],
                        'temp': ['provisional_order_items']
                    }
                };
                break;
                
            case 'restaurants_data':
                if (params.instance) {
                    // Busca por inst√¢ncia espec√≠fica (usado no webhook)
                    console.log('üîç Buscando restaurante por inst√¢ncia:', params.instance);
                    
                    const { data: restaurant, error: restaurantError } = await supabaseClient
                        .from('restaurants')
                        .select(`
                            id, name, owner_name, owner_phone, business_type, 
                            city, status, plan, subscription_status, 
                            trial_days_remaining, delivery_fee,
                            opening_hours, business_phone, business_address
                        `)
                        .eq('name', params.instance)
                        .single();
                        
                    if (restaurantError && restaurantError.code !== 'PGRST116') {
                        console.log('‚ö†Ô∏è Erro ao buscar restaurante:', restaurantError);
                        throw restaurantError;
                    }
                    
                    result = { 
                        restaurant: restaurant,
                        found: !!restaurant
                    };
                } else {
                    // Busca geral (usado no admin)
                    const { data: restaurants, error: restaurantsError } = await supabaseClient
                        .from('restaurants')
                        .select('id, name, owner_name, owner_phone, business_type, city, status, plan, subscription_status, trial_days_remaining')
                        .limit(params.limit || 5);
                        
                    if (restaurantsError) throw restaurantsError;
                    result = { count: restaurants?.length || 0, data: restaurants };
                }
                break;
                
            case 'orders_data':
                const { data: orders, error: ordersError } = await supabaseClient
                    .from('orders')
                    .select('id, restaurant_id, customer_name, customer_phone, status, total, payment_method, payment_status, created_at')
                    .limit(params.limit || 5)
                    .order('created_at', { ascending: false });
                    
                if (ordersError) throw ordersError;
                result = { count: orders?.length || 0, data: orders };
                break;
                
            case 'order_items_data':
                const { data: orderItems, error: orderItemsError } = await supabaseClient
                    .from('order_items')
                    .select('id, order_id, product_name, quantity, price, selected_add_ons, status')
                    .limit(params.limit || 5);
                    
                if (orderItemsError) throw orderItemsError;
                result = { count: orderItems?.length || 0, data: orderItems };
                break;
                
            case 'customers_data':
                if (params.phone) {
                    // Busca por telefone espec√≠fico (usado no webhook)
                    const normalizedPhone = normalizeWhatsAppJid(params.phone);
                    const phoneFormats = generatePhoneFormats(params.phone)
                        .filter(format => format !== params.phone); // Remove formato original para evitar JID
                    
                    // M√°scara universal do telefone para logs (seguran√ßa)
                    const maskedPhone = maskPhoneForLog(normalizedPhone);
                    console.log('üîç Buscando cliente por telefone:', maskedPhone);
                    console.log('üìû Tentando', phoneFormats.length, 'formatos de telefone');
                    
                    let customer = null;
                    
                    // SEGURAN√áA: Verificar se restaurant_id √© obrigat√≥rio
                    if (!params.restaurant_id) {
                        throw new Error('restaurant_id √© obrigat√≥rio para busca de clientes');
                    }
                    
                    // Busca otimizada: uma √∫nica query com m√∫ltiplos formatos (se dispon√≠veis)
                    if (phoneFormats.length > 0) {
                        try {
                            const { data: customers, error: searchError } = await supabaseClient
                                .from('customers')
                                .select(`
                                    id, restaurant_id, name, phone, email, address, 
                                    total_orders, total_spent, created_at
                                `)
                                .eq('restaurant_id', params.restaurant_id)
                                .in('phone', phoneFormats)
                                .limit(1);
                            
                            if (searchError) {
                                console.log('‚ö†Ô∏è Erro na busca otimizada:', searchError.message);
                            } else if (customers && customers.length > 0) {
                                customer = customers[0];
                                console.log(`‚úÖ Cliente encontrado via busca otimizada`);
                            }
                        } catch (error) {
                            console.log('‚ö†Ô∏è Erro na busca principal:', error.message);
                        }
                    }
                    
                    // Fallback: busca com LIKE se n√£o encontrou OU n√£o h√° formatos v√°lidos
                    if (!customer) {
                        try {
                            if (!params.restaurant_id) {
                                console.log('‚ö†Ô∏è Pulando busca LIKE: restaurant_id obrigat√≥rio');
                            } else {
                                const cleanDigits = params.phone.replace(/[^0-9]/g, '');
                                // Usar apenas √∫ltimos 9-11 d√≠gitos para fallback mais seguro
                                const searchDigits = cleanDigits.slice(-11).slice(-9);
                                
                                const { data: likeResults, error: likeError } = await supabaseClient
                                    .from('customers')
                                    .select(`
                                        id, restaurant_id, name, phone, email, address, 
                                        total_orders, total_spent, created_at
                                    `)
                                    .eq('restaurant_id', params.restaurant_id)
                                    .ilike('phone', `%${searchDigits}%`)
                                    .limit(1);
                                    
                                if (likeResults && likeResults.length > 0) {
                                    customer = likeResults[0];
                                    console.log(`‚úÖ Cliente encontrado via busca LIKE fallback`);
                                }
                            }
                        } catch (error) {
                            console.log('‚ö†Ô∏è Erro na busca LIKE:', error.message);
                        }
                    }
                    
                    result = { 
                        customer: customer,
                        found: !!customer,
                        normalizedPhone: normalizedPhone,
                        searchedFormats: phoneFormats.length
                    };
                } else {
                    // Busca geral (usado no admin)
                    const { data: customers, error: customersError } = await supabaseClient
                        .from('customers')
                        .select('id, restaurant_id, name, phone, email, total_orders, total_spent, created_at')
                        .limit(params.limit || 5);
                        
                    if (customersError) throw customersError;
                    result = { count: customers?.length || 0, data: customers };
                }
                break;
                
            case 'products_data':
                if (params.restaurant_id) {
                    // Busca card√°pio completo para um restaurante (usado no webhook)
                    console.log('üîç Buscando card√°pio completo para restaurante:', params.restaurant_id);
                    
                    // Verificar cache primeiro
                    const cachedMenu = getFromMenuCache(params.restaurant_id);
                    if (cachedMenu) {
                        result = cachedMenu;
                        break;
                    }
                    
                    // Buscar categorias ativas
                    const { data: categories, error: categoriesError } = await supabaseClient
                        .from('product_categories')
                        .select('id, name, description, active')
                        .eq('restaurant_id', params.restaurant_id)
                        .eq('active', true)
                        .order('name');
                    
                    if (categoriesError) throw categoriesError;
                    
                    // Buscar produtos ativos com categorias
                    const { data: products, error: productsError } = await supabaseClient
                        .from('products')
                        .select(`
                            id, name, description, price, active, 
                            preparation_time, category_id,
                            category:product_categories(id, name)
                        `)
                        .eq('restaurant_id', params.restaurant_id)
                        .eq('active', true)
                        .not('category_id', 'is', null)
                        .order('name');
                        
                    if (productsError) throw productsError;
                    
                    // Buscar links de categorias de adicionais para produtos (consulta simplificada)
                    const { data: addOnLinks, error: addOnLinksError } = await supabaseClient
                        .from('product_add_on_categories_link')
                        .select(`
                            product_id,
                            add_on_category_id
                        `)
                        .in('product_id', products.map(p => p.id));
                        
                    if (addOnLinksError) {
                        console.warn('‚ö†Ô∏è Erro ao buscar links de adicionais:', addOnLinksError);
                        // Continuar sem adicionais em caso de erro
                    }
                    
                    // Organizar card√°pio por categorias com produtos (sem adicionais por enquanto)
                    const menuStructure = {
                        categories: categories.map(cat => ({
                            ...cat,
                            products: products
                                .filter(prod => prod.category_id === cat.id)
                                .map(prod => ({
                                    ...prod,
                                    add_on_categories: addOnLinks && !addOnLinksError 
                                        ? addOnLinks.filter(link => link.product_id === prod.id).map(link => ({ id: link.add_on_category_id }))
                                        : []
                                }))
                        })).filter(cat => cat.products.length > 0),
                        total_products: products.length,
                        total_categories: categories.length
                    };
                    
                    // Salvar no cache
                    setMenuCache(params.restaurant_id, menuStructure);
                    
                    result = menuStructure;
                } else {
                    // Busca geral (usado no admin)
                    const { data: products, error: productsError } = await supabaseClient
                        .from('products')
                        .select('id, restaurant_id, name, description, price, active, preparation_time, category_id')
                        .limit(params.limit || 5);
                        
                    if (productsError) throw productsError;
                    result = { count: products?.length || 0, data: products };
                }
                break;
                
            case 'deliverers_data':
                const { data: deliverers, error: deliverersError } = await supabaseClient
                    .from('deliverers')
                    .select('id, restaurant_id, name, phone, type, status, balance, total_deliveries, rating')
                    .limit(params.limit || 5);
                    
                if (deliverersError) throw deliverersError;
                result = { count: deliverers?.length || 0, data: deliverers };
                break;
                
            case 'coupons_data':
                const { data: coupons, error: couponsError } = await supabaseClient
                    .from('coupons')
                    .select('id, restaurant_id, code, name, discount_type, discount_value, usage_count, active, valid_until')
                    .limit(params.limit || 5);
                    
                if (couponsError) throw couponsError;
                result = { count: coupons?.length || 0, data: coupons };
                break;
                
            case 'notifications_data':
                const { data: notifications, error: notificationsError } = await supabaseClient
                    .from('notifications')
                    .select('id, restaurant_id, title, message, type, read_at, created_at')
                    .limit(params.limit || 5)
                    .order('created_at', { ascending: false });
                    
                if (notificationsError) throw notificationsError;
                result = { count: notifications?.length || 0, data: notifications };
                break;
                
            case 'activity_logs_data':
                const { data: activityLogs, error: activityLogsError } = await supabaseClient
                    .from('activity_logs')
                    .select('id, restaurant_id, user_name, action, entity_type, description, created_at')
                    .limit(params.limit || 5)
                    .order('created_at', { ascending: false });
                    
                if (activityLogsError) throw activityLogsError;
                result = { count: activityLogs?.length || 0, data: activityLogs };
                break;
                
            case 'chat_histories_data':
                const { data: chatHistories, error: chatHistoriesError } = await supabaseClient
                    .from('chat_histories')
                    .select('id, session_id, message')
                    .limit(params.limit || 5);
                    
                if (chatHistoriesError) throw chatHistoriesError;
                result = { count: chatHistories?.length || 0, data: chatHistories };
                break;
                
            case 'prompit_data':
                const { data: prompit, error: prompitError } = await supabaseClient
                    .from('prompit')
                    .select('id, tipo_negocio, prompt, active, created_at')
                    .limit(params.limit || 5);
                    
                if (prompitError) throw prompitError;
                result = { count: prompit?.length || 0, data: prompit };
                break;
                
            case 'business_types_data':
                const { data: businessTypes, error: businessTypesError } = await supabaseClient
                    .from('business_types')
                    .select('id, name, description, active, created_at')
                    .limit(params.limit || 5);
                    
                if (businessTypesError) throw businessTypesError;
                result = { count: businessTypes?.length || 0, data: businessTypes };
                break;
                
            case 'system_administrators_data':
                const { data: admins, error: adminsError } = await supabaseClient
                    .from('system_administrators')
                    .select('id, email, name, role, last_login, active, created_at')
                    .limit(params.limit || 5);
                    
                if (adminsError) throw adminsError;
                result = { count: admins?.length || 0, data: admins };
                break;
                
            case 'add_on_categories_data':
                const { data: addOnCategories, error: addOnCategoriesError } = await supabaseClient
                    .from('add_on_categories')
                    .select('id, restaurant_id, name, description, selection_type, min_selection, max_selection')
                    .limit(params.limit || 5);
                    
                if (addOnCategoriesError) throw addOnCategoriesError;
                result = { count: addOnCategories?.length || 0, data: addOnCategories };
                break;
                
            case 'product_categories_data':
                const { data: productCategories, error: productCategoriesError } = await supabaseClient
                    .from('product_categories')
                    .select('id, restaurant_id, name, description, display_order, active')
                    .limit(params.limit || 5);
                    
                if (productCategoriesError) throw productCategoriesError;
                result = { count: productCategories?.length || 0, data: productCategories };
                break;
                
            case 'product_add_ons_data':
                const { data: productAddOns, error: productAddOnsError } = await supabaseClient
                    .from('product_add_ons')
                    .select('id, add_on_category_id, restaurant_id, name, price, active')
                    .limit(params.limit || 5);
                    
                if (productAddOnsError) throw productAddOnsError;
                result = { count: productAddOns?.length || 0, data: productAddOns };
                break;
                
            case 'custom_payment_methods_data':
                const { data: paymentMethods, error: paymentMethodsError } = await supabaseClient
                    .from('custom_payment_methods')
                    .select('id, restaurant_id, name, description, enabled, requires_change, icon')
                    .limit(params.limit || 5);
                    
                if (paymentMethodsError) throw paymentMethodsError;
                result = { count: paymentMethods?.length || 0, data: paymentMethods };
                break;
                
            case 'system_settings_data':
                const { data: systemSettings, error: systemSettingsError } = await supabaseClient
                    .from('system_settings')
                    .select('id, restaurant_id, setting_key, setting_value, description, updated_at')
                    .limit(params.limit || 5);
                    
                if (systemSettingsError) throw systemSettingsError;
                result = { count: systemSettings?.length || 0, data: systemSettings };
                break;
                
            case 'withdrawal_requests_data':
                const { data: withdrawalRequests, error: withdrawalRequestsError } = await supabaseClient
                    .from('withdrawal_requests')
                    .select('id, restaurant_id, deliverer_id, amount, status, bank_name, account_holder, created_at')
                    .limit(params.limit || 5);
                    
                if (withdrawalRequestsError) throw withdrawalRequestsError;
                result = { count: withdrawalRequests?.length || 0, data: withdrawalRequests };
                break;
                
            case 'delivery_baixa_dia_data':
                const { data: deliveryBaixa, error: deliveryBaixaError } = await supabaseClient
                    .from('delivery_baixa_dia')
                    .select('id, restaurant_id, deliverer_id, order_id, data_baixa, valor_pago, status')
                    .limit(params.limit || 5);
                    
                if (deliveryBaixaError) throw deliveryBaixaError;
                result = { count: deliveryBaixa?.length || 0, data: deliveryBaixa };
                break;
                
            case 'buffer_mensagem_data':
                const { data: bufferMessages, error: bufferMessagesError } = await supabaseClient
                    .from('buffer_mensagem')
                    .select('id, cell, message, idMessage, timestamp, created_at')
                    .limit(params.limit || 5)
                    .order('created_at', { ascending: false });
                    
                if (bufferMessagesError) throw bufferMessagesError;
                result = { count: bufferMessages?.length || 0, data: bufferMessages };
                break;
                
            // Comandos para cria√ß√£o de pedidos
            case 'create_delivery_order':
                // Validar restaurant_id da sess√£o (cr√≠tico para seguran√ßa multi-tenant)
                if (!params.restaurant_id) {
                    throw new Error('Restaurant ID da sess√£o n√£o encontrado - falha de autentica√ß√£o');
                }
                
                // Validar par√¢metros obrigat√≥rios para delivery
                if (!params.customer_name || !params.customer_phone || !params.delivery_address) {
                    throw new Error('Par√¢metros obrigat√≥rios: customer_name, customer_phone, delivery_address');
                }
                
                if (!params.items || !Array.isArray(params.items) || params.items.length === 0) {
                    throw new Error('√â necess√°rio incluir pelo menos um item no pedido');
                }
                
                // Valida√ß√µes de sanidade dos itens (delivery)
                for (let i = 0; i < params.items.length; i++) {
                    const item = params.items[i];
                    const quantity = parseInt(item.quantity) || 0;
                    const price = parseFloat(item.price || item.unit_price) || 0;
                    
                    if (quantity <= 0) {
                        throw new Error(`Item ${i + 1}: Quantidade deve ser maior que zero`);
                    }
                    if (price < 0) {
                        throw new Error(`Item ${i + 1}: Pre√ßo n√£o pode ser negativo`);
                    }
                    if (!item.name && !item.product_name) {
                        throw new Error(`Item ${i + 1}: Nome do produto √© obrigat√≥rio`);
                    }
                }
                
                // Criar pedido de delivery
                const deliveryOrderData = {
                    restaurant_id: params.restaurant_id, // Sempre da sess√£o autenticada
                    customer_name: params.customer_name.trim(),
                    customer_phone: params.customer_phone.trim(),
                    delivery_address: params.delivery_address.trim(),
                    zip_code: params.zip_code || null,
                    delivery_fee: parseFloat(params.delivery_fee) || 5.00,
                    payment_method: params.payment_method || 'PIX',
                    notes: params.notes || 'Pedido criado via MCP - Assistente Ana',
                    subtotal: params.subtotal || 0,
                    total: params.total_amount || (params.subtotal || 0) + (parseFloat(params.delivery_fee) || 5.00),
                    cash_received: params.cash_received || null,
                    status: 'novo',
                    order_type: 'delivery',
                    created_at: new Date().toISOString()
                };
                
                const { data: newDeliveryOrder, error: deliveryOrderError } = await supabaseClient
                    .from('orders')
                    .insert([deliveryOrderData])
                    .select()
                    .single();
                    
                if (deliveryOrderError) throw deliveryOrderError;
                
                // Inserir itens do pedido
                const deliveryOrderItems = params.items.map(item => ({
                    order_id: newDeliveryOrder.id,
                    product_name: item.name || item.product_name,
                    quantity: parseInt(item.quantity) || 1,
                    unit_price: parseFloat(item.price || item.unit_price) || 0,
                    total_price: (parseFloat(item.price || item.unit_price) || 0) * (parseInt(item.quantity) || 1),
                    notes: item.notes || null
                }));
                
                const { error: deliveryItemsError } = await supabaseClient
                    .from('order_items')
                    .insert(deliveryOrderItems);
                    
                if (deliveryItemsError) {
                    // Rollback: remover pedido se falha ao inserir itens
                    await supabaseClient.from('orders').delete().eq('id', newDeliveryOrder.id);
                    throw deliveryItemsError;
                }
                
                result = {
                    success: true,
                    message: 'Pedido de delivery criado com sucesso!',
                    order: newDeliveryOrder,
                    items: deliveryOrderItems
                };
                break;
                
            case 'create_counter_order':
                // Validar restaurant_id da sess√£o (cr√≠tico para seguran√ßa multi-tenant)
                if (!params.restaurant_id) {
                    throw new Error('Restaurant ID da sess√£o n√£o encontrado - falha de autentica√ß√£o');
                }
                
                // Validar par√¢metros m√≠nimos para balc√£o
                if (!params.items || !Array.isArray(params.items) || params.items.length === 0) {
                    throw new Error('√â necess√°rio incluir pelo menos um item no pedido');
                }
                
                // Valida√ß√µes de sanidade dos itens (balc√£o)
                for (let i = 0; i < params.items.length; i++) {
                    const item = params.items[i];
                    const quantity = parseInt(item.quantity) || 0;
                    const price = parseFloat(item.price || item.unit_price) || 0;
                    
                    if (quantity <= 0) {
                        throw new Error(`Item ${i + 1}: Quantidade deve ser maior que zero`);
                    }
                    if (price < 0) {
                        throw new Error(`Item ${i + 1}: Pre√ßo n√£o pode ser negativo`);
                    }
                    if (!item.name && !item.product_name) {
                        throw new Error(`Item ${i + 1}: Nome do produto √© obrigat√≥rio`);
                    }
                }
                
                // Criar pedido de balc√£o
                const counterOrderData = {
                    restaurant_id: params.restaurant_id, // Sempre da sess√£o autenticada
                    customer_name: params.customer_name?.trim() || 'Cliente de Balc√£o',
                    customer_phone: params.customer_phone?.trim() || 'N/A',
                    delivery_address: 'Balc√£o',
                    delivery_fee: 0,
                    payment_method: params.payment_method || 'money',
                    notes: params.notes || 'Pedido de balc√£o criado via MCP - Assistente Ana',
                    subtotal: params.subtotal || 0,
                    total: params.total_amount || params.subtotal || 0,
                    cash_received: params.cash_received || null,
                    status: 'novo',
                    order_type: 'balcao',
                    created_at: new Date().toISOString()
                };
                
                const { data: newCounterOrder, error: counterOrderError } = await supabaseClient
                    .from('orders')
                    .insert([counterOrderData])
                    .select()
                    .single();
                    
                if (counterOrderError) throw counterOrderError;
                
                // Inserir itens do pedido
                const counterOrderItems = params.items.map(item => ({
                    order_id: newCounterOrder.id,
                    product_name: item.name || item.product_name,
                    quantity: parseInt(item.quantity) || 1,
                    unit_price: parseFloat(item.price || item.unit_price) || 0,
                    total_price: (parseFloat(item.price || item.unit_price) || 0) * (parseInt(item.quantity) || 1),
                    notes: item.notes || null
                }));
                
                const { error: counterItemsError } = await supabaseClient
                    .from('order_items')
                    .insert(counterOrderItems);
                    
                if (counterItemsError) {
                    // Rollback: remover pedido se falha ao inserir itens
                    await supabaseClient.from('orders').delete().eq('id', newCounterOrder.id);
                    throw counterItemsError;
                }
                
                result = {
                    success: true,
                    message: 'Pedido de balc√£o criado com sucesso!',
                    order: newCounterOrder,
                    items: counterOrderItems
                };
                break;
                
            default:
                result = { 
                    message: 'Comando n√£o reconhecido. Tools dispon√≠veis:',
                    tools: [
                        'list_tables', 'restaurants_data', 'orders_data', 'order_items_data',
                        'customers_data', 'products_data', 'deliverers_data', 'coupons_data',
                        'notifications_data', 'activity_logs_data', 'chat_histories_data',
                        'prompit_data', 'business_types_data', 'system_administrators_data',
                        'add_on_categories_data', 'product_categories_data', 'product_add_ons_data',
                        'custom_payment_methods_data', 'system_settings_data', 'withdrawal_requests_data',
                        'delivery_baixa_dia_data', 'buffer_mensagem_data',
                        // Comandos para cria√ß√£o de pedidos
                        'create_delivery_order', 'create_counter_order'
                    ],
                    order_creation: {
                        delivery: {
                            command: 'create_delivery_order',
                            required: ['customer_name', 'customer_phone', 'delivery_address', 'items'],
                            optional: ['delivery_fee', 'payment_method', 'notes', 'zip_code']
                        },
                        counter: {
                            command: 'create_counter_order',
                            required: ['items'],
                            optional: ['customer_name', 'customer_phone', 'payment_method', 'notes']
                        }
                    }
                };
        }
        
        console.log('‚úÖ Consulta Supabase executada com sucesso');
        return result;
        
    } catch (error) {
        console.error('‚ùå Erro ao consultar Supabase:', error);
        throw error;
    }
}

// Endpoint para ativar MCP via palavra-chave
app.post('/api/mcp/activate', authenticateEvolutionAPI, rateLimitEvolutionAPI(10), csrfProtection, async (req, res) => {
    try {
        const { message } = req.body;
        
        console.log('üîß Tentativa de ativa√ß√£o MCP:', { message });
        
        // Verificar se a mensagem cont√©m palavras-chave MCP
        if (message && !detectMCPKeywords(message)) {
            return res.json({
                mcpActivated: false,
                response: 'Nenhuma palavra-chave de database detectada. Tente: "dados", "consulta", "banco de dados"',
                keywords: ['mcp', 'database', 'banco de dados', 'consulta', 'dados']
            });
        }
        
        // Determinar comando seguro baseado na mensagem (n√£o aceitar comando arbitr√°rio)
        let queryCommand = 'list_tables';
        let queryParams = { limit: 5 };
        
        if (message) {
            const msg = message.toLowerCase();
            
            // Prioridade 1: Comandos de cria√ß√£o de pedidos
            if (msg.includes('criar pedido') || msg.includes('novo pedido') || msg.includes('fazer pedido') || 
                msg.includes('create order') || msg.includes('new order') || msg.includes('finalizar pedido')) {
                
                if (msg.includes('delivery') || msg.includes('entrega')) {
                    queryCommand = 'create_delivery_order';
                } else if (msg.includes('balcao') || msg.includes('balc√£o') || msg.includes('counter')) {
                    queryCommand = 'create_counter_order';
                } else {
                    // Se n√£o especificar tipo, assumir delivery como padr√£o
                    queryCommand = 'create_delivery_order';
                }
                
            // Prioridade 2: Consultas de dados existentes
            } else if (msg.includes('restaurante') || msg.includes('restaurant')) {
                queryCommand = 'restaurants_data';
            } else if (msg.includes('pedido') || msg.includes('order')) {
                queryCommand = 'orders_data';
            } else if (msg.includes('item') || msg.includes('product') || msg.includes('produto')) {
                if (msg.includes('pedido') || msg.includes('order')) {
                    queryCommand = 'order_items_data';
                } else {
                    queryCommand = 'products_data';
                }
            } else if (msg.includes('cliente') || msg.includes('customer')) {
                queryCommand = 'customers_data';
            } else if (msg.includes('entregador') || msg.includes('deliverer') || msg.includes('delivery')) {
                queryCommand = 'deliverers_data';
            } else if (msg.includes('cupom') || msg.includes('coupon') || msg.includes('desconto')) {
                queryCommand = 'coupons_data';
            } else if (msg.includes('notifica') || msg.includes('notification')) {
                queryCommand = 'notifications_data';
            } else if (msg.includes('log') || msg.includes('atividade') || msg.includes('activity')) {
                queryCommand = 'activity_logs_data';
            } else if (msg.includes('chat') || msg.includes('conversa') || msg.includes('message')) {
                queryCommand = 'chat_histories_data';
            } else if (msg.includes('prompt') || msg.includes('prompit') || msg.includes('negocio')) {
                queryCommand = 'prompit_data';
            } else if (msg.includes('tipo') && msg.includes('negocio')) {
                queryCommand = 'business_types_data';
            } else if (msg.includes('admin') || msg.includes('administrador')) {
                queryCommand = 'system_administrators_data';
            } else if (msg.includes('usuario') || msg.includes('user')) {
                queryCommand = 'customers_data';
            }
        }
        
        // Adicionar restaurant_id da sess√£o de forma segura para comandos que precisam
        if (queryCommand.includes('create_') || queryCommand.includes('_data')) {
            if (!req.session?.restaurantId) {
                return res.status(401).json({
                    mcpActivated: false,
                    error: 'Sess√£o de restaurante n√£o encontrada',
                    details: '√â necess√°rio estar logado em um restaurante para usar o MCP'
                });
            }
            queryParams.restaurant_id = req.session.restaurantId;
        }
        
        // Executar consulta Supabase
        let queryResult = null;
        try {
            queryResult = await executeSupabaseQuery(queryCommand, queryParams);
        } catch (queryError) {
            console.error('‚ùå Erro na consulta Supabase:', queryError);
            return res.json({
                mcpActivated: true,
                response: 'Erro ao consultar dados do banco. Tente novamente.',
                error: queryError.message
            });
        }
        
        // Resposta no formato esperado pelo frontend
        const formattedData = queryResult ? JSON.stringify(queryResult, null, 2) : 'Nenhum dado encontrado';
        
        res.json({
            mcpActivated: true,
            response: `üîß **Database Query Ativado**\n\nConsulta: ${queryCommand}\nResultados:\n\`\`\`\n${formattedData}\n\`\`\`\n\nComo posso ajudar com esses dados?`,
            data: queryResult,
            timestamp: new Date().toISOString()
        });
        
    } catch (error) {
        console.error('‚ùå Erro ao ativar MCP:', error);
        res.status(500).json({
            error: 'Erro interno ao ativar MCP',
            details: error.message
        });
    }
});

// Endpoint para processar mensagem com MCP integrado
app.post('/api/mcp/process', authenticateEvolutionAPI, rateLimitEvolutionAPI(20), csrfProtection, async (req, res) => {
    try {
        const { message } = req.body; // Remover restaurantId do body para evitar spoofing
        
        console.log('üí¨ Processando mensagem com MCP:', { message, sessionRestaurantId: req.session?.restaurantId });
        
        // Verificar se deve ativar MCP
        const shouldActivateMCP = detectMCPKeywords(message);
        let mcpData = null;
        
        if (shouldActivateMCP) {
            console.log('üîß Palavra-chave MCP detectada, ativando...');
            
            try {
                // Determinar comando baseado na mensagem
                let queryCommand = 'list_tables';
                let queryParams = { limit: 5 };
                
                const msg = message.toLowerCase();
                // Prioridade 1: Comandos de cria√ß√£o de pedidos
                if (msg.includes('criar pedido') || msg.includes('novo pedido') || msg.includes('fazer pedido') || 
                    msg.includes('create order') || msg.includes('new order') || msg.includes('finalizar pedido')) {
                    
                    if (msg.includes('delivery') || msg.includes('entrega')) {
                        queryCommand = 'create_delivery_order';
                    } else if (msg.includes('balcao') || msg.includes('balc√£o') || msg.includes('counter')) {
                        queryCommand = 'create_counter_order';
                    } else {
                        // Se n√£o especificar tipo, assumir delivery como padr√£o
                        queryCommand = 'create_delivery_order';
                    }
                    
                // Prioridade 2: Consultas de dados existentes
                } else if (msg.includes('restaurante') || msg.includes('restaurant')) {
                    queryCommand = 'restaurants_data';
                } else if (msg.includes('pedido') || msg.includes('order')) {
                    queryCommand = 'orders_data';
                } else if (msg.includes('item') || msg.includes('produto') || msg.includes('product')) {
                    if (msg.includes('pedido') || msg.includes('order')) {
                        queryCommand = 'order_items_data';
                    } else {
                        queryCommand = 'products_data';
                    }
                } else if (msg.includes('cliente') || msg.includes('customer')) {
                    queryCommand = 'customers_data';
                } else if (msg.includes('entregador') || msg.includes('deliverer') || msg.includes('delivery')) {
                    queryCommand = 'deliverers_data';
                } else if (msg.includes('cupom') || msg.includes('coupon') || msg.includes('desconto')) {
                    queryCommand = 'coupons_data';
                } else if (msg.includes('notifica') || msg.includes('notification')) {
                    queryCommand = 'notifications_data';
                } else if (msg.includes('log') || msg.includes('atividade') || msg.includes('activity')) {
                    queryCommand = 'activity_logs_data';
                } else if (msg.includes('chat') || msg.includes('conversa') || msg.includes('message')) {
                    queryCommand = 'chat_histories_data';
                } else if (msg.includes('prompt') || msg.includes('prompit') || msg.includes('negocio')) {
                    queryCommand = 'prompit_data';
                } else if (msg.includes('tipo') && msg.includes('negocio')) {
                    queryCommand = 'business_types_data';
                } else if (msg.includes('admin') || msg.includes('administrador')) {
                    queryCommand = 'system_administrators_data';
                } else if (msg.includes('usuario') || msg.includes('user')) {
                    queryCommand = 'customers_data';
                }
                
                // Adicionar restaurant_id da sess√£o de forma segura para comandos que precisam
                if (queryCommand.includes('create_') || queryCommand.includes('_data')) {
                    if (!req.session?.restaurantId) {
                        throw new Error('Sess√£o de restaurante n√£o encontrada - necess√°rio estar logado');
                    }
                    queryParams.restaurant_id = req.session.restaurantId;
                }
                
                mcpData = await executeSupabaseQuery(queryCommand, queryParams);
                
            } catch (mcpError) {
                console.warn('‚ö†Ô∏è Erro ao executar MCP, continuando sem dados:', mcpError.message);
                mcpData = `Erro ao consultar dados: ${mcpError.message}`;
            }
        }
        
        // Processar mensagem normalmente, mas incluir dados MCP se dispon√≠vel
        let responseMessage;
        
        if (shouldActivateMCP && mcpData) {
            responseMessage = `üîß **MCP Ativado** 

Dados consultados no banco:
${typeof mcpData === 'string' ? mcpData : JSON.stringify(mcpData, null, 2)}

Como posso ajudar voc√™ com esses dados?`;
        } else {
            // Processar como mensagem normal
            responseMessage = `Recebi sua mensagem: "${message}". ${shouldActivateMCP ? 'Palavras-chave de database detectadas, mas n√£o foi poss√≠vel consultar os dados no momento.' : 'Como posso ajudar?'}`;
        }
        
        res.json({
            response: responseMessage,
            mcpActivated: shouldActivateMCP,
            mcpData: mcpData,
            timestamp: new Date().toISOString()
        });
        
    } catch (error) {
        console.error('‚ùå Erro ao processar chat com MCP:', error);
        res.status(500).json({
            error: 'Erro ao processar mensagem',
            details: error.message
        });
    }
});

// Endpoint para configurar MCP
app.get('/api/mcp/config', (req, res) => {
    res.json({
        status: 'available',
        version: '2.0',
        description: 'TimePulse AI MCP Server - Acesso completo ao banco de dados',
        keywords: [
            'mcp', 'database', 'banco de dados', 'consulta', 'query', 
            'tabela', 'dados', 'sql', 'supabase', 'buscar dados', 
            'verificar banco', 'consultar base', 'dados do sistema',
            'restaurante', 'restaurant', 'pedido', 'order', 'cliente', 'customer',
            'produto', 'product', 'entregador', 'deliverer', 'delivery',
            'cupom', 'coupon', 'desconto', 'notificacao', 'notification',
            'log', 'atividade', 'activity', 'chat', 'conversa', 'message',
            'prompt', 'prompit', 'administrador', 'admin', 'usuario', 'user',
            'tipo negocio', 'business type', 'relatorio', 'report', 'estatistica'
        ],
        tools: [
            'list_tables', 'restaurants_data', 'orders_data', 'order_items_data',
            'customers_data', 'products_data', 'deliverers_data', 'coupons_data',
            'notifications_data', 'activity_logs_data', 'chat_histories_data',
            'prompit_data', 'business_types_data', 'system_administrators_data',
            'add_on_categories_data', 'product_categories_data', 'product_add_ons_data',
            'custom_payment_methods_data', 'system_settings_data', 'withdrawal_requests_data',
            'delivery_baixa_dia_data', 'buffer_mensagem_data'
        ],
        supabaseConfigured: !!(process.env.SUPABASE_URL && process.env.SUPABASE_ANON_KEY),
        projectRef: process.env.SUPABASE_URL?.split('//')[1]?.split('.')[0] || 'sguirxaunajirfvlzbac',
        timestamp: new Date().toISOString()
    });
});

// =================================================================
// END MCP INTEGRATION
// =================================================================

// =================================================================
// SISTEMA DE VERIFICA√á√ÉO AUTOM√ÅTICA DE ASSINATURAS VENCIDAS
// =================================================================

/**
 * Verifica assinaturas vencidas e atualiza status automaticamente
 * - Verifica restaurants com subscription_status = 'active'
 * - Usa timezone America/Sao_Paulo
 * - Se passaram 2 dias do vencimento ‚Üí muda para 'expired'
 */
async function checkExpiredSubscriptions() {
    try {
        console.log('üîç [SUBSCRIPTION CHECK] Iniciando verifica√ß√£o de assinaturas vencidas...');
        
        // Data atual no timezone America/Sao_Paulo
        const nowBrazil = new Date().toLocaleString('en-US', { timeZone: 'America/Sao_Paulo' });
        const currentDate = new Date(nowBrazil);
        
        console.log(`üìÖ [SUBSCRIPTION CHECK] Data atual (America/Sao_Paulo): ${currentDate.toISOString()}`);
        
        // Buscar todos os restaurantes com assinatura ativa
        const { data: restaurants, error } = await supabaseAdmin
            .from('restaurants')
            .select('id, name, subscription_status, subscription_end_date')
            .eq('subscription_status', 'active');
        
        if (error) {
            console.error('‚ùå [SUBSCRIPTION CHECK] Erro ao buscar restaurantes:', error);
            return;
        }
        
        if (!restaurants || restaurants.length === 0) {
            console.log('‚ÑπÔ∏è [SUBSCRIPTION CHECK] Nenhum restaurante com assinatura ativa encontrado');
            return;
        }
        
        console.log(`üìã [SUBSCRIPTION CHECK] Verificando ${restaurants.length} restaurante(s) com assinatura ativa`);
        
        let expiredCount = 0;
        
        // Verificar cada restaurante
        for (const restaurant of restaurants) {
            if (!restaurant.subscription_end_date) {
                console.log(`‚ö†Ô∏è [SUBSCRIPTION CHECK] Restaurante ${restaurant.name} (${restaurant.id}) sem data de vencimento`);
                continue;
            }
            
            const endDate = new Date(restaurant.subscription_end_date);
            
            // Calcular diferen√ßa em dias
            const diffTime = currentDate - endDate;
            const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));
            
            console.log(`   üìä ${restaurant.name}: vencimento ${endDate.toLocaleDateString('pt-BR')}, diferen√ßa: ${diffDays} dias`);
            
            // Se passaram 2 ou mais dias ap√≥s o vencimento
            if (diffDays >= 2) {
                console.log(`   ‚è∞ ${restaurant.name}: VENCIDO h√° ${diffDays} dias - atualizando status para 'expired'`);
                
                // Atualizar status para expired
                const { error: updateError } = await supabaseAdmin
                    .from('restaurants')
                    .update({ 
                        subscription_status: 'expired',
                        updated_at: new Date().toISOString()
                    })
                    .eq('id', restaurant.id);
                
                if (updateError) {
                    console.error(`   ‚ùå Erro ao atualizar ${restaurant.name}:`, updateError);
                } else {
                    console.log(`   ‚úÖ ${restaurant.name}: Status atualizado para 'expired'`);
                    expiredCount++;
                }
            } else if (diffDays >= 0) {
                console.log(`   ‚ö†Ô∏è ${restaurant.name}: Vencido h√° ${diffDays} dia(s) - aguardando 2 dias para expirar`);
            } else {
                console.log(`   ‚úÖ ${restaurant.name}: Ativo, vence em ${Math.abs(diffDays)} dia(s)`);
            }
        }
        
        console.log(`‚úÖ [SUBSCRIPTION CHECK] Verifica√ß√£o conclu√≠da: ${expiredCount} assinatura(s) expirada(s)`);
        
    } catch (error) {
        console.error('‚ùå [SUBSCRIPTION CHECK] Erro na verifica√ß√£o:', error);
    }
}

// Endpoint manual para verificar assinaturas vencidas (√∫til para testes)
app.post('/api/admin/check-expired-subscriptions', async (req, res) => {
    try {
        await checkExpiredSubscriptions();
        res.json({ 
            success: true, 
            message: 'Verifica√ß√£o de assinaturas vencidas executada com sucesso',
            timestamp: new Date().toISOString()
        });
    } catch (error) {
        res.status(500).json({ 
            success: false, 
            error: error.message 
        });
    }
});

// Endpoint para verificar vencimento de assinatura individual
app.post('/api/admin/check-subscription-expiration/:restaurantId', async (req, res) => {
    try {
        const { restaurantId } = req.params;
        
        console.log(`üîç [INDIVIDUAL CHECK] Verificando vencimento do restaurante: ${restaurantId}`);
        
        // Data atual no timezone America/Sao_Paulo
        const nowBrazil = new Date().toLocaleString('en-US', { timeZone: 'America/Sao_Paulo' });
        const currentDate = new Date(nowBrazil);
        
        // Buscar restaurante espec√≠fico
        const { data: restaurant, error } = await supabaseAdmin
            .from('restaurants')
            .select('id, name, subscription_status, subscription_end_date')
            .eq('id', restaurantId)
            .single();
        
        if (error) {
            console.error('‚ùå [INDIVIDUAL CHECK] Erro ao buscar restaurante:', error);
            return res.status(404).json({ 
                success: false,
                error: 'Restaurante n√£o encontrado',
                details: error.message 
            });
        }
        
        if (!restaurant) {
            return res.status(404).json({ 
                success: false,
                error: 'Restaurante n√£o encontrado' 
            });
        }
        
        console.log(`üìã [INDIVIDUAL CHECK] Restaurante: ${restaurant.name}, Status: ${restaurant.subscription_status}`);
        
        // Se n√£o for assinatura ativa, apenas informar
        if (restaurant.subscription_status !== 'active') {
            return res.json({
                success: true,
                updated: false,
                message: `Assinatura n√£o est√° ativa. Status atual: ${restaurant.subscription_status}`,
                currentStatus: restaurant.subscription_status
            });
        }
        
        // Verificar data de vencimento
        if (!restaurant.subscription_end_date) {
            return res.json({
                success: true,
                updated: false,
                message: 'Assinatura ativa sem data de vencimento definida',
                currentStatus: restaurant.subscription_status
            });
        }
        
        const endDate = new Date(restaurant.subscription_end_date);
        const diffTime = currentDate - endDate;
        const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));
        
        console.log(`üìÖ [INDIVIDUAL CHECK] Data de vencimento: ${endDate.toLocaleDateString('pt-BR')}, Diferen√ßa: ${diffDays} dias`);
        
        // Se passaram 2 ou mais dias ap√≥s o vencimento, marcar como expirada
        if (diffDays >= 2) {
            console.log(`‚è∞ [INDIVIDUAL CHECK] VENCIDO h√° ${diffDays} dias - atualizando para 'expired'`);
            
            const { error: updateError } = await supabaseAdmin
                .from('restaurants')
                .update({ 
                    subscription_status: 'expired',
                    updated_at: new Date().toISOString()
                })
                .eq('id', restaurant.id);
            
            if (updateError) {
                console.error('‚ùå [INDIVIDUAL CHECK] Erro ao atualizar status:', updateError);
                throw updateError;
            }
            
            console.log(`‚úÖ [INDIVIDUAL CHECK] Status atualizado para 'expired'`);
            
            return res.json({
                success: true,
                updated: true,
                message: `Assinatura vencida h√° ${diffDays} dias`,
                daysExpired: diffDays,
                previousStatus: 'active',
                newStatus: 'expired',
                expirationDate: endDate.toLocaleDateString('pt-BR')
            });
        } else {
            const daysUntilExpiration = Math.abs(diffDays);
            const message = diffDays < 0 
                ? `Assinatura ativa, vence em ${daysUntilExpiration} dia(s)` 
                : `Assinatura venceu h√° ${diffDays} dia(s), aguardando prazo de 2 dias`;
            
            console.log(`‚úÖ [INDIVIDUAL CHECK] ${message}`);
            
            return res.json({
                success: true,
                updated: false,
                message: message,
                daysUntilExpiration: diffDays < 0 ? daysUntilExpiration : null,
                daysExpired: diffDays >= 0 ? diffDays : null,
                currentStatus: restaurant.subscription_status,
                expirationDate: endDate.toLocaleDateString('pt-BR')
            });
        }
        
    } catch (error) {
        console.error('‚ùå [INDIVIDUAL CHECK] Erro na verifica√ß√£o:', error);
        res.status(500).json({ 
            success: false,
            error: 'Erro ao verificar vencimento',
            details: error.message 
        });
    }
});

// Executar verifica√ß√£o a cada 6 horas (21600000 ms)
const SUBSCRIPTION_CHECK_INTERVAL = 6 * 60 * 60 * 1000; // 6 horas

// Executar primeira verifica√ß√£o ap√≥s 1 minuto do servidor iniciar
setTimeout(() => {
    console.log('üöÄ [SUBSCRIPTION CHECK] Executando primeira verifica√ß√£o de assinaturas...');
    checkExpiredSubscriptions();
}, 60000);

// Agendar verifica√ß√µes peri√≥dicas
setInterval(() => {
    console.log('‚è∞ [SUBSCRIPTION CHECK] Executando verifica√ß√£o peri√≥dica de assinaturas...');
    checkExpiredSubscriptions();
}, SUBSCRIPTION_CHECK_INTERVAL);

console.log('‚è±Ô∏è [SUBSCRIPTION CHECK] Sistema de verifica√ß√£o autom√°tica configurado (a cada 6 horas)');

// =================================================================
// END SUBSCRIPTION CHECK SYSTEM
// =================================================================

// Inicializa√ß√£o do servidor
app.listen(PORT, HOST, () => {
    console.log(`‚úÖ Servidor TimePulse AI rodando em http://${HOST}:${PORT}`);
    console.log(`   Servidor iniciado em: ${new Date().toLocaleString()}`);
    console.log(`üìä Ambiente: ${NODE_ENV || 'development'}`);
    console.log(`üîí Modo de seguran√ßa: ${(NODE_ENV || 'development') === 'production' ? 'Produ√ß√£o' : 'Desenvolvimento'}`);
    console.log(`üõ°Ô∏è Sistema administrativo: Endpoints /api/admin/* dispon√≠veis`);
    console.log(`üí≥ Sistema de assinaturas: Endpoints /api/asaas/* dispon√≠veis`);
    console.log(`üîß Sistema MCP: Endpoints /api/mcp/* dispon√≠veis`);
    console.log(`üìÖ Sistema de verifica√ß√£o de assinaturas: Ativo (a cada 6 horas)`);
});