================================================================================
          DOCUMENTA√á√ÉO COMPLETA - CARDAPIO.HTML
                    TimePulse AI - Sistema de Gest√£o
================================================================================

üìã √çNDICE
1. Vis√£o Geral
2. Estrutura da P√°gina
3. Sistema de Autentica√ß√£o
4. Carregamento de Configura√ß√µes
5. Gest√£o de Categorias de Produtos
6. Gest√£o de Produtos
7. Gest√£o de Grupos de Adicionais
8. Gest√£o de Itens Adicionais
9. Sistema de Modais
10. Campos Fiscais e IA
11. Sistema de Notifica√ß√µes
12. Cache e Performance
13. Tabelas Supabase
14. Fluxos Completos

================================================================================
1. VIS√ÉO GERAL
================================================================================

ARQUIVO: public/cardapio.html
TAMANHO: 2153 linhas
PROP√ìSITO: Gest√£o completa do card√°pio do restaurante

DESCRI√á√ÉO:
P√°gina web respons√°vel por gerenciar todo o card√°pio do restaurante, incluindo
categorias de produtos, produtos, grupos de adicionais e itens adicionais.
Permite CRUD completo com interface intuitiva em tabs.

PRINCIPAIS FUNCIONALIDADES:
‚úì Gest√£o de categorias de produtos
‚úì Gest√£o de produtos com campos fiscais completos
‚úì Gest√£o de grupos de adicionais (single/multiple selection)
‚úì Gest√£o de itens adicionais vinculados a produtos
‚úì Autentica√ß√£o via cookies (timepulse_instance_token)
‚úì Integra√ß√£o completa com Supabase
‚úì Sistema de notifica√ß√µes visuais
‚úì Cache local para economizar tokens de IA
‚úì Preenchimento autom√°tico de campos fiscais (padr√£o)
‚úì Suporte a impress√£o seletiva (balc√£o, sal√£o, cozinha)

DEPEND√äNCIAS:
- Supabase JS Client (@supabase/supabase-js@2)
- Font Awesome Icons (6.4.0)
- Google Fonts (Inter)
- secure-config.js (sistema de configura√ß√£o segura)
- trial-countdown.js (sistema de teste gratuito)

================================================================================
2. ESTRUTURA DA P√ÅGINA
================================================================================

2.1 LAYOUT PRINCIPAL
---------------------

HTML STRUCTURE:
```html
<body>
    <div class="dashboard-layout">
        <nav class="sidebar">...</nav>
        <main class="main-content">
            <div class="page-header">...</div>
            <div class="main-tabs">...</div>
            <div id="cardapioTab" class="tab-content active">...</div>
            <div id="adicionaisTab" class="tab-content">...</div>
        </main>
    </div>
    
    <!-- Modais -->
    <div id="categoryModal" class="modal">...</div>
    <div id="productModal" class="modal">...</div>
    <div id="addOnCategoryModal" class="modal">...</div>
    <div id="addOnModal" class="modal">...</div>
</body>
```

2.2 SIDEBAR NAVIGATION
-----------------------

MENU PRINCIPAL:
- Dashboard (üìä)
- Pedidos (üì¶)
- Cozinha (üë®‚Äçüç≥)

GEST√ÉO:
- Card√°pio (üçΩÔ∏è) - ATIVO
- Entregadores (üèçÔ∏è)
- Clientes (üë•)

RELAT√ìRIOS:
- An√°lises (üìà)

SISTEMA:
- Configura√ß√µes (‚öôÔ∏è)
- Ajuda (‚ùì)
- Sair (üö™)

2.3 SISTEMA DE TABS
--------------------

TAB 1 - CARD√ÅPIO:
- Grid layout: 300px (categorias) + 1fr (produtos)
- Lista de categorias √† esquerda
- Lista de produtos √† direita
- Filtro por categoria

TAB 2 - ADICIONAIS:
- Grid layout: 300px (grupos) + 1fr (itens)
- Lista de grupos de adicionais √† esquerda
- Lista de itens adicionais √† direita
- Filtro por grupo

================================================================================
3. SISTEMA DE AUTENTICA√á√ÉO
================================================================================

3.1 COOKIE-BASED AUTHENTICATION
---------------------------------

COOKIE NAME: timepulse_instance_token

ESTRUTURA DO COOKIE:
```javascript
{
    instanceId: "uuid-da-instancia",
    restaurantId: "uuid-do-restaurante",
    instanceName: "Nome da Inst√¢ncia",
    userEmail: "email@usuario.com"
}
```

FUN√á√ïES DE AUTENTICA√á√ÉO:

1. getInstanceData() (Linha 1098-1123):
```javascript
function getInstanceData() {
    try {
        const cookie = document.cookie.split('; ')
            .find(row => row.startsWith('timepulse_instance_token='));
        
        if (cookie) {
            const cookieValue = decodeURIComponent(cookie.split('=')[1]);
            const instanceData = JSON.parse(cookieValue);
            
            console.log('‚úÖ Dados da inst√¢ncia:', {
                instanceId: instanceData.instanceId,
                restaurantId: instanceData.restaurantId,
                instanceName: instanceData.instanceName
            });
            
            return instanceData;
        }
        
        return null;
    } catch (error) {
        console.error('Erro ao ler dados da inst√¢ncia:', error);
        return null;
    }
}
```

2. isAuthenticated() (Linha 1125-1128):
```javascript
function isAuthenticated() {
    const instanceData = getInstanceData();
    return instanceData && instanceData.instanceId && instanceData.restaurantId;
}
```

3. requireAuth() (Linha 1130-1136):
```javascript
function requireAuth() {
    if (!isAuthenticated()) {
        window.location.href = 'login.html';
        return false;
    }
    return true;
}
```

4. logout() (Linha 1138-1141):
```javascript
function logout() {
    document.cookie = 'timepulse_instance_token=; path=/; expires=Thu, 01 Jan 1970 00:00:01 GMT;';
    window.location.href = 'login.html';
}
```

================================================================================
4. CARREGAMENTO DE CONFIGURA√á√ïES
================================================================================

4.1 FETCH PUBLIC CONFIG
------------------------

Fun√ß√£o: fetchPublicConfig() (Linha 959-1095)

ENDPOINTS CARREGADOS:
1. /api/config - Configura√ß√£o b√°sica
2. /api/config/supabase - Configura√ß√£o Supabase
3. /api/config/evolution - Configura√ß√£o Evolution API (opcional)
4. /api/config/mapbox - Configura√ß√£o Mapbox (opcional)
5. /api/config/openai - Configura√ß√£o OpenAI (opcional)

HEADERS:
- Accept: application/json
- Cache-Control: no-cache, no-store, must-revalidate
- Pragma: no-cache
- Credentials: include (cookies)

ESTRUTURA DA CONFIGURA√á√ÉO FINAL:
```javascript
{
    ...basicConfig,
    supabaseUrl: "https://xxx.supabase.co",
    supabaseAnonKey: "eyJxxx...",
    evolution: { status: "ok", configured: true, ... },
    mapbox: { status: "ok", configured: true, ... },
    openai: { status: "ok", configured: true, ... }
}
```

4.2 INITIALIZE CONFIGURATION
------------------------------

Fun√ß√£o: initializeConfiguration() (Linha 1143-1156)

PROCESSO:
1. Buscar configura√ß√£o p√∫blica do servidor
2. Validar supabaseUrl e supabaseAnonKey
3. Inicializar cliente Supabase
4. Armazenar em vari√°vel global `supabase`

C√≥digo:
```javascript
async function initializeConfiguration() {
    const config = await fetchPublicConfig();
    
    if (!config || !config.supabaseUrl || !config.supabaseAnonKey) {
        throw new Error('N√£o foi poss√≠vel carregar as configura√ß√µes seguras do servidor.');
    }

    if (window.supabase) {
        supabase = window.supabase.createClient(
            config.supabaseUrl, 
            config.supabaseAnonKey
        );
        console.log('‚úÖ Supabase inicializado com sucesso no card√°pio');
    } else {
        throw new Error('Biblioteca Supabase n√£o encontrada.');
    }
}
```

================================================================================
5. GEST√ÉO DE CATEGORIAS DE PRODUTOS
================================================================================

5.1 ESTRUTURA DE DADOS
-----------------------

TABELA: product_categories

CAMPOS:
- id (uuid, PK)
- restaurant_id (uuid, FK ‚Üí restaurants)
- name (text)
- description (text, nullable)
- display_order (integer, padr√£o 0)
- active (boolean, padr√£o true)
- created_at (timestamp)

5.2 CARREGAMENTO
-----------------

Fun√ß√£o: loadCategories() (Linha 1226-1235)

QUERY SUPABASE:
```javascript
const { data, error } = await supabase
    .from('product_categories')
    .select('*')
    .eq('restaurant_id', getInstanceData().restaurantId)
    .order('display_order', { ascending: true })
    .order('name', { ascending: true });
```

ARMAZENAMENTO:
```javascript
categories = data;  // Array global
```

5.3 RENDERIZA√á√ÉO
-----------------

Fun√ß√£o: renderCategories() (Linha 1269-1284)

HTML GERADO:
```html
<li class="category-item active" onclick="filterByCategory(null)">
    <span>Todos os Produtos</span>
</li>

<li class="category-item" onclick="filterByCategory('uuid')">
    <span>Nome da Categoria</span>
    <div class="category-actions">
        <button onclick="event.stopPropagation(); openCategoryModal('uuid')">
            <i class="fas fa-edit"></i>
        </button>
        <button onclick="event.stopPropagation(); deleteCategory('uuid')">
            <i class="fas fa-trash"></i>
        </button>
    </div>
</li>
```

5.4 MODAL DE CATEGORIA
-----------------------

CAMPOS DO FORMUL√ÅRIO:
- categoryId (hidden) - ID da categoria (vazio se novo)
- categoryName (text, required) - Nome da categoria
- categoryDescription (textarea) - Descri√ß√£o
- categoryOrder (number) - Ordem de exibi√ß√£o
- categoryActive (checkbox) - Categoria ativa

ABRIR MODAL (Linha 1384-1401):
```javascript
function openCategoryModal(id = null) {
    const form = document.getElementById('categoryForm');
    form.reset();
    document.getElementById('categoryId').value = '';
    
    if(id) {
        const category = categories.find(c => c.id === id);
        document.getElementById('categoryModalTitle').textContent = 'Editar Categoria';
        document.getElementById('categoryId').value = category.id;
        document.getElementById('categoryName').value = category.name;
        document.getElementById('categoryDescription').value = category.description;
        document.getElementById('categoryOrder').value = category.display_order;
        document.getElementById('categoryActive').checked = category.active;
    } else {
        document.getElementById('categoryModalTitle').textContent = 'Nova Categoria';
    }
    
    document.getElementById('categoryModal').classList.add('show');
}
```

5.5 SALVAR CATEGORIA
---------------------

Fun√ß√£o: handleCategorySubmit() (Linha 1407-1433)

DADOS DO FORMUL√ÅRIO:
```javascript
const categoryData = {
    restaurant_id: getInstanceData().restaurantId,
    name: document.getElementById('categoryName').value,
    description: document.getElementById('categoryDescription').value,
    display_order: parseInt(document.getElementById('categoryOrder').value) || 0,
    active: document.getElementById('categoryActive').checked,
};
```

INSERT (Nova):
```javascript
await supabase
    .from('product_categories')
    .insert([categoryData]);
```

UPDATE (Edi√ß√£o):
```javascript
await supabase
    .from('product_categories')
    .update(categoryData)
    .eq('id', id);
```

P√ìS-SALVAMENTO:
1. Fechar modal
2. Recarregar categorias (loadCategories)
3. Re-renderizar (renderCategories)

5.6 EXCLUIR CATEGORIA
----------------------

Fun√ß√£o: deleteCategory() (Linha 1435-1450)

VALIDA√á√ÉO:
```javascript
const productCount = products.filter(p => p.category_id === id).length;
if (productCount > 0) {
    alert(`N√£o √© poss√≠vel excluir esta categoria pois ela cont√©m ${productCount} produto(s). 
           Mova ou exclua os produtos primeiro.`);
    return;
}
```

DELETE:
```javascript
if (!confirm('Tem certeza que deseja excluir esta categoria?')) return;

const { error } = await supabase
    .from('product_categories')
    .delete()
    .eq('id', id);
```

5.7 FILTRO POR CATEGORIA
-------------------------

Fun√ß√£o: filterByCategory() (Linha 1353-1359)

PROCESSO:
1. Atualizar selectedCategoryId global
2. Atualizar t√≠tulo da se√ß√£o de produtos
3. Re-renderizar categorias (marca ativa)
4. Re-renderizar produtos (filtrados)

```javascript
function filterByCategory(categoryId) {
    selectedCategoryId = categoryId;
    const category = categories.find(c => c.id === categoryId);
    
    document.getElementById('productsTitle').textContent = 
        category ? `Produtos em ${category.name}` : 'Todos os Produtos';
    
    renderCategories();
    renderProducts();
}
```

================================================================================
6. GEST√ÉO DE PRODUTOS
================================================================================

6.1 ESTRUTURA DE DADOS
-----------------------

TABELA: products

CAMPOS B√ÅSICOS:
- id (uuid, PK)
- restaurant_id (uuid, FK ‚Üí restaurants)
- category_id (uuid, FK ‚Üí product_categories, nullable)
- name (text)
- description (text, nullable)
- price (decimal)
- display_order (integer)
- preparation_time (integer)
- active (boolean)
- impressao (text) - "balcao,salao,cozinha"

CAMPOS FISCAIS:
- ncm (text) - Nomenclatura Comum do Mercosul
- cfop (text) - C√≥digo Fiscal de Opera√ß√µes
- icms_aliquota (decimal) - Al√≠quota ICMS
- icms_cst (text) - C√≥digo Situa√ß√£o Tribut√°ria ICMS
- pis_aliquota (decimal) - Al√≠quota PIS
- pis_cst (text) - C√≥digo Situa√ß√£o Tribut√°ria PIS
- cofins_aliquota (decimal) - Al√≠quota COFINS
- cofins_cst (text) - C√≥digo Situa√ß√£o Tribut√°ria COFINS
- origem_mercadoria (text) - Origem da mercadoria (0-8)
- cest (text) - C√≥digo Especificador da Substitui√ß√£o Tribut√°ria
- unidade_comercial (text) - Unidade comercial (UN, KG, L, etc)
- codigo_interno (text) - C√≥digo interno do produto
- observacoes_fiscais (text) - Observa√ß√µes fiscais
- tributacao_especial (boolean) - Tributa√ß√£o especial
- ai_preenchido (boolean) - Preenchido por IA

6.2 CARREGAMENTO
-----------------

Fun√ß√£o: loadProducts() (Linha 1237-1246)

QUERY SUPABASE COM JOIN:
```javascript
const { data, error } = await supabase
    .from('products')
    .select('*, product_add_on_categories_link(add_on_category_id)')
    .eq('restaurant_id', getInstanceData().restaurantId)
    .order('display_order', { ascending: true })
    .order('name', { ascending: true });
```

NOTA: Inclui vincula√ß√£o com grupos de adicionais via tabela de jun√ß√£o
product_add_on_categories_link

6.3 RENDERIZA√á√ÉO
-----------------

Fun√ß√£o: renderProducts() (Linha 1286-1310)

FILTRO:
```javascript
const filteredProducts = selectedCategoryId 
    ? products.filter(p => p.category_id === selectedCategoryId) 
    : products;
```

HTML GERADO (CADA PRODUTO):
```html
<div class="product-list-item">
    <div class="product-list-item-image">
        <i class="fas fa-image"></i>
    </div>
    <div class="product-list-item-details">
        <div class="product-list-item-name">Nome do Produto</div>
        <div class="product-list-item-description">Descri√ß√£o aqui</div>
    </div>
    <div class="product-list-item-price">R$ 25.00</div>
    <div class="product-list-item-actions">
        <button onclick="openProductModal('uuid')">
            <i class="fas fa-edit"></i>
        </button>
        <button onclick="deleteProduct('uuid')">
            <i class="fas fa-trash"></i>
        </button>
    </div>
</div>
```

6.4 MODAL DE PRODUTO
---------------------

ESTRUTURA COMPLETA (Linha 713-951):

SE√á√ïES DO MODAL:
1. Informa√ß√µes B√°sicas
2. Configura√ß√µes de Impress√£o
3. Vincula√ß√£o com Grupos de Adicionais
4. Informa√ß√µes Fiscais (NCM, CFOP, etc)
5. Informa√ß√µes Fiscais ICMS
6. Informa√ß√µes Fiscais PIS/COFINS

CAMPOS B√ÅSICOS:
- productId (hidden)
- productName (text, required)
- productDescription (textarea)
- productCategory (select) - Categorias carregadas dinamicamente
- productPrice (number, required, step="0.01")
- productActive (checkbox)

CONFIGURA√á√ïES DE IMPRESS√ÉO (Checkboxes):
- impressaoBalcao - Impress√£o no balc√£o
- impressaoSalao - Impress√£o no sal√£o
- impressaoCozinha - Impress√£o na cozinha

VINCULA√á√ÉO COM ADICIONAIS (Radio Buttons):
- Nenhum (padr√£o)
- Grupos de adicionais (carregados dinamicamente)

CAMPOS FISCAIS (com bot√£o "Preencher com IA"):
- productNCM (text) - 8 d√≠gitos
- productCFOP (text) - 4 d√≠gitos
- productICMSAliquota (number)
- productICMSCST (text)
- productPISAliquota (number)
- productPISCST (text)
- productCOFINSAliquota (number)
- productCOFINSCST (text)
- productOrigemMercadoria (select) - 0 a 8
- productCEST (text)
- productUnidadeComercial (select) - UN, KG, L, etc
- productCodigoInterno (text)
- productObservacoesFiscais (textarea)
- productTributacaoEspecial (checkbox)

6.5 ABRIR MODAL DE PRODUTO
----------------------------

Fun√ß√£o: openProductModal() (Linha 1452-1610)

PROCESSO:

1. RESET E INICIALIZA√á√ÉO:
```javascript
const form = document.getElementById('productForm');
form.reset();
document.getElementById('productId').value = '';
```

2. CARREGAR CATEGORIAS NO SELECT:
```javascript
const categorySelect = document.getElementById('productCategory');
categorySelect.innerHTML = '<option value="">Selecione...</option>';
categories.forEach(cat => {
    categorySelect.innerHTML += `<option value="${cat.id}">${cat.name}</option>`;
});
```

3. CRIAR RADIO BUTTONS PARA GRUPOS DE ADICIONAIS:
```javascript
const addOnLinkContainer = document.getElementById('addOnCategoriesLink');
addOnLinkContainer.innerHTML = '';

// Op√ß√£o "Nenhum"
const noneDiv = document.createElement('div');
noneDiv.className = 'radio-group';
const noneRadio = document.createElement('input');
noneRadio.type = 'radio';
noneRadio.id = `addon-link-none`;
noneRadio.value = '';
noneRadio.name = 'addOnLink';
noneRadio.checked = true;
// ... adicionar label e append

// Para cada grupo de adicionais
addOnCategories.forEach((cat, index) => {
    const div = document.createElement('div');
    div.className = 'radio-group';
    
    const radio = document.createElement('input');
    radio.type = 'radio';
    radio.id = `addon-link-${index}`;
    radio.value = cat.id;
    radio.name = 'addOnLink';
    
    const label = document.createElement('label');
    label.htmlFor = radio.id;
    label.textContent = cat.name;
    
    div.appendChild(radio);
    div.appendChild(label);
    addOnLinkContainer.appendChild(div);
});
```

4. SE EDITANDO (id existe):
```javascript
if(id) {
    const product = products.find(p => p.id === id);
    
    // Preencher campos b√°sicos
    document.getElementById('productModalTitle').textContent = 'Editar Produto';
    document.getElementById('productId').value = product.id;
    document.getElementById('productName').value = product.name;
    document.getElementById('productDescription').value = product.description;
    document.getElementById('productCategory').value = product.category_id;
    document.getElementById('productPrice').value = product.price;
    document.getElementById('productActive').checked = product.active;
    
    // Preencher impress√£o
    const impressoes = (product.impressao || '').split(',');
    document.getElementById('impressaoBalcao').checked = impressoes.includes('balcao');
    document.getElementById('impressaoSalao').checked = impressoes.includes('salao');
    document.getElementById('impressaoCozinha').checked = impressoes.includes('cozinha');
    
    // Preencher campos fiscais
    document.getElementById('productNCM').value = product.ncm || '';
    document.getElementById('productCFOP').value = product.cfop || '';
    // ... outros campos fiscais
    
    // Marcar grupo de adicional vinculado
    const linkedCategories = product.product_add_on_categories_link;
    if (linkedCategories && linkedCategories.length > 0) {
        const linkedId = linkedCategories[0].add_on_category_id;
        const linkedRadio = document.querySelector(
            `input[name="addOnLink"][value="${linkedId}"]`
        );
        if (linkedRadio) linkedRadio.checked = true;
    }
}
```

5. SE NOVO PRODUTO:
```javascript
else {
    document.getElementById('productModalTitle').textContent = 'Novo Produto';
    // Limpar todos os campos fiscais
    // Se tem categoria selecionada, pr√©-selecionar
    if(selectedCategoryId) {
        categorySelect.value = selectedCategoryId;
    }
}
```

6.6 SALVAR PRODUTO
-------------------

Fun√ß√£o: handleProductSubmit() (Linha 1616-1742)

PROCESSO COMPLETO:

1. COLETAR IMPRESS√ïES:
```javascript
const impressaoSelecionadas = [];
if (document.getElementById('impressaoBalcao').checked) impressaoSelecionadas.push('balcao');
if (document.getElementById('impressaoSalao').checked) impressaoSelecionadas.push('salao');
if (document.getElementById('impressaoCozinha').checked) impressaoSelecionadas.push('cozinha');
```

2. MONTAR DADOS DO PRODUTO:
```javascript
const productData = {
    restaurant_id: getInstanceData().restaurantId,
    name: document.getElementById('productName').value,
    description: document.getElementById('productDescription').value,
    category_id: document.getElementById('productCategory').value || null,
    price: parseFloat(document.getElementById('productPrice').value),
    display_order: 0,
    preparation_time: 0,
    active: document.getElementById('productActive').checked,
    impressao: impressaoSelecionadas.join(','),
    
    // Campos Fiscais
    ncm: document.getElementById('productNCM').value || null,
    cfop: document.getElementById('productCFOP').value || null,
    icms_aliquota: document.getElementById('productICMSAliquota').value 
        ? parseFloat(document.getElementById('productICMSAliquota').value) 
        : null,
    icms_cst: document.getElementById('productICMSCST').value || null,
    pis_aliquota: document.getElementById('productPISAliquota').value 
        ? parseFloat(document.getElementById('productPISAliquota').value) 
        : null,
    pis_cst: document.getElementById('productPISCST').value || null,
    cofins_aliquota: document.getElementById('productCOFINSAliquota').value 
        ? parseFloat(document.getElementById('productCOFINSAliquota').value) 
        : null,
    cofins_cst: document.getElementById('productCOFINSCST').value || null,
    origem_mercadoria: document.getElementById('productOrigemMercadoria').value || null,
    cest: document.getElementById('productCEST').value || null,
    unidade_comercial: document.getElementById('productUnidadeComercial').value || 'UN',
    codigo_interno: document.getElementById('productCodigoInterno').value || null,
    observacoes_fiscais: document.getElementById('productObservacoesFiscais').value || null,
    tributacao_especial: document.getElementById('productTributacaoEspecial').checked,
    ai_preenchido: document.getElementById('aiPreenchidoStatus').style.display !== 'none'
};
```

3. INSERT OU UPDATE:
```javascript
let savedProduct;
let productError;

if (id) {
    console.log('‚úèÔ∏è Atualizando produto existente...');
    const { data, error } = await supabase
        .from('products')
        .update(productData)
        .eq('id', id)
        .select()
        .single();
    savedProduct = data;
    productError = error;
} else {
    console.log('‚ûï Criando novo produto...');
    const { data, error } = await supabase
        .from('products')
        .insert([productData])
        .select()
        .single();
    savedProduct = data;
    productError = error;
}
```

4. TRATAMENTO DE ERROS:
```javascript
if (productError) {
    console.error('‚ùå Erro detalhado:', productError);
    
    // Erro de FK (categoria inv√°lida)
    if (productError.code === '23503' || productError.message?.includes('foreign key')) {
        alert('Erro: Categoria inv√°lida. Selecione uma categoria v√°lida.');
    } else {
        alert(`Erro ao salvar produto: ${productError.message}`);
    }
    return;
}
```

5. VINCULAR GRUPO DE ADICIONAIS:
```javascript
const selectedRadio = document.querySelector('input[name="addOnLink"]:checked');
const selectedAddOnLink = selectedRadio ? selectedRadio.value : '';

// Limpar links existentes
await supabase
    .from('product_add_on_categories_link')
    .delete()
    .eq('product_id', savedProduct.id);

// Se selecionou um grupo, criar link
if (selectedAddOnLink && selectedAddOnLink !== '') {
    const linkToInsert = { 
        product_id: savedProduct.id, 
        add_on_category_id: selectedAddOnLink 
    };
    
    await supabase
        .from('product_add_on_categories_link')
        .insert([linkToInsert]);
}
```

6. FINALIZA√á√ÉO:
```javascript
closeProductModal();
await loadProducts();
renderProducts();
showNotification('Produto salvo com sucesso!', 'success');
```

6.7 EXCLUIR PRODUTO
--------------------

Fun√ß√£o: deleteProduct() (Linha 1909-1920)

PROCESSO:
1. Confirmar exclus√£o
2. Deletar links com grupos de adicionais
3. Deletar produto
4. Recarregar e renderizar

```javascript
async function deleteProduct(id) {
    if (!confirm('Tem certeza que deseja excluir este produto?')) return;
    
    // Remover links com adicionais
    await supabase
        .from('product_add_on_categories_link')
        .delete()
        .eq('product_id', id);
    
    // Remover produto
    const { error } = await supabase
        .from('products')
        .delete()
        .eq('id', id);
    
    if (error) {
        console.error('Erro ao excluir produto:', error);
        alert('Erro ao excluir produto.');
    } else {
        await loadProducts();
        renderProducts();
    }
}
```

================================================================================
7. GEST√ÉO DE GRUPOS DE ADICIONAIS
================================================================================

7.1 ESTRUTURA DE DADOS
-----------------------

TABELA: add_on_categories

CAMPOS:
- id (uuid, PK)
- restaurant_id (uuid, FK ‚Üí restaurants)
- name (text)
- description (text, nullable)
- selection_type (text) - 'single' ou 'multiple'
- min_selection (integer) - M√≠nimo de sele√ß√µes
- max_selection (integer) - M√°ximo de sele√ß√µes
- created_at (timestamp)

REGRAS DE SELE√á√ÉO:
- single: Cliente pode escolher apenas 1 item
- multiple: Cliente pode escolher v√°rios itens (respeitando min/max)

EXEMPLOS:
1. Ponto da Carne (single, min=1, max=1)
2. Adicionais (multiple, min=0, max=5)
3. Ingredientes Obrigat√≥rios (multiple, min=2, max=2)

7.2 CARREGAMENTO
-----------------

Fun√ß√£o: loadAddOnCategories() (Linha 1248-1256)

QUERY:
```javascript
const { data, error } = await supabase
    .from('add_on_categories')
    .select('*')
    .eq('restaurant_id', getInstanceData().restaurantId)
    .order('name', { ascending: true });
```

7.3 RENDERIZA√á√ÉO
-----------------

Fun√ß√£o: renderAddOnCategories() (Linha 1312-1327)

HTML GERADO:
```html
<li class="category-item active" onclick="filterByAddOnCategory(null)">
    <span>Todos os Itens</span>
</li>

<li class="category-item" onclick="filterByAddOnCategory('uuid')">
    <span>Nome do Grupo</span>
    <div class="category-actions">
        <button onclick="event.stopPropagation(); openAddOnCategoryModal('uuid')">
            <i class="fas fa-edit"></i>
        </button>
        <button onclick="event.stopPropagation(); deleteAddOnCategory('uuid')">
            <i class="fas fa-trash"></i>
        </button>
    </div>
</li>
```

7.4 MODAL DE GRUPO
-------------------

CAMPOS:
- addOnCategoryId (hidden)
- addOnCategoryName (text, required)
- addOnCategoryDescription (textarea)
- selectionType (radio):
  * selectionTypeSingle - Sele√ß√£o √∫nica
  * selectionTypeMultiple - Sele√ß√£o m√∫ltipla
- minSelection (number) - Sele√ß√£o m√≠nima
- maxSelection (number) - Sele√ß√£o m√°xima

ABRIR MODAL (Linha 1923-1952):
```javascript
function openAddOnCategoryModal(id = null) {
    const form = document.getElementById('addOnCategoryForm');
    form.reset();
    document.getElementById('addOnCategoryId').value = '';
    
    // Valores padr√£o
    document.getElementById('selectionTypeMultiple').checked = true;
    document.getElementById('minSelection').value = 0;
    document.getElementById('maxSelection').value = 1;

    if(id) {
        const category = addOnCategories.find(c => c.id === id);
        if (category) {
            document.getElementById('addOnCategoryModalTitle').textContent = 
                'Editar Grupo de Adicionais';
            document.getElementById('addOnCategoryId').value = category.id;
            document.getElementById('addOnCategoryName').value = category.name;
            document.getElementById('addOnCategoryDescription').value = 
                category.description || '';
            document.getElementById('minSelection').value = 
                category.min_selection || 0;
            document.getElementById('maxSelection').value = 
                category.max_selection || 1;

            if (category.selection_type === 'single') {
                document.getElementById('selectionTypeSingle').checked = true;
            } else {
                document.getElementById('selectionTypeMultiple').checked = true;
            }
        }
    } else {
        document.getElementById('addOnCategoryModalTitle').textContent = 
            'Novo Grupo de Adicionais';
    }
    
    document.getElementById('addOnCategoryModal').classList.add('show');
}
```

7.5 SALVAR GRUPO
-----------------

Fun√ß√£o: handleAddOnCategorySubmit() (Linha 1958-1995)

VALIDA√á√ÉO:
```javascript
const minSelection = parseInt(document.getElementById('minSelection').value) || 0;
const maxSelection = parseInt(document.getElementById('maxSelection').value) || 1;

if (minSelection > maxSelection) {
    alert("A sele√ß√£o m√≠nima n√£o pode ser maior que a sele√ß√£o m√°xima.");
    return;
}
```

DADOS:
```javascript
const data = {
    restaurant_id: getInstanceData().restaurantId,
    name: document.getElementById('addOnCategoryName').value,
    description: document.getElementById('addOnCategoryDescription').value,
    selection_type: document.querySelector('input[name="selectionType"]:checked').value,
    min_selection: minSelection,
    max_selection: maxSelection,
};
```

INSERT/UPDATE:
```javascript
if (id) {
    await supabase.from('add_on_categories').update(data).eq('id', id);
} else {
    await supabase.from('add_on_categories').insert([data]);
}
```

7.6 EXCLUIR GRUPO
------------------

Fun√ß√£o: deleteAddOnCategory() (Linha 1997-2014)

VALIDA√á√ÉO (tem itens):
```javascript
const addOnCount = addOns.filter(a => a.add_on_category_id === id).length;
if (addOnCount > 0) {
    alert(`N√£o √© poss√≠vel excluir este grupo, pois ele cont√©m ${addOnCount} item(ns).`);
    return;
}
```

DELETE:
```javascript
if (!confirm('Tem certeza? Isso remover√° o grupo permanentemente.')) return;

await supabase.from('product_add_ons').delete().eq('add_on_category_id', id);
const { error } = await supabase.from('add_on_categories').delete().eq('id', id);
```

================================================================================
8. GEST√ÉO DE ITENS ADICIONAIS
================================================================================

8.1 ESTRUTURA DE DADOS
-----------------------

TABELA: product_add_ons

CAMPOS:
- id (uuid, PK)
- restaurant_id (uuid, FK ‚Üí restaurants)
- add_on_category_id (uuid, FK ‚Üí add_on_categories)
- name (text)
- price (decimal)
- active (boolean)
- created_at (timestamp)

8.2 CARREGAMENTO
-----------------

Fun√ß√£o: loadAddOns() (Linha 1258-1266)

QUERY:
```javascript
const { data, error } = await supabase
    .from('product_add_ons')
    .select('*')
    .eq('restaurant_id', getInstanceData().restaurantId)
    .order('name', { ascending: true });
```

8.3 RENDERIZA√á√ÉO
-----------------

Fun√ß√£o: renderAddOns() (Linha 1329-1351)

FILTRO:
```javascript
const filteredAddOns = selectedAddOnCategoryId 
    ? addOns.filter(p => p.add_on_category_id === selectedAddOnCategoryId) 
    : addOns;
```

HTML GERADO:
```html
<div class="product-list-item">
    <div class="product-list-item-details">
        <div class="product-list-item-name">Nome do Adicional</div>
    </div>
    <div class="product-list-item-price">R$ 5.00</div>
    <div class="product-list-item-actions">
        <button onclick="openAddOnModal('uuid')">
            <i class="fas fa-edit"></i>
        </button>
        <button onclick="deleteAddOn('uuid')">
            <i class="fas fa-trash"></i>
        </button>
    </div>
</div>
```

8.4 MODAL DE ITEM
------------------

CAMPOS:
- addOnId (hidden)
- addOnName (text, required)
- addOnPrice (number, required, step="0.01")
- addOnCategory (select) - Grupos carregados dinamicamente
- addOnActive (checkbox)

ABRIR MODAL (Linha 2016-2043):
```javascript
function openAddOnModal(id = null) {
    const form = document.getElementById('addOnForm');
    form.reset();
    document.getElementById('addOnId').value = '';
    
    // Carregar grupos no select
    const categorySelect = document.getElementById('addOnCategory');
    categorySelect.innerHTML = '<option value="">Selecione...</option>';
    addOnCategories.forEach(cat => {
        categorySelect.innerHTML += `<option value="${cat.id}">${cat.name}</option>`;
    });

    if(id) {
        const addOn = addOns.find(a => a.id === id);
        document.getElementById('addOnModalTitle').textContent = 'Editar Item Adicional';
        document.getElementById('addOnId').value = addOn.id;
        document.getElementById('addOnName').value = addOn.name;
        document.getElementById('addOnPrice').value = addOn.price;
        document.getElementById('addOnCategory').value = addOn.add_on_category_id;
        document.getElementById('addOnActive').checked = addOn.active;
    } else {
        document.getElementById('addOnModalTitle').textContent = 'Novo Item Adicional';
        if(selectedAddOnCategoryId) {
            categorySelect.value = selectedAddOnCategoryId;
        }
    }
    
    document.getElementById('addOnModal').classList.add('show');
}
```

8.5 SALVAR ITEM
----------------

Dados e processo similar aos produtos, mas mais simples (sem campos fiscais).

8.6 EXCLUIR ITEM
-----------------

Simples delete sem valida√ß√µes adicionais.

================================================================================
9. SISTEMA DE MODAIS
================================================================================

9.1 ESTRUTURA CSS
------------------

MODAL BASE:
```css
.modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    display: none;
    align-items: center;
    justify-content: center;
    z-index: 2000;
    padding: 1rem;
}

.modal.show {
    display: flex;
    align-items: flex-start;
    justify-content: center;
}

.modal-content {
    background: white;
    border-radius: 8px;
    max-width: 90vw;
    max-height: 90vh;
    overflow-y: auto;
    position: relative;
    width: 100%;
}
```

HEADER STICKY:
```css
.modal-header {
    padding: 1.5rem;
    border-bottom: 1px solid #e9ecef;
    position: sticky;
    top: 0;
    background: white;
    z-index: 1;
}
```

9.2 ABRIR/FECHAR
-----------------

ABRIR:
```javascript
document.getElementById('modalId').classList.add('show');
```

FECHAR:
```javascript
document.getElementById('modalId').classList.remove('show');
```

BOT√ÉO FECHAR (X):
```html
<button class="modal-close" onclick="closeModal()">&times;</button>
```

9.3 MODAIS DISPON√çVEIS
-----------------------

1. categoryModal - Categorias de produtos
2. productModal - Produtos
3. addOnCategoryModal - Grupos de adicionais
4. addOnModal - Itens adicionais

================================================================================
10. CAMPOS FISCAIS E IA
================================================================================

10.1 CAMPOS FISCAIS OBRIGAT√ìRIOS (NF-e)
-----------------------------------------

NCM (Nomenclatura Comum do Mercosul):
- 8 d√≠gitos
- Exemplo: 21069090 (prepara√ß√µes aliment√≠cias diversas)

CFOP (C√≥digo Fiscal de Opera√ß√µes):
- 4 d√≠gitos
- Exemplo: 5102 (venda dentro do estado)

ICMS (Imposto sobre Circula√ß√£o de Mercadorias):
- Al√≠quota (%)
- CST (C√≥digo Situa√ß√£o Tribut√°ria)
- Exemplo: 12.00% / CST 000

PIS (Programa de Integra√ß√£o Social):
- Al√≠quota (%)
- CST
- Exemplo: 1.65% / CST 01

COFINS (Contribui√ß√£o para Financiamento da Seguridade Social):
- Al√≠quota (%)
- CST
- Exemplo: 7.60% / CST 01

ORIGEM DA MERCADORIA:
- 0: Nacional
- 1: Estrangeira - Importa√ß√£o direta
- 2: Estrangeira - Adquirida no mercado interno
- ... (0 a 8)

CEST (C√≥digo Especificador da Substitui√ß√£o Tribut√°ria):
- Opcional
- 7 d√≠gitos

UNIDADE COMERCIAL:
- UN (unidade)
- KG (quilograma)
- L (litro)
- CX (caixa)
- PC (pe√ßa)
- etc.

10.2 SISTEMA DE IA (DESABILITADO)
-----------------------------------

Fun√ß√£o: preencherComIA() (Linha 1809-1864)

PROCESSO ATUAL:
1. Verifica nome do produto
2. Mostra spinner de carregamento
3. Tenta buscar no cache local
4. Se n√£o tem cache, usa dados padr√£o
5. Preenche campos do formul√°rio
6. Mostra notifica√ß√£o de sucesso

CACHE LOCAL (Linha 1776-1806):

CHAVE DE CACHE:
```javascript
const AI_CACHE_KEY = 'timepulse_ai_fiscal_cache';
const CACHE_DURATION = 24 * 60 * 60 * 1000; // 24 horas
```

ESTRUTURA DO CACHE:
```javascript
{
    "pizza_calabresa": {
        data: { ncm: "...", cfop: "...", ... },
        timestamp: 1234567890
    },
    "hamburguer_artesanal": {
        data: { ... },
        timestamp: 1234567891
    }
}
```

GET CACHE:
```javascript
function getCachedFiscalData(productKey) {
    try {
        const cache = JSON.parse(localStorage.getItem(AI_CACHE_KEY) || '{}');
        const cached = cache[productKey];
        
        if (cached && (Date.now() - cached.timestamp) < CACHE_DURATION) {
            console.log('üì¶ Dados recuperados do cache:', productKey);
            return cached.data;
        }
    } catch (error) {
        console.warn('Erro ao ler cache:', error);
    }
    return null;
}
```

SET CACHE:
```javascript
function setCachedFiscalData(productKey, data) {
    try {
        const cache = JSON.parse(localStorage.getItem(AI_CACHE_KEY) || '{}');
        cache[productKey] = {
            data: data,
            timestamp: Date.now()
        };
        localStorage.setItem(AI_CACHE_KEY, JSON.stringify(cache));
        console.log('üíæ Dados salvos no cache:', productKey);
    } catch (error) {
        console.warn('Erro ao salvar cache:', error);
    }
}
```

10.3 DADOS FISCAIS PADR√ÉO
--------------------------

Fun√ß√£o: gerarDadosFiscaisPadrao() (Linha 1891-1907)

VALORES PADR√ÉO (Produtos Aliment√≠cios):
```javascript
{
    ncm: '21069090',           // Prepara√ß√µes aliment√≠cias diversas
    cfop: '5102',              // Venda dentro do estado
    icms_aliquota: 12.00,      // 12%
    icms_cst: '000',           // Tributada integralmente
    pis_aliquota: 1.65,        // 1.65%
    pis_cst: '01',             // Opera√ß√£o tribut√°vel
    cofins_aliquota: 7.60,     // 7.60%
    cofins_cst: '01',          // Opera√ß√£o tribut√°vel
    origem_mercadoria: '0',    // Nacional
    unidade_comercial: 'UN',   // Unidade
    cest: null,
    confianca: 0.5,            // 50% de confian√ßa (padr√£o)
    observacoes: 'Classifica√ß√£o padr√£o aplicada. Revisar manualmente.'
}
```

10.4 PREENCHER CAMPOS
----------------------

Fun√ß√£o: preencherCamposFiscais() (Linha 1867-1880)

```javascript
function preencherCamposFiscais(dados) {
    document.getElementById('productNCM').value = dados.ncm || '';
    document.getElementById('productCFOP').value = dados.cfop || '';
    document.getElementById('productICMSAliquota').value = dados.icms_aliquota || '';
    document.getElementById('productICMSCST').value = dados.icms_cst || '';
    document.getElementById('productPISAliquota').value = dados.pis_aliquota || '';
    document.getElementById('productPISCST').value = dados.pis_cst || '';
    document.getElementById('productCOFINSAliquota').value = dados.cofins_aliquota || '';
    document.getElementById('productCOFINSCST').value = dados.cofins_cst || '';
    document.getElementById('productOrigemMercadoria').value = dados.origem_mercadoria || '';
    document.getElementById('productUnidadeComercial').value = dados.unidade_comercial || 'UN';
    
    if (dados.cest) {
        document.getElementById('productCEST').value = dados.cest;
    }
}
```

================================================================================
11. SISTEMA DE NOTIFICA√á√ïES
================================================================================

11.1 ESTRUTURA
---------------

Fun√ß√£o: showNotification() (Linha 1745-1774)

TIPOS:
- 'success' (verde)
- 'error' (vermelho)
- 'info' (azul - n√£o implementado no CSS)

HTML GERADO:
```html
<div class="notification success">
    <div class="notification-content">
        <i class="fas fa-check-circle"></i>
        <span>Mensagem aqui</span>
        <button class="notification-close" onclick="this.parentElement.parentElement.remove()">
            <i class="fas fa-times"></i>
        </button>
    </div>
</div>
```

11.2 COMPORTAMENTO
-------------------

POSI√á√ÉO: Fixed, top-right (20px, 20px)
ANIMA√á√ÉO: slideInRight (CSS)
DURA√á√ÉO: 4 segundos (auto-remove)
LIMITE: 1 notifica√ß√£o por vez (remove existente antes)

```javascript
function showNotification(message, type = 'success') {
    // Remover existente
    const existingNotification = document.querySelector('.notification');
    if (existingNotification) {
        existingNotification.remove();
    }
    
    // Criar nova
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.innerHTML = `...`;
    
    // Adicionar ao body
    document.body.appendChild(notification);
    
    // Auto-remove ap√≥s 4s
    setTimeout(() => {
        if (notification.parentElement) {
            notification.remove();
        }
    }, 4000);
}
```

11.3 CSS ANIMATION
-------------------

```css
@keyframes slideInRight {
    from {
        transform: translateX(100%);
        opacity: 0;
    }
    to {
        transform: translateX(0);
        opacity: 1;
    }
}

.notification {
    animation: slideInRight 0.3s ease-out;
}
```

================================================================================
12. CACHE E PERFORMANCE
================================================================================

12.1 CACHE DE CONFIGURA√á√ÉO
----------------------------

HEADERS DE CACHE:
```javascript
headers: {
    'Accept': 'application/json',
    'Cache-Control': 'no-cache, no-store, must-revalidate',
    'Pragma': 'no-cache'
}
```

TIMESTAMP NAS URLs:
```javascript
const timestamp = Date.now();
const configUrl = `${baseUrl}/api/config?t=${timestamp}`;
```

OBJETIVO: Evitar cache do navegador nas configura√ß√µes

12.2 CACHE DE DADOS FISCAIS (IA)
----------------------------------

localStorage KEY: 'timepulse_ai_fiscal_cache'
DURA√á√ÉO: 24 horas
ESTRUTURA: Map de produto ‚Üí dados fiscais

BENEF√çCIOS:
- Economia de tokens da API de IA
- Resposta instant√¢nea para produtos repetidos
- Persist√™ncia entre sess√µes

12.3 OTIMIZA√á√ïES
-----------------

1. CARREGAMENTO PARALELO:
```javascript
await Promise.all([
    loadCategories(),
    loadProducts(),
    loadAddOnCategories(),
    loadAddOns()
]);
```

2. RENDERIZA√á√ÉO SOB DEMANDA:
- Apenas produtos da categoria selecionada
- Apenas adicionais do grupo selecionado

3. DEBOUNCE IMPL√çCITO:
- Modais previnem m√∫ltiplos salvamentos
- Confirma√ß√µes previnem m√∫ltiplos deletes

================================================================================
13. TABELAS SUPABASE
================================================================================

13.1 DIAGRAMA DE RELACIONAMENTOS
----------------------------------

restaurants
    ‚îî‚îÄ‚Üí product_categories
            ‚îî‚îÄ‚Üí products ‚Üê‚îê
                    ‚Üì      ‚îÇ
        product_add_on_categories_link
                    ‚Üë
    ‚îî‚îÄ‚Üí add_on_categories
            ‚îî‚îÄ‚Üí product_add_ons

13.2 PRODUCT_CATEGORIES
------------------------

Tabela: product_categories
Descri√ß√£o: Categorias de produtos do card√°pio

COLUNAS:
- id (uuid, PK)
- restaurant_id (uuid, FK ‚Üí restaurants.id)
- name (text, NOT NULL)
- description (text)
- display_order (integer, DEFAULT 0)
- active (boolean, DEFAULT true)
- created_at (timestamp)

√çNDICES:
- PRIMARY KEY (id)
- FOREIGN KEY (restaurant_id) ‚Üí restaurants(id)
- INDEX por restaurant_id, display_order

13.3 PRODUCTS
--------------

Tabela: products
Descri√ß√£o: Produtos do card√°pio

COLUNAS B√ÅSICAS:
- id (uuid, PK)
- restaurant_id (uuid, FK ‚Üí restaurants.id)
- category_id (uuid, FK ‚Üí product_categories.id, NULL)
- name (text, NOT NULL)
- description (text)
- price (decimal, NOT NULL)
- display_order (integer, DEFAULT 0)
- preparation_time (integer)
- active (boolean, DEFAULT true)
- impressao (text) - "balcao,salao,cozinha"

COLUNAS FISCAIS:
- ncm (text)
- cfop (text)
- icms_aliquota (decimal)
- icms_cst (text)
- pis_aliquota (decimal)
- pis_cst (text)
- cofins_aliquota (decimal)
- cofins_cst (text)
- origem_mercadoria (text)
- cest (text)
- unidade_comercial (text, DEFAULT 'UN')
- codigo_interno (text)
- observacoes_fiscais (text)
- tributacao_especial (boolean, DEFAULT false)
- ai_preenchido (boolean, DEFAULT false)

METADADOS:
- created_at (timestamp)
- updated_at (timestamp)

13.4 ADD_ON_CATEGORIES
-----------------------

Tabela: add_on_categories
Descri√ß√£o: Grupos de adicionais (ex: "Ponto da Carne", "Adicionais")

COLUNAS:
- id (uuid, PK)
- restaurant_id (uuid, FK ‚Üí restaurants.id)
- name (text, NOT NULL)
- description (text)
- selection_type (text) - 'single' ou 'multiple'
- min_selection (integer, DEFAULT 0)
- max_selection (integer, DEFAULT 1)
- created_at (timestamp)

REGRAS:
- single: max_selection = 1 (obrigatoriamente)
- multiple: min_selection <= max_selection

13.5 PRODUCT_ADD_ONS
---------------------

Tabela: product_add_ons
Descri√ß√£o: Itens adicionais (ex: "Mal Passado", "Bacon Extra")

COLUNAS:
- id (uuid, PK)
- restaurant_id (uuid, FK ‚Üí restaurants.id)
- add_on_category_id (uuid, FK ‚Üí add_on_categories.id)
- name (text, NOT NULL)
- price (decimal, NOT NULL)
- active (boolean, DEFAULT true)
- created_at (timestamp)

13.6 PRODUCT_ADD_ON_CATEGORIES_LINK
-------------------------------------

Tabela: product_add_on_categories_link
Descri√ß√£o: Vincula√ß√£o produto ‚Üî grupo de adicionais (N:N)

COLUNAS:
- id (uuid, PK)
- product_id (uuid, FK ‚Üí products.id)
- add_on_category_id (uuid, FK ‚Üí add_on_categories.id)
- created_at (timestamp)

CONSTRAINTS:
- UNIQUE (product_id, add_on_category_id)
- Atualmente limitado a 1 grupo por produto (radio button)

QUERIES COMUNS:

Buscar grupos de um produto:
```sql
SELECT ac.* 
FROM add_on_categories ac
JOIN product_add_on_categories_link link ON link.add_on_category_id = ac.id
WHERE link.product_id = '...'
```

Buscar produtos de um grupo:
```sql
SELECT p.* 
FROM products p
JOIN product_add_on_categories_link link ON link.product_id = p.id
WHERE link.add_on_category_id = '...'
```

================================================================================
14. FLUXOS COMPLETOS
================================================================================

14.1 FLUXO DE INICIALIZA√á√ÉO
----------------------------

1. DOMContentLoaded dispara
2. initializeConfiguration()
   a. fetchPublicConfig()
      - Buscar /api/config
      - Buscar /api/config/supabase
      - Buscar /api/config/evolution (opcional)
      - Buscar /api/config/mapbox (opcional)
      - Buscar /api/config/openai (opcional)
   b. Criar cliente Supabase
3. loadRestaurantInfo()
   a. Verificar autentica√ß√£o (cookie)
   b. Buscar dados do restaurante
   c. Atualizar nome no sidebar
4. loadAllData() (paralelo)
   a. loadCategories()
   b. loadProducts()
   c. loadAddOnCategories()
   d. loadAddOns()
5. renderAll()
   a. renderCategories()
   b. renderProducts()
   c. renderAddOnCategories()
   d. renderAddOns()
6. setupEventListeners()
   a. categoryForm ‚Üí handleCategorySubmit
   b. productForm ‚Üí handleProductSubmit
   c. addOnCategoryForm ‚Üí handleAddOnCategorySubmit
   d. addOnForm ‚Üí handleAddOnSubmit

14.2 FLUXO DE CRIA√á√ÉO DE PRODUTO
----------------------------------

1. Usu√°rio clica "Novo Produto"
2. openProductModal(null)
   a. Reset formul√°rio
   b. Carregar categorias no select
   c. Criar radio buttons de grupos de adicionais
   d. Pr√©-selecionar categoria atual (se houver)
   e. Limpar campos fiscais
   f. Mostrar modal
3. Usu√°rio preenche dados
   a. Nome (obrigat√≥rio)
   b. Descri√ß√£o
   c. Categoria
   d. Pre√ßo (obrigat√≥rio)
   e. Marcar impress√µes
   f. Selecionar grupo de adicionais
   g. (Opcional) Clicar "Preencher com IA"
      - Verificar cache
      - Se n√£o tem, usar padr√£o
      - Preencher campos fiscais
4. Usu√°rio clica "Salvar"
5. handleProductSubmit(e)
   a. Coletar impress√µes selecionadas
   b. Montar productData
   c. INSERT em products
   d. Receber savedProduct
   e. Deletar links existentes
   f. Se selecionou grupo, INSERT em product_add_on_categories_link
   g. Fechar modal
   h. Recarregar produtos
   i. Renderizar lista
   j. Mostrar notifica√ß√£o de sucesso

14.3 FLUXO DE EDI√á√ÉO DE PRODUTO
---------------------------------

1. Usu√°rio clica bot√£o editar do produto
2. openProductModal(productId)
   a. Reset formul√°rio
   b. Carregar categorias no select
   c. Criar radio buttons de grupos
   d. Buscar produto por ID
   e. Preencher TODOS os campos (b√°sicos + fiscais)
   f. Marcar impress√µes do produto
   g. Marcar grupo de adicional vinculado
   h. Mostrar modal
3. Usu√°rio edita dados
4. Usu√°rio clica "Salvar"
5. handleProductSubmit(e)
   a. Coletar dados
   b. UPDATE em products WHERE id = productId
   c. Receber savedProduct
   d. Deletar links existentes
   e. Se selecionou grupo, INSERT novo link
   f. Fechar modal
   g. Recarregar e renderizar
   h. Notifica√ß√£o de sucesso

14.4 FLUXO DE EXCLUS√ÉO DE PRODUTO
-----------------------------------

1. Usu√°rio clica bot√£o excluir
2. deleteProduct(id)
3. Confirmar exclus√£o
4. DELETE em product_add_on_categories_link WHERE product_id = id
5. DELETE em products WHERE id = id
6. Recarregar produtos
7. Renderizar lista atualizada

14.5 FLUXO DE FILTRO POR CATEGORIA
------------------------------------

1. Usu√°rio clica em categoria
2. filterByCategory(categoryId)
3. Atualizar selectedCategoryId global
4. Buscar nome da categoria
5. Atualizar t√≠tulo "Produtos em [Nome]"
6. renderCategories()
   a. Marcar categoria selecionada como active
7. renderProducts()
   a. Filtrar produtos: category_id === selectedCategoryId
   b. Renderizar apenas produtos filtrados
   c. Se vazio, mostrar "Nenhum produto encontrado"

14.6 FLUXO DE PREENCHIMENTO COM IA (PADR√ÉO)
---------------------------------------------

1. Usu√°rio clica "Preencher com IA"
2. preencherComIA()
3. Validar nome do produto
4. Mostrar spinner
5. Criar chave de cache: nome_descricao
6. getCachedFiscalData(key)
   a. Buscar em localStorage
   b. Verificar timestamp (< 24h)
   c. Se v√°lido, retornar dados
   d. Se n√£o, retornar null
7. Se n√£o tem cache:
   a. gerarDadosFiscaisPadrao()
   b. Retornar dados padr√£o
   c. setCachedFiscalData(key, dados)
8. preencherCamposFiscais(dados)
   a. Preencher todos os campos do formul√°rio
9. Mostrar status "AI Preenchido"
10. Notifica√ß√£o de sucesso
11. Restaurar bot√£o original

14.7 FLUXO DE VINCULA√á√ÉO PRODUTO ‚Üí GRUPO DE ADICIONAIS
--------------------------------------------------------

1. No modal de produto, renderizar radio buttons
2. Para cada grupo de adicionais:
   a. Criar <input type="radio" name="addOnLink" value="grupoId">
   b. Criar <label> com nome do grupo
3. Adicionar op√ß√£o "Nenhum" (value="")
4. Se editando produto:
   a. Buscar links: product.product_add_on_categories_link
   b. Se tem link, marcar radio do grupo correspondente
   c. Se n√£o tem, marcar "Nenhum"
5. Ao salvar produto:
   a. Ler radio selecionado
   b. DELETE todos os links do produto
   c. Se selecionou grupo (n√£o "Nenhum"):
      - INSERT (product_id, add_on_category_id)

================================================================================
FIM DA DOCUMENTA√á√ÉO
================================================================================

RESUMO FINAL:

O arquivo cardapio.html √© uma SPA (Single Page Application) completa para
gest√£o de card√°pio de restaurantes, com:

‚úì 2 tabs principais (Card√°pio e Adicionais)
‚úì 4 entidades gerenciadas (Categorias, Produtos, Grupos, Itens)
‚úì 4 modais CRUD completos
‚úì Campos fiscais para NF-e
‚úì Sistema de cache inteligente
‚úì Autentica√ß√£o via cookies
‚úì Integra√ß√£o total com Supabase
‚úì UI responsiva e moderna
‚úì Notifica√ß√µes visuais
‚úì Preenchimento autom√°tico (padr√£o)

TECNOLOGIAS:
- Vanilla JavaScript (ES6+)
- Supabase Client
- Font Awesome Icons
- CSS3 Grid/Flexbox
- localStorage para cache

ARQUITETURA:
- Sem frameworks (Vanilla JS)
- State global em vari√°veis
- Event-driven
- Modular (fun√ß√µes separadas)
- Async/await para opera√ß√µes ass√≠ncronas
